[{"path":"https://insightsengineering.github.io/hermes/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contribution Guidelines","title":"Contribution Guidelines","text":"üôè Thank taking time contribute! input deeply valued, whether issue, pull request, even feedback, regardless size, content scope.","code":""},{"path":"https://insightsengineering.github.io/hermes/CONTRIBUTING.html","id":"table-of-contents","dir":"","previous_headings":"","what":"Table of contents","title":"Contribution Guidelines","text":"üë∂ Getting started üóÉ License üìú Issues üö© Pull requests üíª Coding guidelines üèÜ Recognition model ‚ùì Questions","code":""},{"path":"https://insightsengineering.github.io/hermes/CONTRIBUTING.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting started","title":"Contribution Guidelines","text":"Please refer project documentation brief introduction. Please also see articles within project documentation additional information.","code":""},{"path":"https://insightsengineering.github.io/hermes/CONTRIBUTING.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Contribution Guidelines","text":"contributions covered project‚Äôs license.","code":""},{"path":"https://insightsengineering.github.io/hermes/CONTRIBUTING.html","id":"issues","dir":"","previous_headings":"","what":"Issues","title":"Contribution Guidelines","text":"use GitHub track issues, feature requests, bugs. submitting new issue, please check issue already reported. issue already exists, please upvote existing issue üëç. new feature requests, please elaborate context benefit feature users, developers, relevant personas.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/hermes/CONTRIBUTING.html","id":"github-flow","dir":"","previous_headings":"Pull requests","what":"GitHub Flow","title":"Contribution Guidelines","text":"repository uses GitHub Flow model collaboration. submit pull request: Create branch Please see branch naming convention . don‚Äôt write access repository, please fork . Make changes Make sure code passes checks imposed GitHub Actions well documented well tested unit tests sufficiently covering changes introduced Create pull request (PR) pull request description, please link relevant issue (), provide detailed description change, include assumptions. Address review comments, Post approval Merge PR write access. Otherwise, reviewer merge PR behalf. Pat back Congratulations! üéâ now official contributor project! grateful contribution.","code":""},{"path":"https://insightsengineering.github.io/hermes/CONTRIBUTING.html","id":"branch-naming-convention","dir":"","previous_headings":"Pull requests","what":"Branch naming convention","title":"Contribution Guidelines","text":"Suppose changes related current issue current project; please name branch follows: <issue_id>_<short_description>. Please use underscore (_) delimiter word separation. example, 420_fix_ui_bug suitable branch name change resolving UI-related bug reported issue number 420 current project. change affects multiple repositories, please name branches follows: <issue_id>_<issue_repo>_<short description>. example, 69_awesomeproject_fix_spelling_error reference issue 69 reported project awesomeproject aims resolve one spelling errors multiple (likely related) repositories.","code":""},{"path":"https://insightsengineering.github.io/hermes/CONTRIBUTING.html","id":"monorepo-and-stageddependencies","dir":"","previous_headings":"Pull requests","what":"monorepo and staged.dependencies","title":"Contribution Guidelines","text":"Sometimes might need change upstream dependent package(s) able submit meaningful change. using staged.dependencies functionality simulate monorepo behavior. dependency configuration already specified project‚Äôs staged_dependencies.yaml file. need name feature branches appropriately. exception branch naming convention described . Please refer staged.dependencies package documentation details.","code":""},{"path":"https://insightsengineering.github.io/hermes/CONTRIBUTING.html","id":"coding-guidelines","dir":"","previous_headings":"","what":"Coding guidelines","title":"Contribution Guidelines","text":"repository follows unified processes standards adopted maintainers ensure software development carried consistently within teams cohesively across repositories.","code":""},{"path":"https://insightsengineering.github.io/hermes/CONTRIBUTING.html","id":"style-guide","dir":"","previous_headings":"Coding guidelines","what":"Style guide","title":"Contribution Guidelines","text":"repository follows standard tidyverse style guide uses lintr lint checks. Customized lint configurations available repository‚Äôs .lintr file.","code":""},{"path":"https://insightsengineering.github.io/hermes/CONTRIBUTING.html","id":"dependency-management","dir":"","previous_headings":"Coding guidelines","what":"Dependency management","title":"Contribution Guidelines","text":"Lightweight right weight. repository follows tinyverse recommedations limiting dependencies minimum.","code":""},{"path":"https://insightsengineering.github.io/hermes/CONTRIBUTING.html","id":"dependency-version-management","dir":"","previous_headings":"Coding guidelines","what":"Dependency version management","title":"Contribution Guidelines","text":"code compatible (!) historical versions given dependenct package, required specify minimal version DESCRIPTION file. particular: development version requires (imports) development version another package - required put abc (>= 1.2.3.9000).","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/hermes/CONTRIBUTING.html","id":"r--package-versions","dir":"","previous_headings":"Coding guidelines > Recommended development environment & tools","what":"R & package versions","title":"Contribution Guidelines","text":"continuously test packages newest R version along recent dependencies CRAN BioConductor. recommend working environment also set way. can find details R version packages used R CMD check GitHub Action execution log - step prints R sessionInfo(). discover bugs older R versions older set dependencies, please create relevant bug reports.","code":""},{"path":"https://insightsengineering.github.io/hermes/CONTRIBUTING.html","id":"pre-commit","dir":"","previous_headings":"Coding guidelines > Recommended development environment & tools","what":"pre-commit","title":"Contribution Guidelines","text":"highly recommend use pre-commit tool combined R hooks pre-commit execute checks committing pushing changes. Pre-commit hooks already available repository‚Äôs .pre-commit-config.yaml file.","code":""},{"path":"https://insightsengineering.github.io/hermes/CONTRIBUTING.html","id":"recognition-model","dir":"","previous_headings":"","what":"Recognition model","title":"Contribution Guidelines","text":"mentioned previously, contributions deeply valued appreciated. contribution data available part repository insights, recognize significant contribution hence add contributor package authors list, following rules enforced: Minimum 5% lines code authored* (determined git blame query) top 5 contributors terms number commits lines added lines removed* *Excluding auto-generated code, including limited roxygen comments renv.lock files. package maintainer also reserves right adjust criteria recognize contributions.","code":""},{"path":"https://insightsengineering.github.io/hermes/CONTRIBUTING.html","id":"questions","dir":"","previous_headings":"","what":"Questions","title":"Contribution Guidelines","text":"questions regarding contribution guidelines, please contact package/repository maintainer.","code":""},{"path":"https://insightsengineering.github.io/hermes/articles/hermes.html","id":"acknowledgments","dir":"Articles","previous_headings":"","what":"Acknowledgments","title":"Introduction to `hermes`","text":"hermes successor Roche internal rnaseqTools R package, therefore many code ideas borrowed . Therefore like thank rnaseqTools authors work. particular, like acknowledge Chendi Liao Joe Paulson guidance explanations development hermes. also discussed class design Valerie Obenchain, discussed RNAseq data standards Armen Karapetyan. borrowed ideas Roche internal biokitr R package discussed maintainer Daniel Marbach. Finally, hermes originated part NEST project. grateful entire team‚Äôs support. Thanks lot everyone involved!","code":""},{"path":"https://insightsengineering.github.io/hermes/articles/hermes.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Introduction to `hermes`","text":"First let‚Äôs see can install hermes package.","code":""},{"path":"https://insightsengineering.github.io/hermes/articles/hermes.html","id":"bioconductor","dir":"Articles","previous_headings":"Installation","what":"BioConductor","title":"Introduction to `hermes`","text":"development version (3.15) BioConductor, can install current package version :","code":"if (!require(\"BiocManager\")) {   install.packages(\"BiocManager\") } BiocManager::install(\"hermes\")"},{"path":"https://insightsengineering.github.io/hermes/articles/hermes.html","id":"github","dir":"Articles","previous_headings":"Installation","what":"GitHub","title":"Introduction to `hermes`","text":"can install unstable development version GitHub :","code":"if (!require(\"devtools\")) {   install.packages(\"devtools\") } devtools::install_github(\"insightsengineering/hermes\")"},{"path":"https://insightsengineering.github.io/hermes/articles/hermes.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Introduction to `hermes`","text":"hermes R package provides classes, methods functions import, quality-check, filter, normalize, analyze RNAseq counts data. core functionality built BioConductor ecosystem, especially SummarizedExperiment. vignette read new users package. vignette going learn : Import RNAseq count data hermes ready format. Annotate gene information automatically central database (e.g.¬†BioMart). Add quality control (QC) flags genes samples. Filter data set. Normalize counts. Quickly produce descriptive plots. Perform principal components analysis. Produce templated QC report. Perform differential expression analysis. packages used vignette : datasets used vignette :","code":"library(hermes) library(SummarizedExperiment) ?expression_set ?summarized_experiment"},{"path":"https://insightsengineering.github.io/hermes/articles/hermes.html","id":"importing-data","dir":"Articles","previous_headings":"","what":"Importing Data","title":"Introduction to `hermes`","text":"data hermes needs imported HermesData RangedHermesData format.","code":""},{"path":"https://insightsengineering.github.io/hermes/articles/hermes.html","id":"importing-a-summarizedexperiment","dir":"Articles","previous_headings":"Importing Data","what":"Importing a SummarizedExperiment","title":"Introduction to `hermes`","text":"simplest way import data SummarizedExperiment (SE) object. HermesData object just special SE, additional requirements slots. nutshell, object needs counts assay, certain gene sample variables, unique row column names. row names, .e.¬†gene names, must start common prefix GeneID ENSG enable easy annotations. See ?HermesData detailed requirements. SE follows minimum conventions, can just call HermesData constructor : HermesData object. Note case deprecated names used rowData colData variables, therefore appear ‚Äúadditional‚Äù gene sample information. However can still call default constructor new names filled missing values, e.g.: want map old column names new column names avoid duplication new missing value columns, can using rename() method. example : example can now see annotations successfully carried information since mapped old annotations new required names : bit details can also call summary() object. , let‚Äôs use already prepared HermesData object. Likewise, receive error ‚Äú‚Äòcounts‚Äô assay found‚Äù, can use rename() function change name assay SummarizedExperiment object counts. example, following object type SummarizedExperiment assay name count, produce assay name error: use following code convert assay name counts, making able convert HermesData object:","code":"object <- HermesData(summarized_experiment) object #> class: HermesData #> assays(1): counts #> genes(5085): GeneID:11185 GeneID:10677 ... GeneID:9087 GeneID:9426 #> additional gene information(12): HGNC HGNCGeneName ... chromosome_name #>   LowExpressionFlag #> samples(20): 06520011B0023R 06520067C0018R ... 06520015C0016R #>   06520019C0023R #> additional sample information(74): Filename SampleID ... LowDepthFlag #>   TechnicalFailureFlag head(annotation(object)) #> DataFrame with 6 rows and 4 columns #>                     symbol      desc chromosome      size #>                  <logical> <logical>  <logical> <logical> #> GeneID:11185            NA        NA         NA        NA #> GeneID:10677            NA        NA         NA        NA #> GeneID:101928428        NA        NA         NA        NA #> GeneID:100422835        NA        NA         NA        NA #> GeneID:102466731        NA        NA         NA        NA #> GeneID:64881            NA        NA         NA        NA object <- summarized_experiment %>%   rename(     row_data = c(       symbol = \"HGNC\",       desc = \"HGNCGeneName\",       chromosome = \"Chromosome\",       size = \"WidthBP\",       low_expression_flag = \"LowExpressionFlag\"     ),     col_data = c(       low_depth_flag = \"LowDepthFlag\",       technical_failure_flag = \"TechnicalFailureFlag\"     )   ) %>%   HermesData() head(annotation(object)) #> DataFrame with 6 rows and 4 columns #>                        symbol                   desc  chromosome      size #>                   <character>            <character> <character> <integer> #> GeneID:11185             INMT indolethylamine N-me..           7      5468 #> GeneID:10677             AVIL               advillin          12     18694 #> GeneID:101928428 LOC101928428 RNA-binding protein ..  GL000220.1       138 #> GeneID:100422835      MIR3183          microRNA 3183          17        84 #> GeneID:102466731     MIR6769A         microRNA 6769a          16        73 #> GeneID:64881           PCDH20       protocadherin 20          13      5838 summary(object) #> HermesData object with 20 samples of 5085 genes. #> - Library sizes across samples: mean 5476759, median 5365970, range 4632496 to 7262374 #> - Included assays (1): counts #> - Additional gene information (7): GeneID StartBP ... SYMBOL #>   chromosome_name #> - Additional sample information (73): Filename SampleID ... STDSSDY #>   technical_failure_flag #> - Low expression genes (3021): GeneID:10677 GeneID:101928428 ... #>   GeneID:9084 GeneID:9426 #> - Samples with too low depth or technical failures (20): NA NA ... NA #>   NA object <- hermes_data object_exp <- summarized_experiment %>%   rename(assays = c(count = \"counts\")) object_exp <- rename(object_exp,   assays = c(counts = \"count\") ) object_exp <- HermesData(object_exp)"},{"path":"https://insightsengineering.github.io/hermes/articles/hermes.html","id":"importing-an-expressionset","dir":"Articles","previous_headings":"Importing Data","what":"Importing an ExpressionSet","title":"Introduction to `hermes`","text":"start ExpressionSet, can first convert RangedSummarizedExperiment import RangedHermesData:","code":"se <- makeSummarizedExperimentFromExpressionSet(expression_set) object2 <- HermesData(se) object2 #> class: RangedHermesData #> assays(1): counts #> genes(5085): GeneID:11185 GeneID:10677 ... GeneID:9087 GeneID:9426 #> additional gene information(12): HGNC HGNCGeneName ... chromosome_name #>   LowExpressionFlag #> samples(20): 06520011B0023R 06520067C0018R ... 06520015C0016R #>   06520019C0023R #> additional sample information(74): Filename SampleID ... LowDepthFlag #>   TechnicalFailureFlag"},{"path":"https://insightsengineering.github.io/hermes/articles/hermes.html","id":"importing-a-matrix","dir":"Articles","previous_headings":"Importing Data","what":"Importing a Matrix","title":"Introduction to `hermes`","text":"general can also import matrix counts. just pass required gene sample information data frames constructor. Note can easily access counts assay (matrix) final object counts():","code":"counts_matrix <- assay(hermes_data) object3 <- HermesDataFromMatrix(   counts = counts_matrix,   rowData = rowData(hermes_data),   colData = colData(hermes_data) ) object3 #> class: HermesData #> assays(1): counts #> genes(5085): GeneID:11185 GeneID:10677 ... GeneID:9087 GeneID:9426 #> additional gene information(3): GeneID SYMBOL chromosome_name #> samples(20): 06520011B0023R 06520067C0018R ... 06520015C0016R #>   06520019C0023R #> additional sample information(72): Filename SampleID ... TTYPE STDSSDY identical(object, object3) #> [1] TRUE cnts <- counts(object) cnts[1:3, 1:3] #>                  06520011B0023R 06520067C0018R 06520063C0043R #> GeneID:11185                  3             66             35 #> GeneID:10677               1668            236             95 #> GeneID:101928428              0              0              0"},{"path":"https://insightsengineering.github.io/hermes/articles/hermes.html","id":"annotations","dir":"Articles","previous_headings":"","what":"Annotations","title":"Introduction to `hermes`","text":"hermes provides modular approach querying gene annotations, order allow future extensions downstream packages.","code":""},{"path":"https://insightsengineering.github.io/hermes/articles/hermes.html","id":"connection-to-database","dir":"Articles","previous_headings":"Annotations","what":"Connection to Database","title":"Introduction to `hermes`","text":"first step connect database. hermes option currently databases utilize BioMart software suite. However due generic function design, simple extend hermes data base connections. order save time vignette build, zoom subset original object containing first 10 genes. corresponding function takes common gene ID prefix argument determine format gene IDs filter variable use query later . using prefix() method access prefix saved HermesData object.","code":"small_object <- object[1:10, ] httr::set_config(httr::config(ssl_verifypeer = 0L)) connection <- connect_biomart(prefix(small_object))"},{"path":"https://insightsengineering.github.io/hermes/articles/hermes.html","id":"querying-and-saving-annotations","dir":"Articles","previous_headings":"Annotations","what":"Querying and Saving Annotations","title":"Introduction to `hermes`","text":"second step query gene annotations save object. using genes() method access gene IDs (row names) HermesData object. Note genes might found data base corresponding rows NA annotations.","code":"annotation(small_object) <- query(genes(small_object), connection)"},{"path":"https://insightsengineering.github.io/hermes/articles/hermes.html","id":"quality-control-flags","dir":"Articles","previous_headings":"","what":"Quality Control Flags","title":"Introduction to `hermes`","text":"hermes provides automatic gene sample flagging, well manual sample flagging functionality.","code":""},{"path":"https://insightsengineering.github.io/hermes/articles/hermes.html","id":"automatic-gene-and-sample-flagging","dir":"Articles","previous_headings":"Quality Control Flags","what":"Automatic Gene and Sample Flagging","title":"Introduction to `hermes`","text":"genes, counted many samples don‚Äôt pass minimum expression CPM (counts per million reads mapped) threshold. many, gene flagged ‚Äúlow expression‚Äù gene. samples, two flags provided. ‚Äútechnical failure‚Äù flag based average Pearson correlation samples. ‚Äúlow depth‚Äù flag based library size, .e.¬†total sum counts sample across genes. Thresholds flags can initialized control_quality(), flags added add_quality_flags().","code":"my_controls <- control_quality(min_cpm = 10, min_cpm_prop = 0.4, min_corr = 0.4, min_depth = 1e4) #> Loading required namespace: testthat object_flagged <- add_quality_flags(object, control = my_controls)"},{"path":"https://insightsengineering.github.io/hermes/articles/hermes.html","id":"manual-sample-flagging","dir":"Articles","previous_headings":"Quality Control Flags","what":"Manual Sample Flagging","title":"Introduction to `hermes`","text":"Sometimes necessary manually flag certain samples technical failures, e.g.¬†looking one analyses discussed . possible, .","code":"object_flagged <- set_tech_failure(object_flagged, sample_ids = \"06520011B0023R\")"},{"path":"https://insightsengineering.github.io/hermes/articles/hermes.html","id":"accessing-flags","dir":"Articles","previous_headings":"Quality Control Flags","what":"Accessing Flags","title":"Introduction to `hermes`","text":"flags access functions.","code":"head(get_tech_failure(object_flagged)) #> 06520011B0023R 06520067C0018R 06520063C0043R 06520105C0017R 06520092C0017R  #>           TRUE          FALSE          FALSE          FALSE          FALSE  #> 06520103C0017R  #>          FALSE head(get_low_depth(object_flagged)) #> 06520011B0023R 06520067C0018R 06520063C0043R 06520105C0017R 06520092C0017R  #>          FALSE          FALSE          FALSE          FALSE          FALSE  #> 06520103C0017R  #>          FALSE head(get_low_expression(object_flagged)) #>     GeneID:11185     GeneID:10677 GeneID:101928428 GeneID:100422835  #>             TRUE            FALSE             TRUE             TRUE  #> GeneID:102466731     GeneID:64881  #>             TRUE             TRUE"},{"path":"https://insightsengineering.github.io/hermes/articles/hermes.html","id":"filtering-data","dir":"Articles","previous_headings":"","what":"Filtering Data","title":"Introduction to `hermes`","text":"can either filter based default QC flags, based custom variables gene sample information.","code":""},{"path":"https://insightsengineering.github.io/hermes/articles/hermes.html","id":"based-on-default-qc-flags","dir":"Articles","previous_headings":"Filtering Data","what":"Based on Default QC Flags","title":"Introduction to `hermes`","text":"simple filter() function. also possible selectively filter genes samples using argument.","code":"object_flagged_filtered <- filter(object_flagged) object_flagged_genes_filtered <- filter(object_flagged, what = \"genes\")"},{"path":"https://insightsengineering.github.io/hermes/articles/hermes.html","id":"based-on-custom-variables","dir":"Articles","previous_headings":"Filtering Data","what":"Based on Custom Variables","title":"Introduction to `hermes`","text":"can done subset() function. Genes can filtered subset argument via expressions using gene information variables, samples can filtered select argument using sample information variables. order see ones available can queries first.","code":"names(rowData(object_flagged)) #> [1] \"symbol\"              \"desc\"                \"GeneID\"              #> [4] \"chromosome\"          \"size\"                \"SYMBOL\"              #> [7] \"chromosome_name\"     \"low_expression_flag\" names(colData(object_flagged)) #>  [1] \"Filename\"          \"Samplelow_depth_flag\"    \"tech_failure_flag\" head(rowData(object_flagged)$chromosome) #> [1] \"7\"          \"12\"         \"GL000220.1\" \"17\"         \"16\"         #> [6] \"13\" head(object_flagged$ARMCD) #> [1] \"COH1\"  \"COH1\"  \"COH8\"  \"COH12\" \"COH9O\" \"COH9E\" object_flagged_subsetted <- subset(   object_flagged,   subset = chromosome == \"5\",   select = ARMCD == \"COH1\" )"},{"path":"https://insightsengineering.github.io/hermes/articles/hermes.html","id":"normalizing-counts","dir":"Articles","previous_headings":"","what":"Normalizing Counts","title":"Introduction to `hermes`","text":"Normalizing counts within samples (CPM), genes (RPKM) across (TPM) can achieved normalize() function. normalize() function can also transform counts variance stabilizing transformation (vst) regularized log transformation (rlog) proposed DESeq2 package. corresponding assays saved object can accessed assay(). used control settings can accessed afterwards metadata object: Note also filtering settings saved . custom normalization options, use control_normalize(). example, use log scale original scale counts:","code":"object_normalized <- normalize(object_flagged_filtered) #> -- note: fitType='parametric', but the dispersion trend was not well captured by the #>    function: y = a/x + b, and a local regression fit was automatically substituted. #>    specify fitType='local' or 'mean' to avoid this message next time. object_rlog_normalized <- normalize(object_flagged_filtered, \"rlog\") #> -- note: fitType='parametric', but the dispersion trend was not well captured by the #>    function: y = a/x + b, and a local regression fit was automatically substituted. #>    specify fitType='local' or 'mean' to avoid this message next time. assay(object_normalized, \"tpm\")[1:3, 1:3] #>               06520067C0018R 06520063C0043R 06520105C0017R #> GeneID:10677        4.096418       3.323016       7.714990 #> GeneID:286205       2.985506       3.182624       3.769962 #> GeneID:8365        11.711741      12.421108      12.466491 assay(object_rlog_normalized, \"rlog\")[1:3, 1:3] #>               06520067C0018R 06520063C0043R 06520105C0017R #> GeneID:10677        8.101651       7.153488      10.281393 #> GeneID:286205      10.101287       9.859074      10.104426 #> GeneID:8365        10.023097      10.163191       9.935722 metadata(object_normalized) #> $control_quality_flags #> $control_quality_flags$min_cpm #> [1] 10 #>  #> $control_quality_flags$min_cpm_prop #> [1] 0.4 #>  #> $control_quality_flags$min_corr #> [1] 0.4 #>  #> $control_quality_flags$min_depth #> [1] 10000 #>  #>  #> $control_normalize #> $control_normalize$log #> [1] TRUE #>  #> $control_normalize$lib_sizes #> NULL #>  #> $control_normalize$prior_count #> [1] 1 #>  #> $control_normalize$fit_type #> [1] \"parametric\" object_normalized_original <- normalize(   object_flagged_filtered,   control = control_normalize(log = FALSE) ) #> -- note: fitType='parametric', but the dispersion trend was not well captured by the #>    function: y = a/x + b, and a local regression fit was automatically substituted. #>    specify fitType='local' or 'mean' to avoid this message next time. assay(object_normalized_original, \"tpm\")[1:3, 1:3] #>               06520067C0018R 06520063C0043R 06520105C0017R #> GeneID:10677       16.105854       9.007544       209.1084 #> GeneID:286205       6.920033       8.079569        12.6418 #> GeneID:8365      3353.172671    5483.360511      5658.6256"},{"path":[]},{"path":"https://insightsengineering.github.io/hermes/articles/hermes.html","id":"simple-plots","dir":"Articles","previous_headings":"Descriptive Plots","what":"Simple Plots","title":"Introduction to `hermes`","text":"series simple descriptive plots can obtained just calling autoplot() object.  Note individual plots can produced series draw_*() functions, see ?plot_all detailed list. , can customized . example, can change number color bins library size histogram:","code":"autoplot(object) draw_libsize_hist(object, bins = 10L, fill = \"blue\")"},{"path":"https://insightsengineering.github.io/hermes/articles/hermes.html","id":"top-genes","dir":"Articles","previous_headings":"Descriptive Plots","what":"Top Genes","title":"Introduction to `hermes`","text":"Top genes can calculated visualized barplot.  passing another summary function, also variability can ranked example.","code":"most_expr_genes <- top_genes(object_normalized, assay_name = \"tpm\") autoplot(most_expr_genes) most_var_genes <- top_genes(object_normalized, summary_fun = rowSds) autoplot(most_var_genes)"},{"path":"https://insightsengineering.github.io/hermes/articles/hermes.html","id":"heatmap-of-genes-among-samples","dir":"Articles","previous_headings":"Descriptive Plots","what":"Heatmap of Genes among Samples","title":"Introduction to `hermes`","text":"Relative expression genes can displayed using heatmap  heatmap can grouped labels HermesData object, \"COUNTRY\" \"AGEGRP\".","code":"draw_heatmap(object[1:20], assay_name = \"counts\") draw_heatmap(object[1:20], assay_name = \"counts\", col_data_annotation = \"COUNTRY\")"},{"path":"https://insightsengineering.github.io/hermes/articles/hermes.html","id":"correlation-between-samples","dir":"Articles","previous_headings":"Descriptive Plots","what":"Correlation between Samples","title":"Introduction to `hermes`","text":"sample correlation matrix samples can obtained correlate() function. can visualized heatmap using autoplot() . See ?calc_cor detailed options.","code":"cor_mat <- correlate(object) autoplot(cor_mat)"},{"path":"https://insightsengineering.github.io/hermes/articles/hermes.html","id":"principal-components","dir":"Articles","previous_headings":"","what":"Principal Components","title":"Introduction to `hermes`","text":"Let‚Äôs see can perform Principal Components Analysis (PCA).","code":""},{"path":"https://insightsengineering.github.io/hermes/articles/hermes.html","id":"pca-of-samples","dir":"Articles","previous_headings":"Principal Components","what":"PCA of Samples","title":"Introduction to `hermes`","text":"PCA can performed calc_pca(). result can summarized plotted.  Note various options available plot, example can look different principal components, color samples sample variables. See ?ggfortify::autoplot.prcomp details.","code":"pca_res <- calc_pca(object_normalized, assay_name = \"tpm\") summary(pca_res)$importance #>                             PC1      PC2      PC3      PC4      PC5      PC6 #> Standard deviation     22.08095 17.34762 15.19930 12.80689 11.76153 10.48121 #> Proportion of Variance  0.24066  0.14854  0.11403  0.08096  0.06828  0.05422 #> Cumulative Proportion   0.24066  0.38919  0.50322  0.58418  0.65246  0.70668 #>                             PC7      PC8      PC9     PC10     PC11     PC12 #> Standard deviation     9.812505 8.950926 8.530826 8.196006 7.905973 7.216002 #> Proportion of Variance 0.047520 0.039550 0.035920 0.033160 0.030850 0.025700 #> Cumulative Proportion  0.754200 0.793750 0.829670 0.862830 0.893680 0.919380 #>                           PC13     PC14     PC15     PC16     PC17              #> Standard deviation     6.92755 6.532485 5.501383 5.151959 3.983283 2.272579e-14 #> Proportion of Variance 0.02369 0.021060 0.014940 0.013100 0.007830 0.000000e+00 #> Cumulative Proportion  0.94307 0.964130 0.979070 0.992170 1.000000 1.000000e+00 autoplot(pca_res) autoplot(   pca_res,   x = 2, y = 3,   data = as.data.frame(colData(object_normalized)), colour = \"SEX\" )"},{"path":"https://insightsengineering.github.io/hermes/articles/hermes.html","id":"correlation-with-sample-variables","dir":"Articles","previous_headings":"Principal Components","what":"Correlation with Sample Variables","title":"Introduction to `hermes`","text":"Subsequently easy correlate obtained principal components sample variables. obtain matrix R-squared (R2) values combinations, can visualized heatmap. See ?pca_cor_samplevar details.","code":"pca_cor <- correlate(pca_res, object_normalized) autoplot(pca_cor)"},{"path":"https://insightsengineering.github.io/hermes/articles/hermes.html","id":"qc-report-template","dir":"Articles","previous_headings":"","what":"QC Report Template","title":"Introduction to `hermes`","text":"order quickly obtain quality control report new RNAseq data set, can proceed follows. Save input SummarizedExperiment using R‚Äôs save() function binary data file (e.g.¬†ending .rda suffix). Load hermes package RStudio click : File > New File > R Markdown > Template select QC report template hermes. Fill parameters yaml header, including required file paths input file , resulting HermesData object saved. Knit document. report contains mentioned descriptive plots PCA analyses can useful starting point analysis.","code":""},{"path":"https://insightsengineering.github.io/hermes/articles/hermes.html","id":"differential-expression","dir":"Articles","previous_headings":"","what":"Differential Expression","title":"Introduction to `hermes`","text":"addition QC analyses, simple differential expression analysis supported hermes. addition filtered object (normalization counts required) variable name factor contrast samples needs provided diff_expression(). Note use utility function df_cols_to_factor() converts default character logical variables factor variables. one possible way ensure utilized group variable factor. Afterwards standard volcano plot can produced.","code":"colData(object) <- df_cols_to_factor(colData(object)) diff_res <- diff_expression(object, group = \"SEX\", method = \"voom\") head(diff_res) #>                  log2_fc      stat        p_val adj_p_val #> GeneID:8000   -2.3200712 -4.239244 0.0004209192 0.9118348 #> GeneID:51227  -1.0467295 -4.032550 0.0006788432 0.9118348 #> GeneID:344558  1.6896266  3.824046 0.0010993677 0.9118348 #> GeneID:51575  -0.7760844 -3.746293 0.0013155805 0.9118348 #> GeneID:151242 -3.4358998 -3.570103 0.0019741997 0.9118348 #> GeneID:8904   -0.6100354 -3.542864 0.0021017199 0.9118348 autoplot(diff_res, log2_fc_thresh = 8)"},{"path":"https://insightsengineering.github.io/hermes/articles/hermes.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Introduction to `hermes`","text":"hermes R package provides classes, methods functions import, quality-check, filter, normalize analyze RNAseq counts data. particular, robust object-oriented framework allows easy extensions future address user feature requests. feedback welcome - thank much advance thoughts hermes!","code":""},{"path":"https://insightsengineering.github.io/hermes/articles/hermes.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"Introduction to `hermes`","text":"output sessionInfo() system document compiled running pandoc 3.1.1:","code":"#> R version 4.3.2 (2023-10-31) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 22.04.3 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    #>  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        #>  #> time zone: Etc/UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] hermes_1.7.1                SummarizedExperiment_1.32.0 #>  [3] Biobase_2.62.0              GenomicRanges_1.54.1        #>  [5] GenomeInfoDb_1.38.5         IRanges_2.36.0              #>  [7] S4Vectors_0.40.2            BiocGenerics_0.48.1         #>  [9] MatrixGenerics_1.14.0       matrixStats_1.2.0           #> [11] ggfortify_0.4.16            ggplot2_3.4.4               #> [13] BiocStyle_2.30.0            #>  #> loaded via a namespace (and not attached): #>   [1] Rdpack_2.6                  DBI_1.2.1                   #>   [3] bitops_1.0-7                gridExtra_2.3               #>   [5] testthat_3.2.1              biomaRt_2.58.0              #>   [7] rlang_1.1.3                 magrittr_2.0.3              #>   [9] clue_0.3-65                 GetoptLong_1.0.5            #>  [11] compiler_4.3.2              RSQLite_2.3.5               #>  [13] png_0.1-8                   systemfonts_1.0.5           #>  [15] vctrs_0.6.5                 stringr_1.5.1               #>  [17] pkgconfig_2.0.3             shape_1.4.6                 #>  [19] crayon_1.5.2                fastmap_1.1.1               #>  [21] magick_2.8.2                dbplyr_2.4.0                #>  [23] backports_1.4.1             XVector_0.42.0              #>  [25] labeling_0.4.3              utf8_1.2.4                  #>  [27] rmarkdown_2.25              ragg_1.2.7                  #>  [29] purrr_1.0.2                 bit_4.0.5                   #>  [31] xfun_0.41                   MultiAssayExperiment_1.28.0 #>  [33] zlibbioc_1.48.0             cachem_1.0.8                #>  [35] jsonlite_1.8.8              progress_1.2.3              #>  [37] EnvStats_2.8.1              blob_1.2.4                  #>  [39] highr_0.10                  DelayedArray_0.28.0         #>  [41] BiocParallel_1.36.0         prettyunits_1.2.0           #>  [43] parallel_4.3.2              cluster_2.1.6               #>  [45] R6_2.5.1                    bslib_0.6.1                 #>  [47] stringi_1.8.3               RColorBrewer_1.1-3          #>  [49] limma_3.58.1                brio_1.1.4                  #>  [51] jquerylib_0.1.4             Rcpp_1.0.12                 #>  [53] bookdown_0.37               assertthat_0.2.1            #>  [55] iterators_1.0.14            knitr_1.45                  #>  [57] Matrix_1.6-5                tidyselect_1.2.0            #>  [59] abind_1.4-5                 yaml_2.3.8                  #>  [61] doParallel_1.0.17           codetools_0.2-19            #>  [63] curl_5.2.0                  lattice_0.22-5              #>  [65] tibble_3.2.1                KEGGREST_1.42.0             #>  [67] withr_3.0.0                 evaluate_0.23               #>  [69] desc_1.4.3                  BiocFileCache_2.10.1        #>  [71] xml2_1.3.6                  Biostrings_2.70.1           #>  [73] circlize_0.4.15             filelock_1.0.3              #>  [75] pillar_1.9.0                BiocManager_1.30.22         #>  [77] checkmate_2.3.1             foreach_1.5.2               #>  [79] generics_0.1.3              RCurl_1.98-1.14             #>  [81] hms_1.1.3                   munsell_0.5.0               #>  [83] scales_1.3.0                glue_1.7.0                  #>  [85] tools_4.3.2                 locfit_1.5-9.8              #>  [87] forcats_1.0.0               fs_1.6.3                    #>  [89] XML_3.99-0.16.1             grid_4.3.2                  #>  [91] tidyr_1.3.1                 rbibutils_2.2.16            #>  [93] edgeR_4.0.12                AnnotationDbi_1.64.1        #>  [95] colorspace_2.1-0            GenomeInfoDbData_1.2.11     #>  [97] cli_3.6.2                   rappdirs_0.3.3              #>  [99] textshaping_0.3.7           fansi_1.0.6                 #> [101] S4Arrays_1.2.0              ComplexHeatmap_2.18.0       #> [103] dplyr_1.1.4                 gtable_0.3.4                #> [105] DESeq2_1.42.0               sass_0.4.8                  #> [107] digest_0.6.34               SparseArray_1.2.3           #> [109] ggrepel_0.9.5               farver_2.1.1                #> [111] rjson_0.2.21                memoise_2.0.1               #> [113] htmltools_0.5.7             pkgdown_2.0.7               #> [115] lifecycle_1.0.4             httr_1.4.7                  #> [117] statmod_1.5.0               GlobalOptions_0.1.2         #> [119] bit64_4.0.5"},{"path":"https://insightsengineering.github.io/hermes/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Daniel Saban√©s Bov√©. Author, maintainer. Namrata Bhatia. Author. Stefanie Bienert. Author. Benoit Falquet. Author. Haocheng Li. Author. Jeff Luong. Author. Lyndsee Midori Zhang. Author. Alex Richardson. Author. Simona Rossomanno. Author. Tim Treis. Author. Mark Yan. Author. Naomi Chang. Author. Chendi Liao. Author. Carolyn Zhang. Author. Joseph N. Paulson. Author. F. Hoffmann-La Roche AG. Copyright holder, funder.","code":""},{"path":"https://insightsengineering.github.io/hermes/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Saban√©s Bov√© D, Bhatia N, Bienert S, Falquet B, Li H, Luong J, Midori Zhang L, Richardson , Rossomanno S, Treis T, Yan M, Chang N, Liao C, Carolyn Zhang, Paulson J (2024). hermes: Preprocessing, analyzing, reporting RNA-seq data. R package version 1.7.1, https://insightsengineering.github.io/hermes/.","code":"@Manual{,   title = {hermes: Preprocessing, analyzing, and reporting of RNA-seq data},   author = {Daniel {Saban√©s Bov√©} and Namrata Bhatia and Stefanie Bienert and Benoit Falquet and Haocheng Li and Jeff Luong and Lyndsee {Midori Zhang} and Alex Richardson and Simona Rossomanno and Tim Treis and Mark Yan and Naomi Chang and Chendi Liao and {Carolyn Zhang} and Joseph N. Paulson},   year = {2024},   note = {R package version 1.7.1},   url = {https://insightsengineering.github.io/hermes/}, }"},{"path":[]},{"path":"https://insightsengineering.github.io/hermes/index.html","id":"bioconductor","dir":"","previous_headings":"Installation","what":"BioConductor","title":"Preprocessing, analyzing, and reporting of RNA-seq data","text":"can install current release BioConductor :","code":"if (!require(\"BiocManager\")) {   install.packages(\"BiocManager\") } BiocManager::install(\"hermes\")"},{"path":"https://insightsengineering.github.io/hermes/index.html","id":"github","dir":"","previous_headings":"Installation","what":"GitHub","title":"Preprocessing, analyzing, and reporting of RNA-seq data","text":"can install development version GitHub :","code":"if (!require(\"devtools\")) {   install.packages(\"devtools\") } devtools::install_github(\"insightsengineering/hermes\")"},{"path":"https://insightsengineering.github.io/hermes/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting Started","title":"Preprocessing, analyzing, and reporting of RNA-seq data","text":"can get started reading introduction vignette:","code":"library(hermes) vignette(\"introduction\", package = \"hermes\")"},{"path":"https://insightsengineering.github.io/hermes/pull_request_template.html","id":null,"dir":"","previous_headings":"","what":"Pull Request","title":"Pull Request","text":"Fixes #nnn","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/GeneSpec.html","id":null,"dir":"Reference","previous_headings":"","what":"R6 Class Representing a Gene (Signature) Specification ‚Äî GeneSpec","title":"R6 Class Representing a Gene (Signature) Specification ‚Äî GeneSpec","text":"GeneSpec consists gene IDs (possibly named labels), summary function name summary function.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/hermes/reference/GeneSpec.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"R6 Class Representing a Gene (Signature) Specification ‚Äî GeneSpec","text":"GeneSpec$new() GeneSpec$get_genes() GeneSpec$get_gene_labels() GeneSpec$returns_vector() GeneSpec$get_label() GeneSpec$extract() GeneSpec$extract_data_frame() GeneSpec$clone()","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/GeneSpec.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"R6 Class Representing a Gene (Signature) Specification ‚Äî GeneSpec","text":"Creates new GeneSpec object.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/GeneSpec.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a Gene (Signature) Specification ‚Äî GeneSpec","text":"","code":"GeneSpec$new(genes = NULL, fun = NULL, fun_name = deparse(substitute(fun)))"},{"path":"https://insightsengineering.github.io/hermes/reference/GeneSpec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class Representing a Gene (Signature) Specification ‚Äî GeneSpec","text":"genes (named character NULL) gene IDs, names used labels available. fun (function NULL) summary function. NULL used multiple genes summarized returned matrix extract method. fun_name (string) name summary function.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/GeneSpec.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class Representing a Gene (Signature) Specification ‚Äî GeneSpec","text":"new GeneSpec object.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/GeneSpec.html","id":"method-get-genes-","dir":"Reference","previous_headings":"","what":"Method get_genes()","title":"R6 Class Representing a Gene (Signature) Specification ‚Äî GeneSpec","text":"Returns genes.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/GeneSpec.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a Gene (Signature) Specification ‚Äî GeneSpec","text":"","code":"GeneSpec$get_genes()"},{"path":"https://insightsengineering.github.io/hermes/reference/GeneSpec.html","id":"method-get-gene-labels-","dir":"Reference","previous_headings":"","what":"Method get_gene_labels()","title":"R6 Class Representing a Gene (Signature) Specification ‚Äî GeneSpec","text":"Returns gene labels (substituted gene IDs available).","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/GeneSpec.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a Gene (Signature) Specification ‚Äî GeneSpec","text":"","code":"GeneSpec$get_gene_labels(genes = self$get_genes())"},{"path":"https://insightsengineering.github.io/hermes/reference/GeneSpec.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class Representing a Gene (Signature) Specification ‚Äî GeneSpec","text":"genes (character) subset genes labels returned.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/GeneSpec.html","id":"method-returns-vector-","dir":"Reference","previous_headings":"","what":"Method returns_vector()","title":"R6 Class Representing a Gene (Signature) Specification ‚Äî GeneSpec","text":"Predicate whether extract returns vector .","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/GeneSpec.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a Gene (Signature) Specification ‚Äî GeneSpec","text":"","code":"GeneSpec$returns_vector()"},{"path":"https://insightsengineering.github.io/hermes/reference/GeneSpec.html","id":"method-get-label-","dir":"Reference","previous_headings":"","what":"Method get_label()","title":"R6 Class Representing a Gene (Signature) Specification ‚Äî GeneSpec","text":"Returns string can used e.g. plot labels.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/GeneSpec.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a Gene (Signature) Specification ‚Äî GeneSpec","text":"","code":"GeneSpec$get_label(genes = self$get_genes())"},{"path":"https://insightsengineering.github.io/hermes/reference/GeneSpec.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class Representing a Gene (Signature) Specification ‚Äî GeneSpec","text":"genes (character) subset genes labels returned.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/GeneSpec.html","id":"method-extract-","dir":"Reference","previous_headings":"","what":"Method extract()","title":"R6 Class Representing a Gene (Signature) Specification ‚Äî GeneSpec","text":"Extract gene values assay specified.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/GeneSpec.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a Gene (Signature) Specification ‚Äî GeneSpec","text":"","code":"GeneSpec$extract(assay)"},{"path":"https://insightsengineering.github.io/hermes/reference/GeneSpec.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class Representing a Gene (Signature) Specification ‚Äî GeneSpec","text":"assay (matrix) original matrix rownames containing specified genes.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/GeneSpec.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class Representing a Gene (Signature) Specification ‚Äî GeneSpec","text":"Either vector one value per column, matrix multiple genes rows.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/GeneSpec.html","id":"method-extract-data-frame-","dir":"Reference","previous_headings":"","what":"Method extract_data_frame()","title":"R6 Class Representing a Gene (Signature) Specification ‚Äî GeneSpec","text":"Extract gene values data.frame.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/GeneSpec.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a Gene (Signature) Specification ‚Äî GeneSpec","text":"","code":"GeneSpec$extract_data_frame(assay)"},{"path":"https://insightsengineering.github.io/hermes/reference/GeneSpec.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class Representing a Gene (Signature) Specification ‚Äî GeneSpec","text":"assay (matrix) original matrix rownames containing specified genes.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/GeneSpec.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class Representing a Gene (Signature) Specification ‚Äî GeneSpec","text":"data.frame genes columns samples rows.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/GeneSpec.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"R6 Class Representing a Gene (Signature) Specification ‚Äî GeneSpec","text":"objects class cloneable method.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/GeneSpec.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a Gene (Signature) Specification ‚Äî GeneSpec","text":"","code":"GeneSpec$clone(deep = FALSE)"},{"path":"https://insightsengineering.github.io/hermes/reference/GeneSpec.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class Representing a Gene (Signature) Specification ‚Äî GeneSpec","text":"deep Whether make deep clone.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/GeneSpec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class Representing a Gene (Signature) Specification ‚Äî GeneSpec","text":"","code":"# Minimal specification if only one gene is used. x_spec <- gene_spec(\"GeneID:1820\")  # Using multiple genes with a signature. x_spec <- gene_spec(c(\"GeneID:1820\", \"GeneID:52\"), fun = colMeans) x_spec <- gene_spec(c(\"GeneID:1820\", \"GeneID:52\"), fun = colPrinComp1) x_spec$returns_vector() #> [1] TRUE x_spec$get_genes() #> [1] \"GeneID:1820\" \"GeneID:52\"   x_spec$get_gene_labels() #> [1] \"GeneID:1820\" \"GeneID:52\"   x_spec$get_label() #> [1] \"colPrinComp1(GeneID:1820, GeneID:52)\"  # Using multiple genes with partial labels, without a signature. x_spec <- gene_spec(c(A = \"GeneID:1820\", \"GeneID:52\")) x_spec$returns_vector() #> [1] FALSE x_spec$get_gene_labels() #> [1] \"A\"         \"GeneID:52\"  # Use the gene specification to extract genes from a matrix. mat <- matrix(   data = rpois(15, 10),   nrow = 3, ncol = 5,   dimnames = list(c(\"GeneID:1820\", \"GeneID:52\", \"GeneID:523\"), NULL) ) x_spec$extract(mat) #>           [,1] [,2] [,3] [,4] [,5] #> A            5   11    7   11   11 #> GeneID:52    6   13    9   16    7  # We can also extract these as a `data.frame`. x_spec$extract_data_frame(mat) #>    A GeneID.52 #> 1  5         6 #> 2 11        13 #> 3  7         9 #> 4 11        16 #> 5 11         7"},{"path":"https://insightsengineering.github.io/hermes/reference/HermesData-class.html","id":null,"dir":"Reference","previous_headings":"","what":"HermesData and RangedHermesData ‚Äî HermesData-class","title":"HermesData and RangedHermesData ‚Äî HermesData-class","text":"HermesData class extension SummarizedExperiment::SummarizedExperiment additional validation criteria.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/HermesData-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"HermesData and RangedHermesData ‚Äî HermesData-class","text":"","code":"HermesData(object)  HermesDataFromMatrix(counts, ...)"},{"path":"https://insightsengineering.github.io/hermes/reference/HermesData-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"HermesData and RangedHermesData ‚Äî HermesData-class","text":"object (SummarizedExperiment) input create HermesData object . RangedSummarizedExperiment, result RangedHermesData. counts (matrix) counts create HermesData object . ... additional arguments, e.g. rowData, colData, etc. passed SummarizedExperiment::SummarizedExperiment() internally. Note rowRanges passed instead rowData, result RangedHermesData object.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/HermesData-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"HermesData and RangedHermesData ‚Äî HermesData-class","text":"object class AnyHermesData (HermesData RangedHermesData).","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/HermesData-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"HermesData and RangedHermesData ‚Äî HermesData-class","text":"additional criteria : first assay must counts containing non-missing, integer, non-negative values. Note rename() can used edit assay name counts needed. following columns must rowData: symbol (also often called HGNC similar, example: \"INMT\") desc (gene name, example: \"indolethylamine N-methyltransferase\") chromosome (chromosome string, example: \"7\") size (size gene base pairs, e.g 5468) low_expression_flag (can populated add_quality_flags()) following columns must colData: low_depth_flag (can populated add_quality_flags()) tech_failure_flag (can populated add_quality_flags()) object must unique row column names. row names gene names column names sample names. Analogously, RangedHermesData extension SummarizedExperiment::RangedSummarizedExperiment additional validation requirements. Methods can defined classes time AnyHermesData signature. Biobase::ExpressionSet object can imported using SummarizedExperiment::makeSummarizedExperimentFromExpressionSet() function first convert SummarizedExperiment::SummarizedExperiment object converting HermesData object.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/HermesData-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"HermesData and RangedHermesData ‚Äî HermesData-class","text":"prefix common prefix gene IDs (row names).","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/HermesData-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"HermesData and RangedHermesData ‚Äî HermesData-class","text":"Note use S4Vectors::setValidity2() define validity method, allows us turn validity checks internal functions intermediate objects may valid within scope function. can helpful convert character logical variables factors colData() (HermesData creation). provide utility function df_cols_to_factor() simplify task, leave user allow full control details.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/hermes/reference/HermesData-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"HermesData and RangedHermesData ‚Äî HermesData-class","text":"","code":"# Convert an `ExpressionSet` to a `RangedSummarizedExperiment`. ranged_summarized_experiment <- makeSummarizedExperimentFromExpressionSet(expression_set)  # Then convert to `RangedHermesData`. HermesData(ranged_summarized_experiment) #> class: RangedHermesData #> assays(1): counts #> genes(5085): GeneID:11185 GeneID:10677 ... GeneID:9087 GeneID:9426 #> additional gene information(12): HGNC HGNCGeneName ... chromosome_name #>   LowExpressionFlag #> samples(20): 06520011B0023R 06520067C0018R ... 06520015C0016R #>   06520019C0023R #> additional sample information(74): Filename SampleID ... LowDepthFlag #>   TechnicalFailureFlag  # Create objects starting from a `SummarizedExperiment`. hermes_data <- HermesData(summarized_experiment) hermes_data #> class: HermesData #> assays(1): counts #> genes(5085): GeneID:11185 GeneID:10677 ... GeneID:9087 GeneID:9426 #> additional gene information(12): HGNC HGNCGeneName ... chromosome_name #>   LowExpressionFlag #> samples(20): 06520011B0023R 06520067C0018R ... 06520015C0016R #>   06520019C0023R #> additional sample information(74): Filename SampleID ... LowDepthFlag #>   TechnicalFailureFlag  # Create objects from a matrix. Note that additional arguments are not required but possible. counts_matrix <- assay(summarized_experiment) counts_hermes_data <- HermesDataFromMatrix(counts_matrix)"},{"path":"https://insightsengineering.github.io/hermes/reference/all_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks Whether All Missing ‚Äî all_na","title":"Checks Whether All Missing ‚Äî all_na","text":"Internal function check whether whole vector NA.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/all_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks Whether All Missing ‚Äî all_na","text":"","code":"all_na(x)"},{"path":"https://insightsengineering.github.io/hermes/reference/all_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks Whether All Missing ‚Äî all_na","text":"x (vector) vector check.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/all_na.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks Whether All Missing ‚Äî all_na","text":"Corresponding flag.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/annotation.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotation Accessor and Setter ‚Äî annotation,AnyHermesData-method","title":"Annotation Accessor and Setter ‚Äî annotation,AnyHermesData-method","text":"methods access set gene annotations stored AnyHermesData object.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/annotation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotation Accessor and Setter ‚Äî annotation,AnyHermesData-method","text":"","code":"# S4 method for AnyHermesData annotation(object, ...)  .row_data_annotation_cols  # S4 method for AnyHermesData,DataFrame annotation(object) <- value"},{"path":"https://insightsengineering.github.io/hermes/reference/annotation.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Annotation Accessor and Setter ‚Äî annotation,AnyHermesData-method","text":"annotation column names available exported character vector .row_data_annotation_cols.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/annotation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotation Accessor and Setter ‚Äî annotation,AnyHermesData-method","text":"object (AnyHermesData) object access annotations . ... used. value (DataFrame) annotations replaced .","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/annotation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Annotation Accessor and Setter ‚Äî annotation,AnyHermesData-method","text":"S4Vectors::DataFrame gene annotations: symbol desc chromosome size","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/annotation.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Annotation Accessor and Setter ‚Äî annotation,AnyHermesData-method","text":"trying replace required annotations completely missing values genes, warning given corresponding gene IDs saved attribute annotation.missing.genes. Note also additional annotations beyond required ones may supplied stored.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/annotation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Annotation Accessor and Setter ‚Äî annotation,AnyHermesData-method","text":"","code":"object <- hermes_data head(annotation(object)) #> DataFrame with 6 rows and 4 columns #>                        symbol                   desc  chromosome      size #>                   <character>            <character> <character> <integer> #> GeneID:11185             INMT indolethylamine N-me..           7      5468 #> GeneID:10677             AVIL               advillin          12     18694 #> GeneID:101928428 LOC101928428 RNA-binding protein ..  GL000220.1       138 #> GeneID:100422835      MIR3183          microRNA 3183          17        84 #> GeneID:102466731     MIR6769A         microRNA 6769a          16        73 #> GeneID:64881           PCDH20       protocadherin 20          13      5838"},{"path":"https://insightsengineering.github.io/hermes/reference/assertion_arguments.html","id":null,"dir":"Reference","previous_headings":"","what":"Standard Assertion Arguments ‚Äî assertion_arguments","title":"Standard Assertion Arguments ‚Äî assertion_arguments","text":"documentation function lists conventional arguments additional checkmate assertions.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/assertion_arguments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standard Assertion Arguments ‚Äî assertion_arguments","text":"x object check. null.ok (flag) whether x may also NULL. .var.name (string) name checked object print assertions; defaults heuristic implemented checkmate::vname(). add (AssertCollection NULL) collection store assertion messages, see checkmate::AssertCollection. info (string) extra information included message testthat reporter, see testthat::expect_that(). label (string) name checked object print messages. Defaults heuristic implemented checkmate::vname().","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/assertions.html","id":null,"dir":"Reference","previous_headings":"","what":"Additional Assertions for assert_that ‚Äî assertions","title":"Additional Assertions for assert_that ‚Äî assertions","text":"provide additional assertion functions can used together assertthat::assert_that().  provide additional assertion functions can used together checkmate functions. described individual help pages linked .","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/assertions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Additional Assertions for assert_that ‚Äî assertions","text":"","code":"is_class(x, class2)  is_hermes_data(x)  is_counts_vector(x)  is_list_with(x, elements)  one_provided(one, two)  is_constant(x)"},{"path":"https://insightsengineering.github.io/hermes/reference/assertions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Additional Assertions for assert_that ‚Äî assertions","text":"x object check. class2 (character class definition) class x belong. elements (character) names elements list x. one first input. two second input.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/assertions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Additional Assertions for assert_that ‚Äî assertions","text":"Depending function prefix. assert_ functions return object invisibly successful, otherwise throw error message. check_ functions return TRUE successful, otherwise string error message. test_ functions just return TRUE FALSE.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/assertions.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Additional Assertions for assert_that ‚Äî assertions","text":"is_class(): checks class. is_hermes_data(): checks whether x AnyHermesData object. is_counts_vector(): checks vector counts (positive integers). is_list_with(): checks list containing elements. one_provided(): checks exactly one two inputs one, two NULL. is_constant(): checks whether vector x constant (supports numeric, factor, character, logical). NAs removed first.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/hermes/reference/assertions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Additional Assertions for assert_that ‚Äî assertions","text":"","code":"# Assert a general class. a <- 5 is_class(a, \"character\") #> [1] FALSE  # Assert a `AnyHermesData` object. is_hermes_data(hermes_data) #> [1] TRUE is_hermes_data(42) #> [1] FALSE  # Assert a counts vector. a <- 5L is_counts_vector(a) #> [1] TRUE  # Assert a list containing certain elements. b <- list(a = 5, b = 3) is_list_with(b, c(\"a\", \"c\")) #> [1] FALSE is_list_with(b, c(\"a\", \"b\")) #> [1] TRUE  # Assert that exactly one of two arguments is provided. a <- 10 b <- 10 one_provided(a, b) #> [1] FALSE one_provided(a, NULL) #> [1] TRUE  # Assert a constant vector. is_constant(c(1, 2)) #> [1] FALSE is_constant(c(NA, 1)) #> [1] TRUE is_constant(c(\"a\", \"a\")) #> [1] TRUE is_constant(factor(c(\"a\", \"a\"))) #> [1] TRUE"},{"path":"https://insightsengineering.github.io/hermes/reference/calc_cor.html","id":null,"dir":"Reference","previous_headings":"","what":"Correlation between Sample Counts of AnyHermesData ‚Äî correlate,AnyHermesData-method","title":"Correlation between Sample Counts of AnyHermesData ‚Äî correlate,AnyHermesData-method","text":"correlate() method can calculate correlation matrix sample vectors counts specified assay. produces HermesDataCor object, extension matrix additional quality flags slot flag_data (containing tech_failure_flag low_depth_flag columns describing original input samples). autoplot() method afterwards can produce corresponding heatmap.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/calc_cor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Correlation between Sample Counts of AnyHermesData ‚Äî correlate,AnyHermesData-method","text":"","code":"# S4 method for AnyHermesData correlate(object, assay_name = \"counts\", method = \"pearson\", ...)  # S4 method for HermesDataCor autoplot(   object,   flag_colors = c(`FALSE` = \"green\", `TRUE` = \"red\"),   cor_colors = circlize::colorRamp2(c(0, 0.5, 1), c(\"red\", \"yellow\", \"green\")),   ... )"},{"path":"https://insightsengineering.github.io/hermes/reference/calc_cor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Correlation between Sample Counts of AnyHermesData ‚Äî correlate,AnyHermesData-method","text":"object (AnyHermesData) object calculate correlation. assay_name (string) name assay use. method (string) correlation method, see stats::cor() details. ... arguments passed ComplexHeatmap::Heatmap(). flag_colors (named character) vector specifies colors TRUE FALSE flag values. cor_colors (function) color scale function correlation values heatmap, produced circlize::colorRamp2().","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/calc_cor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Correlation between Sample Counts of AnyHermesData ‚Äî correlate,AnyHermesData-method","text":"HermesDataCor object.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/calc_cor.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Correlation between Sample Counts of AnyHermesData ‚Äî correlate,AnyHermesData-method","text":"autoplot(HermesDataCor): autoplot() method uses ComplexHeatmap::Heatmap() function plot correlations samples saved HermesDataCor object.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/calc_cor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Correlation between Sample Counts of AnyHermesData ‚Äî correlate,AnyHermesData-method","text":"","code":"object <- hermes_data  # Calculate the sample correlation matrix. correlate(object) #> An object of class \"HermesDataCor\" #>                06520011B0023R 06520067C0018R 06520063C0043R 06520105C0017R #> 06520011B0023R      1.0000000      0.9609738      0.6473003      0.3904017 #> 06520067C0018R      0.9609738      1.0000000      0.6758462      0.4167789 #> 06520063C0043R      0.6473003      0.6758462      1.0000000      0.7742640 #> 06520105C0017R      0.3904017      0.4167789      0.7742640      1.0000000 #> 06520092C0017R      0.6633748      0.6604377      0.6113716      0.4520703 #> 06520103C0017R      0.9079581      0.8775734      0.5978126      0.4172803 #> 06520001B0023R      0.8818454      0.8570700      0.6658466      0.5111085 #> 06520022C0017R      0.9117386      0.9142934      0.8104461      0.6131335 #> 06520062C0017R      0.6753364      0.7157011      0.8896542      0.7652040 #> 06520046C0018R      0.3208473      0.3148823      0.4431801      0.3814626 #> 06520101B0017R      0.9314543      0.9041533      0.6417565      0.4319133 #> 06520047C0017R      0.6815391      0.6707660      0.5759576      0.4652142 #> 06520024B0014R      0.5835149      0.5819907      0.6588440      0.5231136 #> 06520080B0023R      0.5168947      0.5524994      0.8949026      0.8217901 #> 06520093C0017R      0.4138013      0.4497814      0.7953623      0.7202175 #> 06520070C0018R      0.4697837      0.5046432      0.8295754      0.8553639 #> 06520023C0018R      0.4033409      0.4404680      0.8266231      0.8575140 #> 06520099B0017R      0.4224672      0.4766716      0.7936238      0.6681055 #> 06520015C0016R      0.8093514      0.8036729      0.7640655      0.6482306 #> 06520019C0023R      0.6139914      0.6389785      0.8583166      0.8280060 #>                06520092C0017R 06520103C0017R 06520001B0023R 06520022C0017R #> 06520011B0023R      0.6633748      0.9079581      0.8818454      0.9117386 #> 06520067C0018R      0.6604377      0.8775734      0.8570700      0.9142934 #> 06520063C0043R      0.6113716      0.5978126      0.6658466      0.8104461 #> 06520105C0017R      0.4520703      0.4172803      0.5111085      0.6131335 #> 06520092C0017R      1.0000000      0.7033489      0.6871754      0.7101840 #> 06520103C0017R      0.7033489      1.0000000      0.9863276      0.9000953 #> 06520001B0023R      0.6871754      0.9863276      1.0000000      0.9227436 #> 06520022C0017R      0.7101840      0.9000953      0.9227436      1.0000000 #> 06520062C0017R      0.5895186      0.5725651      0.6362937      0.8010688 #> 06520046C0018R      0.2638231      0.1279450      0.1317451      0.3080865 #> 06520101B0017R      0.7254041      0.9743803      0.9576231      0.9137366 #> 06520047C0017R      0.5043505      0.5349226      0.5188468      0.6281087 #> 06520024B0014R      0.4709462      0.4768380      0.5041802      0.6294704 #> 06520080B0023R      0.5609389      0.4894940      0.5836644      0.7307929 #> 06520093C0017R      0.6241234      0.4080609      0.4799501      0.6398497 #> 06520070C0018R      0.5547028      0.5587841      0.6561649      0.7291685 #> 06520023C0018R      0.5100178      0.4636074      0.5662647      0.6677198 #> 06520099B0017R      0.5000248      0.3018044      0.3613744      0.5875554 #> 06520015C0016R      0.6949487      0.9262604      0.9682275      0.9302252 #> 06520019C0023R      0.6235283      0.6475062      0.7162892      0.8016153 #>                06520062C0017R 06520046C0018R 06520101B0017R 06520047C0017R #> 06520011B0023R      0.6753364      0.3208473      0.9314543      0.6815391 #> 06520067C0018R      0.7157011      0.3148823      0.9041533      0.6707660 #> 06520063C0043R      0.8896542      0.4431801      0.6417565      0.5759576 #> 06520105C0017R      0.7652040      0.3814626      0.4319133      0.4652142 #> 06520092C0017R      0.5895186      0.2638231      0.7254041      0.5043505 #> 06520103C0017R      0.5725651      0.1279450      0.9743803      0.5349226 #> 06520001B0023R      0.6362937      0.1317451      0.9576231      0.5188468 #> 06520022C0017R      0.8010688      0.3080865      0.9137366      0.6281087 #> 06520062C0017R      1.0000000      0.4747608      0.6236545      0.6631752 #> 06520046C0018R      0.4747608      1.0000000      0.2381617      0.7655772 #> 06520101B0017R      0.6236545      0.2381617      1.0000000      0.6128255 #> 06520047C0017R      0.6631752      0.7655772      0.6128255      1.0000000 #> 06520024B0014R      0.6813321      0.4423075      0.5302252      0.5880107 #> 06520080B0023R      0.8997510      0.4212484      0.5343559      0.5282159 #> 06520093C0017R      0.7530101      0.3954200      0.5019182      0.4276193 #> 06520070C0018R      0.8248334      0.3424986      0.5564180      0.4850496 #> 06520023C0018R      0.8045479      0.4105629      0.4729066      0.5008448 #> 06520099B0017R      0.7839665      0.5424584      0.4246231      0.5237444 #> 06520015C0016R      0.7306067      0.1605127      0.8992993      0.5037995 #> 06520019C0023R      0.8610609      0.4903751      0.6754787      0.6867600 #>                06520024B0014R 06520080B0023R 06520093C0017R 06520070C0018R #> 06520011B0023R      0.5835149      0.5168947      0.4138013      0.4697837 #> 06520067C0018R      0.5819907      0.5524994      0.4497814      0.5046432 #> 06520063C0043R      0.6588440      0.8949026      0.7953623      0.8295754 #> 06520105C0017R      0.5231136      0.8217901      0.7202175      0.8553639 #> 06520092C0017R      0.4709462      0.5609389      0.6241234      0.5547028 #> 06520103C0017R      0.4768380      0.4894940      0.4080609      0.5587841 #> 06520001B0023R      0.5041802      0.5836644      0.4799501      0.6561649 #> 06520022C0017R      0.6294704      0.7307929      0.6398497      0.7291685 #> 06520062C0017R      0.6813321      0.8997510      0.7530101      0.8248334 #> 06520046C0018R      0.4423075      0.4212484      0.3954200      0.3424986 #> 06520101B0017R      0.5302252      0.5343559      0.5019182      0.5564180 #> 06520047C0017R      0.5880107      0.5282159      0.4276193      0.4850496 #> 06520024B0014R      1.0000000      0.6059874      0.5317071      0.5407754 #> 06520080B0023R      0.6059874      1.0000000      0.8384252      0.8961184 #> 06520093C0017R      0.5317071      0.8384252      1.0000000      0.7933036 #> 06520070C0018R      0.5407754      0.8961184      0.7933036      1.0000000 #> 06520023C0018R      0.5403914      0.8941102      0.8082247      0.9658703 #> 06520099B0017R      0.5677268      0.8092670      0.8884675      0.6897805 #> 06520015C0016R      0.5410291      0.7177895      0.6165727      0.8088963 #> 06520019C0023R      0.6251164      0.8780061      0.7894097      0.9381035 #>                06520023C0018R 06520099B0017R 06520015C0016R 06520019C0023R #> 06520011B0023R      0.4033409      0.4224672      0.8093514      0.6139914 #> 06520067C0018R      0.4404680      0.4766716      0.8036729      0.6389785 #> 06520063C0043R      0.8266231      0.7936238      0.7640655      0.8583166 #> 06520105C0017R      0.8575140      0.6681055      0.6482306      0.8280060 #> 06520092C0017R      0.5100178      0.5000248      0.6949487      0.6235283 #> 06520103C0017R      0.4636074      0.3018044      0.9262604      0.6475062 #> 06520001B0023R      0.5662647      0.3613744      0.9682275      0.7162892 #> 06520022C0017R      0.6677198      0.5875554      0.9302252      0.8016153 #> 06520062C0017R      0.8045479      0.7839665      0.7306067      0.8610609 #> 06520046C0018R      0.4105629      0.5424584      0.1605127      0.4903751 #> 06520101B0017R      0.4729066      0.4246231      0.8992993      0.6754787 #> 06520047C0017R      0.5008448      0.5237444      0.5037995      0.6867600 #> 06520024B0014R      0.5403914      0.5677268      0.5410291      0.6251164 #> 06520080B0023R      0.8941102      0.8092670      0.7177895      0.8780061 #> 06520093C0017R      0.8082247      0.8884675      0.6165727      0.7894097 #> 06520070C0018R      0.9658703      0.6897805      0.8088963      0.9381035 #> 06520023C0018R      1.0000000      0.7296291      0.7286448      0.9323267 #> 06520099B0017R      0.7296291      1.0000000      0.4846711      0.7380609 #> 06520015C0016R      0.7286448      0.4846711      1.0000000      0.8240416 #> 06520019C0023R      0.9323267      0.7380609      0.8240416      1.0000000 #> Slot \"flag_data\": #> DataFrame with 20 rows and 2 columns #>                tech_failure_flag low_depth_flag #>                        <logical>      <logical> #> 06520011B0023R             FALSE          FALSE #> 06520067C0018R             FALSE          FALSE #> 06520063C0043R             FALSE           TRUE #> 06520105C0017R             FALSE          FALSE #> 06520092C0017R             FALSE          FALSE #> ...                          ...            ... #> 06520070C0018R             FALSE          FALSE #> 06520023C0018R             FALSE          FALSE #> 06520099B0017R             FALSE          FALSE #> 06520015C0016R             FALSE          FALSE #> 06520019C0023R             FALSE          FALSE #>   # We can specify another correlation coefficient to be calculated. result <- correlate(object, method = \"spearman\")  # Plot the correlation matrix. autoplot(result)   # We can customize the heatmap. autoplot(result, show_column_names = FALSE, show_row_names = FALSE)   # Including changing the axis label text size. autoplot(   result,   row_names_gp = grid::gpar(fontsize = 8),   column_names_gp = grid::gpar(fontsize = 8) )"},{"path":"https://insightsengineering.github.io/hermes/reference/calc_pca.html","id":null,"dir":"Reference","previous_headings":"","what":"Principal Components Analysis Calculation ‚Äî calc_pca","title":"Principal Components Analysis Calculation ‚Äî calc_pca","text":"calc_pca() function performs principal components analysis gene count vectors across samples. corresponding autoplot() method can visualize results.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/calc_pca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Principal Components Analysis Calculation ‚Äî calc_pca","text":"","code":"calc_pca(object, assay_name = \"counts\", n_top = NULL)"},{"path":"https://insightsengineering.github.io/hermes/reference/calc_pca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Principal Components Analysis Calculation ‚Äî calc_pca","text":"object (AnyHermesData)  input. assay_name (string)  name assay use. n_top (count NULL) filter criteria based number genes maximum variance.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/calc_pca.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Principal Components Analysis Calculation ‚Äî calc_pca","text":"HermesDataPca object extension stats::prcomp class.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/calc_pca.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Principal Components Analysis Calculation ‚Äî calc_pca","text":"PCA performed filtering low quality genes samples, well normalization counts. addition, genes constant counts across samples excluded analysis internally calc_pca(). Centering scaling also applied internally. Plots can obtained ggplot2::autoplot() function corresponding method ggfortify package plot results principal components analysis saved HermesDataPca object. See ggfortify::autoplot.prcomp() details.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/hermes/reference/calc_pca.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Principal Components Analysis Calculation ‚Äî calc_pca","text":"","code":"object <- hermes_data %>%   add_quality_flags() %>%   filter() %>%   normalize()  result <- calc_pca(object, assay_name = \"tpm\") summary(result) #> Importance of first k=18 (out of 19) components: #>                            PC1     PC2     PC3      PC4      PC5     PC6 #> Standard deviation     22.9971 18.7315 16.3042 13.47009 13.05843 11.4881 #> Proportion of Variance  0.2212  0.1467  0.1112  0.07589  0.07132  0.0552 #> Cumulative Proportion   0.2212  0.3679  0.4791  0.55500  0.62632  0.6815 #>                             PC7     PC8     PC9    PC10    PC11    PC12    PC13 #> Standard deviation     10.60653 9.67291 9.29607 8.97324 8.54474 8.11786 7.70847 #> Proportion of Variance  0.04705 0.03913 0.03614 0.03368 0.03054 0.02756 0.02485 #> Cumulative Proportion   0.72857 0.76770 0.80384 0.83752 0.86805 0.89562 0.92047 #>                           PC14    PC15    PC16    PC17    PC18 #> Standard deviation     7.20798 6.91976 6.11309 5.77360 4.42960 #> Proportion of Variance 0.02173 0.02003 0.01563 0.01394 0.00821 #> Cumulative Proportion  0.94220 0.96222 0.97785 0.99179 1.00000  result1 <- calc_pca(object, assay_name = \"tpm\", n_top = 500) summary(result1) #> Importance of first k=18 (out of 19) components: #>                            PC1    PC2     PC3     PC4     PC5     PC6     PC7 #> Standard deviation     11.2652 9.6518 6.89353 6.34548 5.29254 5.20812 4.70857 #> Proportion of Variance  0.2538 0.1863 0.09504 0.08053 0.05602 0.05425 0.04434 #> Cumulative Proportion   0.2538 0.4401 0.53517 0.61570 0.67172 0.72597 0.77031 #>                           PC8     PC9   PC10    PC11   PC12    PC13    PC14 #> Standard deviation     4.2012 4.06409 3.7884 3.51647 3.2405 3.07753 3.04570 #> Proportion of Variance 0.0353 0.03303 0.0287 0.02473 0.0210 0.01894 0.01855 #> Cumulative Proportion  0.8056 0.83864 0.8673 0.89208 0.9131 0.93202 0.95058 #>                           PC15    PC16    PC17    PC18 #> Standard deviation     2.87077 2.65226 2.46289 1.83598 #> Proportion of Variance 0.01648 0.01407 0.01213 0.00674 #> Cumulative Proportion  0.96706 0.98113 0.99326 1.00000  # Plot the results. autoplot(result)  autoplot(result, x = 2, y = 3)  autoplot(result, variance_percentage = FALSE)  autoplot(result, label = TRUE, label.repel = TRUE)"},{"path":"https://insightsengineering.github.io/hermes/reference/cat_with_newline.html","id":null,"dir":"Reference","previous_headings":"","what":"Concatenate and Print with Newline ‚Äî cat_with_newline","title":"Concatenate and Print with Newline ‚Äî cat_with_newline","text":"function concatenates inputs like cat() prints newline.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/cat_with_newline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Concatenate and Print with Newline ‚Äî cat_with_newline","text":"","code":"cat_with_newline(...)"},{"path":"https://insightsengineering.github.io/hermes/reference/cat_with_newline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Concatenate and Print with Newline ‚Äî cat_with_newline","text":"... inputs concatenate.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/cat_with_newline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Concatenate and Print with Newline ‚Äî cat_with_newline","text":"None, used side effect producing concatenated output R console.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/hermes/reference/cat_with_newline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Concatenate and Print with Newline ‚Äî cat_with_newline","text":"","code":"cat_with_newline(\"hello\", \"world\") #> hello world"},{"path":"https://insightsengineering.github.io/hermes/reference/cbind.html","id":null,"dir":"Reference","previous_headings":"","what":"Column Binding of AnyHermesData Objects ‚Äî cbind","title":"Column Binding of AnyHermesData Objects ‚Äî cbind","text":"method combines AnyHermesData objects ranges different samples (columns assays).","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/cbind.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Column Binding of AnyHermesData Objects ‚Äî cbind","text":"... (AnyHermesData) objects column bind.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/cbind.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Column Binding of AnyHermesData Objects ‚Äî cbind","text":"combined AnyHermesData object.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/cbind.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Column Binding of AnyHermesData Objects ‚Äî cbind","text":"Note just inherits SummarizedExperiment::cbind,SummarizedExperiment-method(). binding AnyHermesData object SummarizedExperiment::SummarizedExperiment object, result SummarizedExperiment::SummarizedExperiment object (general class). Note combined object needs unique sample IDs (column names).","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/hermes/reference/cbind.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Column Binding of AnyHermesData Objects ‚Äî cbind","text":"","code":"a <- hermes_data[, 1:10] b <- hermes_data[, 11:20] result <- cbind(a, b) class(result) #> [1] \"HermesData\" #> attr(,\"package\") #> [1] \"hermes\""},{"path":"https://insightsengineering.github.io/hermes/reference/check_proportion.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for proportion ‚Äî check_proportion","title":"Check for proportion ‚Äî check_proportion","text":"Check whether x (single) proportion.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/check_proportion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for proportion ‚Äî check_proportion","text":"","code":"check_proportion(x, null.ok = FALSE)  assert_proportion(   x,   null.ok = FALSE,   .var.name = checkmate::vname(x),   add = NULL )  test_proportion(x, null.ok = FALSE)  expect_proportion(x, null.ok = FALSE, info = NULL, label = vname(x))"},{"path":"https://insightsengineering.github.io/hermes/reference/check_proportion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for proportion ‚Äî check_proportion","text":"x object check. null.ok (flag) whether x may also NULL. .var.name (string) name checked object print assertions; defaults heuristic implemented checkmate::vname(). add (AssertCollection NULL) collection store assertion messages, see checkmate::AssertCollection. info (string) extra information included message testthat reporter, see testthat::expect_that(). label (string) name checked object print messages. Defaults heuristic implemented checkmate::vname().","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/check_proportion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for proportion ‚Äî check_proportion","text":"TRUE successful, otherwise string error message.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/hermes/reference/check_proportion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for proportion ‚Äî check_proportion","text":"","code":"check_proportion(0.25) #> [1] TRUE"},{"path":"https://insightsengineering.github.io/hermes/reference/colMeanZscores.html","id":null,"dir":"Reference","previous_headings":"","what":"Mean Z-score Gene Signature ‚Äî colMeanZscores","title":"Mean Z-score Gene Signature ‚Äî colMeanZscores","text":"helper function returns Z-score assay stored matrix.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/colMeanZscores.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mean Z-score Gene Signature ‚Äî colMeanZscores","text":"","code":"colMeanZscores(x)"},{"path":"https://insightsengineering.github.io/hermes/reference/colMeanZscores.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mean Z-score Gene Signature ‚Äî colMeanZscores","text":"x (matrix) containing numeric data genes rows samples columns, missing values allowed.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/colMeanZscores.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mean Z-score Gene Signature ‚Äî colMeanZscores","text":"numeric vector containing mean Z-score values column x.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/colMeanZscores.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mean Z-score Gene Signature ‚Äî colMeanZscores","text":"","code":"object <- hermes_data %>%   add_quality_flags() %>%   filter() %>%   normalize() %>%   assay(\"counts\")  colMeanZscores(object) #> 06520011B0023R 06520067C0018R 06520063C0043R 06520105C0017R 06520092C0017R  #>   5.195107e-04  -1.189550e-03   1.155081e-04   3.308070e-04  -1.130575e-03  #> 06520103C0017R 06520001B0023R 06520022C0017R 06520062C0017R 06520101B0017R  #>   1.688234e-03   5.201127e-05  -1.145377e-03   1.922514e-03  -1.779591e-03  #> 06520047C0017R 06520024B0014R 06520080B0023R 06520093C0017R 06520070C0018R  #>   2.320730e-04  -4.893309e-04   9.562463e-04  -3.677371e-04  -9.567040e-04  #> 06520023C0018R 06520099B0017R 06520015C0016R 06520019C0023R  #>  -5.682047e-04   7.648360e-04   2.441182e-04   8.012106e-04"},{"path":"https://insightsengineering.github.io/hermes/reference/colPrinComp1.html","id":null,"dir":"Reference","previous_headings":"","what":"First Principal Component (PC1) Gene Signature ‚Äî colPrinComp1","title":"First Principal Component (PC1) Gene Signature ‚Äî colPrinComp1","text":"helper function returns first principal component assay stored matrix.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/colPrinComp1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"First Principal Component (PC1) Gene Signature ‚Äî colPrinComp1","text":"","code":"colPrinComp1(x, center = TRUE, scale = TRUE)"},{"path":"https://insightsengineering.github.io/hermes/reference/colPrinComp1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"First Principal Component (PC1) Gene Signature ‚Äî colPrinComp1","text":"x (matrix) containing numeric data genes rows samples columns, missing values allowed. center (flag) whether variables zero centered. scale (flag) whether variables scaled unit variance.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/colPrinComp1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"First Principal Component (PC1) Gene Signature ‚Äî colPrinComp1","text":"numeric vector containing principal component values column x.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/colPrinComp1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"First Principal Component (PC1) Gene Signature ‚Äî colPrinComp1","text":"","code":"object <- hermes_data %>%   add_quality_flags() %>%   filter() %>%   normalize() %>%   assay(\"counts\")  colPrinComp1(object) #> 06520011B0023R 06520067C0018R 06520063C0043R 06520105C0017R 06520092C0017R  #>    -22.7211514    -16.5888471     -8.6643020    -20.3183592     13.4998779  #> 06520103C0017R 06520001B0023R 06520022C0017R 06520062C0017R 06520101B0017R  #>     17.9491775      4.7633163    -10.6928704    -16.1907212     30.3749930  #> 06520047C0017R 06520024B0014R 06520080B0023R 06520093C0017R 06520070C0018R  #>    -25.6029134    -18.1914202     -6.9932017     36.8659028      0.7099287  #> 06520023C0018R 06520099B0017R 06520015C0016R 06520019C0023R  #>     -5.3048871     32.7696234      9.9885728      4.3472814"},{"path":"https://insightsengineering.github.io/hermes/reference/col_data_with_genes.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample Variables with Selected Gene Information ‚Äî col_data_with_genes","title":"Sample Variables with Selected Gene Information ‚Äî col_data_with_genes","text":"obtains sample variables HermesData object together selected gene information.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/col_data_with_genes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample Variables with Selected Gene Information ‚Äî col_data_with_genes","text":"","code":"col_data_with_genes(object, assay_name, genes)"},{"path":"https://insightsengineering.github.io/hermes/reference/col_data_with_genes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample Variables with Selected Gene Information ‚Äî col_data_with_genes","text":"object (AnyHermesData) input experiment. assay_name (string) assay use. genes (GeneSpec) genes gene signature extracted.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/col_data_with_genes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample Variables with Selected Gene Information ‚Äî col_data_with_genes","text":"combined data set, additional attribute gene_cols contains names columns obtained extracting genes information.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/col_data_with_genes.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Sample Variables with Selected Gene Information ‚Äî col_data_with_genes","text":"class returned data set depend class colData, usually S4Vectors::DFrame.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/col_data_with_genes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample Variables with Selected Gene Information ‚Äî col_data_with_genes","text":"","code":"result <- col_data_with_genes(hermes_data, \"counts\", gene_spec(\"GeneID:1820\")) tail(names(result)) #> [1] \"COHORT\"            \"TTYPE\"             \"STDSSDY\"           #> [4] \"low_depth_flag\"    \"tech_failure_flag\" \"GeneID.1820\"       result$GeneID.1820 #>  [1]  49 153  94  54 111 567 118 171 180  16 386  57 242  73 362 144 124 243  79 #> [20] 161"},{"path":"https://insightsengineering.github.io/hermes/reference/connect_biomart.html","id":null,"dir":"Reference","previous_headings":"","what":"Connection to BioMart ‚Äî connect_biomart","title":"Connection to BioMart ‚Äî connect_biomart","text":"connect_biomart() creates connection object class ConnectionBiomart contains biomaRt object class biomaRt::Mart prefix object used downstream query.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/connect_biomart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Connection to BioMart ‚Äî connect_biomart","text":"","code":"connect_biomart(prefix = c(\"ENSG\", \"GeneID\"), version = NULL)"},{"path":"https://insightsengineering.github.io/hermes/reference/connect_biomart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connection to BioMart ‚Äî connect_biomart","text":"prefix (string) gene ID prefix. version (string NULL) optional Ensembl version use. NULL latest available release used.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/connect_biomart.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Connection to BioMart ‚Äî connect_biomart","text":"ConnectionBiomart object.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/connect_biomart.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Connection to BioMart ‚Äî connect_biomart","text":"connects Ensembl data base BioMart human genes. specific version can optionally chosen ensure reproducibility results new release available, accessed data might change.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/connect_biomart.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Connection to BioMart ‚Äî connect_biomart","text":"","code":"if (interactive()) {   connection <- connect_biomart(\"ENSG\") }"},{"path":"https://insightsengineering.github.io/hermes/reference/control_normalize.html","id":null,"dir":"Reference","previous_headings":"","what":"Control Settings for Counts Normalization ‚Äî control_normalize","title":"Control Settings for Counts Normalization ‚Äî control_normalize","text":"control function allows easy customization normalization settings.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/control_normalize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Control Settings for Counts Normalization ‚Äî control_normalize","text":"","code":"control_normalize(   log = TRUE,   lib_sizes = NULL,   prior_count = 1,   fit_type = \"parametric\" )"},{"path":"https://insightsengineering.github.io/hermes/reference/control_normalize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Control Settings for Counts Normalization ‚Äî control_normalize","text":"log (flag) whether log2 values returned, otherwise original scale used. lib_sizes (NULL counts) library sizes, NULL vector sum counts samples used. prior_count (non-negative number) average count added observation avoid taking log zero, used log = TRUE. fit_type (string) method estimate dispersion parameters Negative Binomial model, used normalize() methods include vst /rlog. See estimateDispersions details.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/control_normalize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Control Settings for Counts Normalization ‚Äî control_normalize","text":"List settings used perform normalization procedure.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/control_normalize.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Control Settings for Counts Normalization ‚Äî control_normalize","text":"used normalize() function.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/control_normalize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Control Settings for Counts Normalization ‚Äî control_normalize","text":"","code":"control_normalize() #> $log #> [1] TRUE #>  #> $lib_sizes #> NULL #>  #> $prior_count #> [1] 1 #>  #> $fit_type #> [1] \"parametric\" #>  control_normalize(log = FALSE, lib_sizes = rep(1e6L, 20)) #> $log #> [1] FALSE #>  #> $lib_sizes #>  [1] 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 #> [10] 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 #> [19] 1000000 1000000 #>  #> $prior_count #> [1] 1 #>  #> $fit_type #> [1] \"parametric\" #>"},{"path":"https://insightsengineering.github.io/hermes/reference/control_quality.html","id":null,"dir":"Reference","previous_headings":"","what":"Control for Specified Quality Flags ‚Äî control_quality","title":"Control for Specified Quality Flags ‚Äî control_quality","text":"Control function specifies quality flag settings. One settings can customized. specified settings left defaults.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/control_quality.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Control for Specified Quality Flags ‚Äî control_quality","text":"","code":"control_quality(   min_cpm = 1,   min_cpm_prop = 0.25,   min_corr = 0.5,   min_depth = NULL )"},{"path":"https://insightsengineering.github.io/hermes/reference/control_quality.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Control for Specified Quality Flags ‚Äî control_quality","text":"min_cpm (non-negative number) minimum Counts per Million (CPM) gene within sample. min_cpm_prop (proportion) minimum proportion samples acceptable CPM certain gene low expression flagging. min_corr (proportion) minimum Pearson correlation coefficient CPM samples technical failure flagging. min_depth (non-negative count NULL) minimum library depth low depth flagging. NULL, calculated first quartile minus 1.5 times inter-quartile range library size (depth) samples. (anything usual lower boxplot whisker low.)","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/control_quality.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Control for Specified Quality Flags ‚Äî control_quality","text":"List criteria flag observations.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/control_quality.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Control for Specified Quality Flags ‚Äî control_quality","text":"used add_quality_flags() function.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/control_quality.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Control for Specified Quality Flags ‚Äî control_quality","text":"","code":"# Default settings. control_quality() #> $min_cpm #> [1] 1 #>  #> $min_cpm_prop #> [1] 0.25 #>  #> $min_corr #> [1] 0.5 #>  #> $min_depth #> NULL #>   # One or more settings can be customized. control_quality(min_cpm = 5, min_cpm_prop = 0.001) #> $min_cpm #> [1] 5 #>  #> $min_cpm_prop #> [1] 0.001 #>  #> $min_corr #> [1] 0.5 #>  #> $min_depth #> NULL #>"},{"path":"https://insightsengineering.github.io/hermes/reference/correlate.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic Function for Correlation Calculations ‚Äî correlate","title":"Generic Function for Correlation Calculations ‚Äî correlate","text":"New generic function calculate correlations one two objects.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/correlate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic Function for Correlation Calculations ‚Äî correlate","text":"","code":"correlate(object, ...)"},{"path":"https://insightsengineering.github.io/hermes/reference/correlate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic Function for Correlation Calculations ‚Äî correlate","text":"object input class used decide method. ... additional arguments.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/correlate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic Function for Correlation Calculations ‚Äî correlate","text":"Corresponding object contains correlation results.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/hermes/reference/correlate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic Function for Correlation Calculations ‚Äî correlate","text":"","code":"sample_cors <- correlate(hermes_data) autoplot(sample_cors)   pca_sample_var_cors <- correlate(calc_pca(hermes_data), hermes_data) autoplot(pca_sample_var_cors)"},{"path":"https://insightsengineering.github.io/hermes/reference/counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Counts Accessor and Setter ‚Äî counts,AnyHermesData-method","title":"Counts Accessor and Setter ‚Äî counts,AnyHermesData-method","text":"methods access set counts assay AnyHermesData object.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Counts Accessor and Setter ‚Äî counts,AnyHermesData-method","text":"","code":"# S4 method for AnyHermesData counts(object, ...)  # S4 method for AnyHermesData,matrix counts(object, ..., withDimnames = TRUE) <- value"},{"path":"https://insightsengineering.github.io/hermes/reference/counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Counts Accessor and Setter ‚Äî counts,AnyHermesData-method","text":"object (AnyHermesData) object access counts . ... used. withDimnames (flag) setting withDimnames =FALSE setter (counts<-) required dimnames supplied counts assay identical dimnames AnyHermesData object; influence actual assignment dimnames assay (always stored -). value (matrix) counts assay replaced .","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/counts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Counts Accessor and Setter ‚Äî counts,AnyHermesData-method","text":"counts assay.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/counts.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Counts Accessor and Setter ‚Äî counts,AnyHermesData-method","text":"counts(object = AnyHermesData) <- value:","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/counts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Counts Accessor and Setter ‚Äî counts,AnyHermesData-method","text":"","code":"a <- hermes_data result <- counts(a) class(result) #> [1] \"matrix\" \"array\"  head(result) #>                  06520011B0023R 06520067C0018R 06520063C0043R 06520105C0017R #> GeneID:11185                  3             66             35             10 #> GeneID:10677               1668            236             95           1945 #> GeneID:101928428              0              0              0              0 #> GeneID:100422835              0              0              0              0 #> GeneID:102466731              0              0              0              0 #> GeneID:64881                113             11            153             22 #>                  06520092C0017R 06520103C0017R 06520001B0023R 06520022C0017R #> GeneID:11185                 68            123             65             10 #> GeneID:10677                570            149            216            182 #> GeneID:101928428              0              0              0              0 #> GeneID:100422835              0              0              0              0 #> GeneID:102466731              0              0              0              0 #> GeneID:64881                  0             20              1              5 #>                  06520062C0017R 06520046C0018R 06520101B0017R 06520047C0017R #> GeneID:11185                106             23             72              4 #> GeneID:10677                138            748            314            189 #> GeneID:101928428              0              0              0              0 #> GeneID:100422835              0              0              0              0 #> GeneID:102466731              0              0              0              0 #> GeneID:64881                131            586              0            119 #>                  06520024B0014R 06520080B0023R 06520093C0017R 06520070C0018R #> GeneID:11185                 36              0             50            479 #> GeneID:10677                176            213            313            345 #> GeneID:101928428              0              0              0              0 #> GeneID:100422835              0              0              0              0 #> GeneID:102466731              0              0              0              0 #> GeneID:64881                  9             62              0            482 #>                  06520023C0018R 06520099B0017R 06520015C0016R 06520019C0023R #> GeneID:11185                235             35             75             47 #> GeneID:10677               1922            269            385            687 #> GeneID:101928428              0              0              0              0 #> GeneID:100422835              0              0              0              0 #> GeneID:102466731              0              0              0              0 #> GeneID:64881               1315              0           3047            135 counts(a) <- counts(a) + 100L head(counts(a)) #>                  06520011B0023R 06520067C0018R 06520063C0043R 06520105C0017R #> GeneID:11185                103            166            135            110 #> GeneID:10677               1768            336            195           2045 #> GeneID:101928428            100            100            100            100 #> GeneID:100422835            100            100            100            100 #> GeneID:102466731            100            100            100            100 #> GeneID:64881                213            111            253            122 #>                  06520092C0017R 06520103C0017R 06520001B0023R 06520022C0017R #> GeneID:11185                168            223            165            110 #> GeneID:10677                670            249            316            282 #> GeneID:101928428            100            100            100            100 #> GeneID:100422835            100            100            100            100 #> GeneID:102466731            100            100            100            100 #> GeneID:64881                100            120            101            105 #>                  06520062C0017R 06520046C0018R 06520101B0017R 06520047C0017R #> GeneID:11185                206            123            172            104 #> GeneID:10677                238            848            414            289 #> GeneID:101928428            100            100            100            100 #> GeneID:100422835            100            100            100            100 #> GeneID:102466731            100            100            100            100 #> GeneID:64881                231            686            100            219 #>                  06520024B0014R 06520080B0023R 06520093C0017R 06520070C0018R #> GeneID:11185                136            100            150            579 #> GeneID:10677                276            313            413            445 #> GeneID:101928428            100            100            100            100 #> GeneID:100422835            100            100            100            100 #> GeneID:102466731            100            100            100            100 #> GeneID:64881                109            162            100            582 #>                  06520023C0018R 06520099B0017R 06520015C0016R 06520019C0023R #> GeneID:11185                335            135            175            147 #> GeneID:10677               2022            369            485            787 #> GeneID:101928428            100            100            100            100 #> GeneID:100422835            100            100            100            100 #> GeneID:102466731            100            100            100            100 #> GeneID:64881               1415            100           3147            235"},{"path":"https://insightsengineering.github.io/hermes/reference/cut_quantile.html","id":null,"dir":"Reference","previous_headings":"","what":"Cutting a Numeric Vector into a Factor of Quantile Bins ‚Äî cut_quantile","title":"Cutting a Numeric Vector into a Factor of Quantile Bins ‚Äî cut_quantile","text":"function transforms numeric vector factor corresponding quantile intervals. intervals left-open right-closed.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/cut_quantile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cutting a Numeric Vector into a Factor of Quantile Bins ‚Äî cut_quantile","text":"","code":"cut_quantile(x, percentiles = c(1/3, 2/3), digits = 0)"},{"path":"https://insightsengineering.github.io/hermes/reference/cut_quantile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cutting a Numeric Vector into a Factor of Quantile Bins ‚Äî cut_quantile","text":"x (numeric) continuous variable values cut quantile bins. NA values taken account computing quantiles attributed NA interval. percentiles (proportions) required percentiles quantile intervals generated. Duplicated values removed. digits (integer)  precision use formatting percentages.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/cut_quantile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cutting a Numeric Vector into a Factor of Quantile Bins ‚Äî cut_quantile","text":"factor description available quantiles levels.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/cut_quantile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cutting a Numeric Vector into a Factor of Quantile Bins ‚Äî cut_quantile","text":"","code":"set.seed(452) x <- runif(10, -10, 10) cut_quantile(x, c(0.33333333, 0.6666666), digits = 4) #>  [1] [0%,33.3333%]       (33.3333%,66.6667%] [0%,33.3333%]       #>  [4] (66.6667%,100%]     (33.3333%,66.6667%] [0%,33.3333%]       #>  [7] (66.6667%,100%]     (33.3333%,66.6667%] (33.3333%,66.6667%] #> [10] (66.6667%,100%]     #> Levels: [0%,33.3333%] (33.3333%,66.6667%] (66.6667%,100%]  x[1:4] <- NA cut_quantile(x) #>  [1] <NA>       <NA>       <NA>       <NA>       (33%,67%]  [0%,33%]   #>  [7] (67%,100%] (33%,67%]  [0%,33%]   (67%,100%] #> Levels: [0%,33%] (33%,67%] (67%,100%]"},{"path":"https://insightsengineering.github.io/hermes/reference/df_cols_to_factor.html","id":null,"dir":"Reference","previous_headings":"","what":"Conversion of Eligible Columns to Factor Variables in a DataFrame ‚Äî df_cols_to_factor","title":"Conversion of Eligible Columns to Factor Variables in a DataFrame ‚Äî df_cols_to_factor","text":"utility function converts eligible character logical variables S4Vectors::DataFrame factor variables. factor variables get amended explicit missing level. includes NA empty strings.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/df_cols_to_factor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conversion of Eligible Columns to Factor Variables in a DataFrame ‚Äî df_cols_to_factor","text":"","code":"df_cols_to_factor(data, omit_columns = NULL, na_level = \"<Missing>\")"},{"path":"https://insightsengineering.github.io/hermes/reference/df_cols_to_factor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conversion of Eligible Columns to Factor Variables in a DataFrame ‚Äî df_cols_to_factor","text":"data (DataFrame) input S4Vectors::DataFrame. omit_columns (character NULL) columns omitted possible conversion factor explicit missing level application. na_level (string) explicit missing level used factor variables.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/df_cols_to_factor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conversion of Eligible Columns to Factor Variables in a DataFrame ‚Äî df_cols_to_factor","text":"modified data.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/df_cols_to_factor.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Conversion of Eligible Columns to Factor Variables in a DataFrame ‚Äî df_cols_to_factor","text":"required rowData colData variables converted ensure proper downstream behavior. automatically omitted found data therefore need specified omit_columns.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/df_cols_to_factor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conversion of Eligible Columns to Factor Variables in a DataFrame ‚Äî df_cols_to_factor","text":"","code":"dat <- colData(summarized_experiment) any(vapply(dat, is.character, logical(1))) #> [1] TRUE any(vapply(dat, is.logical, logical(1))) #> [1] TRUE dat_converted <- df_cols_to_factor(dat) any(vapply(dat_converted, function(x) is.character(x) || is.logical(x), logical(1))) #> [1] FALSE"},{"path":"https://insightsengineering.github.io/hermes/reference/diff_expression.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Expression Analysis ‚Äî diff_expression","title":"Differential Expression Analysis ‚Äî diff_expression","text":"diff_expression() function performs differential expression analysis using method preference. corresponding autoplot() method visualizing results volcano plot.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/diff_expression.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Expression Analysis ‚Äî diff_expression","text":"","code":"diff_expression(object, group, method = c(\"voom\", \"deseq2\"), ...)  # S4 method for HermesDataDiffExpr autoplot(object, adj_p_val_thresh = 0.05, log2_fc_thresh = 2.5)"},{"path":"https://insightsengineering.github.io/hermes/reference/diff_expression.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Expression Analysis ‚Äî diff_expression","text":"object (AnyHermesData) input. Note function uses original counts analysis, need normalized. group (string) name factor variable 2 levels colData(object). 2 levels compared differential expression analysis. method (string) method differential expression analysis, see details . ... additional arguments passed helper function associated selected method. adj_p_val_thresh (proportion) threshold adjusted p-values (y-axis) flag significance. log2_fc_thresh (number) threshold absolute log2 fold-change (x-axis) flag - -regulation transcription.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/diff_expression.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Expression Analysis ‚Äî diff_expression","text":"HermesDataDiffExpr object data frame following columns gene HermesData object: log2_fc (estimate log2 fold change 2 levels provided factor) stat (test statistic, one depends method used) p_val (raw p-value) adj_p_val (multiplicity adjusted p-value value)","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/diff_expression.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Differential Expression Analysis ‚Äî diff_expression","text":"Possible method choices : voom: uses limma::voom(), see h_diff_expr_voom() details. deseq2: uses DESeq2::DESeq(), see h_diff_expr_deseq2() details.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/diff_expression.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Differential Expression Analysis ‚Äî diff_expression","text":"autoplot(HermesDataDiffExpr): generates volcano plot HermesDataDiffExpr object.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/diff_expression.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Differential Expression Analysis ‚Äî diff_expression","text":"provide df_cols_to_factor() utility function makes easy convert colData() character logical variables factors, can subsequently used group inputs. See example. order avoid warning using deseq2, can necessary specify fitType = \"local\" additional argument. e.g. case samples present case default parametric dispersions estimation work.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/diff_expression.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Expression Analysis ‚Äî diff_expression","text":"","code":"object <- hermes_data %>%   add_quality_flags() %>%   filter()  # Convert character and logical to factor variables in `colData`, # including the below used `group` variable. colData(object) <- df_cols_to_factor(colData(object)) res1 <- diff_expression(object, group = \"SEX\", method = \"voom\") head(res1) #>                  log2_fc      stat       p_val adj_p_val #> GeneID:344558  1.4951365  3.768257 0.001217934 0.7815544 #> GeneID:51227  -1.0670584 -3.766113 0.001224023 0.7815544 #> GeneID:10280  -0.7518694 -3.461800 0.002478362 0.7815544 #> GeneID:9435    1.8555120  3.414364 0.002764727 0.7815544 #> GeneID:51575  -0.7238103 -3.326330 0.003384750 0.7815544 #> GeneID:123036  2.8900474  3.246333 0.004064925 0.7815544 res2 <- diff_expression(object, group = \"SEX\", method = \"deseq2\") head(res2) #>                  log2_fc      stat        p_val   adj_p_val #> GeneID:64344  -2.9129064 -4.864176 1.149347e-06 0.002694069 #> GeneID:9002    2.3092323  4.215740 2.489604e-05 0.020061145 #> GeneID:167681 -4.0974632 -4.201788 2.648146e-05 0.020061145 #> GeneID:51227  -1.1573425 -4.143302 3.423404e-05 0.020061145 #> GeneID:4359    2.8926465  4.004010 6.227765e-05 0.029195764 #> GeneID:10280  -0.7997803 -3.876433 1.059991e-04 0.031057749  # Pass method arguments to the internally used helper functions. res3 <- diff_expression(object, group = \"SEX\", method = \"voom\", robust = TRUE, trend = TRUE) head(res3) #>                  log2_fc      stat       p_val adj_p_val #> GeneID:51227  -1.0670584 -3.765145 0.001226726 0.7884829 #> GeneID:344558  1.4951365  3.759186 0.001243851 0.7884829 #> GeneID:10280  -0.7518694 -3.467915 0.002443545 0.7884829 #> GeneID:9435    1.8555120  3.390300 0.002922073 0.7884829 #> GeneID:51575  -0.7238103 -3.325713 0.003389426 0.7884829 #> GeneID:123036  2.8900474  3.232786 0.004230256 0.7884829 res4 <- diff_expression(object, group = \"SEX\", method = \"deseq2\", fitType = \"local\") head(res4) #>                  log2_fc      stat        p_val   adj_p_val #> GeneID:64344  -2.9128847 -4.892128 9.975152e-07 0.002338176 #> GeneID:9002    2.3091854  4.256818 2.073572e-05 0.014702529 #> GeneID:167681 -4.0975071 -4.300519 1.703986e-05 0.014702529 #> GeneID:51227  -1.1573487 -4.213992 2.508964e-05 0.014702529 #> GeneID:4359    2.8925392  4.055798 4.996349e-05 0.021309899 #> GeneID:10280  -0.7997974 -3.958566 7.540117e-05 0.021309899  # Create the corresponding volcano plots. autoplot(res1)  autoplot(res3)"},{"path":"https://insightsengineering.github.io/hermes/reference/draw_barplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Barplot for Gene Expression Percentiles ‚Äî draw_barplot","title":"Barplot for Gene Expression Percentiles ‚Äî draw_barplot","text":"produces barplot dichotomized gene expression counts two three categories based custom defined percentiles.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/draw_barplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Barplot for Gene Expression Percentiles ‚Äî draw_barplot","text":"","code":"draw_barplot(   object,   assay_name,   x_spec,   facet_var = NULL,   fill_var = NULL,   percentiles = c(1/3, 2/3) )"},{"path":"https://insightsengineering.github.io/hermes/reference/draw_barplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Barplot for Gene Expression Percentiles ‚Äî draw_barplot","text":"object (AnyHermesData) input. assay_name (string) selects assay input. x_spec (GeneSpec) gene specification x-axis. facet_var (string NULL) optional faceting variable, taken input sample variables. fill_var (string NULL) optional fill variable, taken input sample variables. percentiles (vector) lower upper percentiles dichotomize gene counts two three categories.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/draw_barplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Barplot for Gene Expression Percentiles ‚Äî draw_barplot","text":"ggplot barplot.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/draw_barplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Barplot for Gene Expression Percentiles ‚Äî draw_barplot","text":"","code":"object <- hermes_data  g <- genes(object)  draw_barplot(   object,   assay_name = \"counts\",   x_spec = gene_spec(g[1]),   facet_var = \"SEX\",   fill_var = \"AGE18\" )   draw_barplot(   object,   assay_name = \"counts\",   x_spec = gene_spec(g[1:3], colMedians, \"Median\"),   facet_var = \"SEX\",   fill_var = \"AGE18\" )   draw_barplot(   object,   assay_name = \"counts\",   x_spec = gene_spec(g[1:3], colMeans, \"Mean\"),   facet_var = \"SEX\",   fill_var = \"AGE18\",   percentiles = c(0.1, 0.9) )"},{"path":"https://insightsengineering.github.io/hermes/reference/draw_boxplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Boxplot for Gene Expression Values ‚Äî draw_boxplot","title":"Boxplot for Gene Expression Values ‚Äî draw_boxplot","text":"produces boxplots gene expression values single gene, multiple genes gene signature.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/draw_boxplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Boxplot for Gene Expression Values ‚Äî draw_boxplot","text":"","code":"draw_boxplot(   object,   assay_name,   genes,   x_var = NULL,   color_var = NULL,   facet_var = NULL,   violin = FALSE,   jitter = FALSE )  h_draw_boxplot_df(object, assay_name, genes, x_var, color_var, facet_var)"},{"path":"https://insightsengineering.github.io/hermes/reference/draw_boxplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Boxplot for Gene Expression Values ‚Äî draw_boxplot","text":"object (AnyHermesData) input. assay_name (string) selects assay input y-axis. genes (GeneSpec) genes gene signature produce boxplots. x_var (string NULL) optional stratifying variable x-axis, taken input sample variables. color_var (string NULL) optional color variable, taken input sample variables. facet_var (string NULL) optional faceting variable, taken input sample variables. violin (flag) whether draw violin plot instead boxplot. jitter (flag) whether add jittered original data points.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/draw_boxplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Boxplot for Gene Expression Values ‚Äî draw_boxplot","text":"ggplot boxplot.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/draw_boxplot.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Boxplot for Gene Expression Values ‚Äî draw_boxplot","text":"h_draw_boxplot_df(): Helper function prepare data frame required plotting.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/draw_boxplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Boxplot for Gene Expression Values ‚Äî draw_boxplot","text":"","code":"object <- hermes_data draw_boxplot(   object,   assay_name = \"counts\",   genes = gene_spec(c(A = genes(object)[1])),   violin = TRUE )   object2 <- object %>%   add_quality_flags() %>%   filter() %>%   normalize() draw_boxplot(   object2,   assay_name = \"tpm\",   x_var = \"SEX\",   genes = gene_spec(setNames(genes(object2)[1:10], 1:10), fun = colMeans),   facet_var = \"RACE\",   color_var = \"AGE18\",   jitter = TRUE )   draw_boxplot(   object,   assay_name = \"counts\",   x_var = \"SEX\",   genes = gene_spec(genes(object)[1:3]),   jitter = TRUE,   facet_var = \"AGE18\" )   draw_boxplot(   object,   assay_name = \"counts\",   genes = gene_spec(c(A = \"GeneID:11185\", B = \"GeneID:10677\")),   violin = TRUE )"},{"path":"https://insightsengineering.github.io/hermes/reference/draw_genes_barplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Stacked Barplot of Low Expression Genes by Chromosome ‚Äî draw_genes_barplot","title":"Stacked Barplot of Low Expression Genes by Chromosome ‚Äî draw_genes_barplot","text":"creates barplot chromosomes AnyHermesData object proportions low expression genes.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/draw_genes_barplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stacked Barplot of Low Expression Genes by Chromosome ‚Äî draw_genes_barplot","text":"","code":"draw_genes_barplot(   object,   chromosomes = c(seq_len(22), \"X\", \"Y\", \"MT\"),   include_others = TRUE )"},{"path":"https://insightsengineering.github.io/hermes/reference/draw_genes_barplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stacked Barplot of Low Expression Genes by Chromosome ‚Äî draw_genes_barplot","text":"object (AnyHermesData) input. chromosomes (character) names chromosomes displayed. include_others (flag) option show chromosomes chromosomes \"Others\".","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/draw_genes_barplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stacked Barplot of Low Expression Genes by Chromosome ‚Äî draw_genes_barplot","text":"ggplot object histogram.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/draw_genes_barplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stacked Barplot of Low Expression Genes by Chromosome ‚Äî draw_genes_barplot","text":"","code":"object <- hermes_data  # Display chromosomes 1-22, X, Y, and MT. Other chromosomes are displayed in \"Others\". # To increase readability, we can have flip the coordinate axes. draw_genes_barplot(object) + coord_flip()   # Alternatively we can also rotate the x-axis tick labels. draw_genes_barplot(object) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))   # Display chromosomes 1 and 2. Other chromosomes are displayed in \"Others\". draw_genes_barplot(object, chromosomes = c(\"1\", \"2\"))   # Display chromosomes 1 and 2 only. draw_genes_barplot(object, chromosomes = c(\"1\", \"2\"), include_others = FALSE)"},{"path":"https://insightsengineering.github.io/hermes/reference/draw_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Heatmap for Gene Expression Counts ‚Äî draw_heatmap","title":"Heatmap for Gene Expression Counts ‚Äî draw_heatmap","text":"produces heatmap chosen assay groups various sample variables.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/draw_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Heatmap for Gene Expression Counts ‚Äî draw_heatmap","text":"","code":"draw_heatmap(   object,   assay_name,   color_extremes = c(0.01, 0.99),   col_data_annotation = NULL,   ... )"},{"path":"https://insightsengineering.github.io/hermes/reference/draw_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Heatmap for Gene Expression Counts ‚Äî draw_heatmap","text":"object (AnyHermesData) input. assay_name (string) selects assay input. color_extremes (numeric) min max percentiles inform color scheme heatmap blue red respectively. col_data_annotation (character NULL) optional grouping variable(s), taken input sample variables. ... additional arguments pass ComplexHeatmap::Heatmap().","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/draw_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Heatmap for Gene Expression Counts ‚Äî draw_heatmap","text":"ComplexHeatmap::Heatmap heatmap","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/draw_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Heatmap for Gene Expression Counts ‚Äî draw_heatmap","text":"","code":"result <- hermes_data %>%   normalize(methods = \"voom\") %>%   add_quality_flags() %>%   filter(what = \"genes\")  draw_heatmap(   object = result[1:10, ],   assay_name = \"counts\",   col_data_annotation = \"COUNTRY\" )   draw_heatmap(   object = result[1:10, ],   assay_name = \"counts\",   color_extremes = c(0.001, 0.999),   col_data_annotation = \"AGEGRP\" )"},{"path":"https://insightsengineering.github.io/hermes/reference/draw_libsize_densities.html","id":null,"dir":"Reference","previous_headings":"","what":"Density Plot of (Log) Counts Distributions ‚Äî draw_libsize_densities","title":"Density Plot of (Log) Counts Distributions ‚Äî draw_libsize_densities","text":"creates density plot (log) counts distributions AnyHermesData object line plot corresponds sample.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/draw_libsize_densities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Density Plot of (Log) Counts Distributions ‚Äî draw_libsize_densities","text":"","code":"draw_libsize_densities(object, log = TRUE)"},{"path":"https://insightsengineering.github.io/hermes/reference/draw_libsize_densities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Density Plot of (Log) Counts Distributions ‚Äî draw_libsize_densities","text":"object (AnyHermesData) input. log (flag) counts log transformed (log2).","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/draw_libsize_densities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Density Plot of (Log) Counts Distributions ‚Äî draw_libsize_densities","text":"ggplot object density plot.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/draw_libsize_densities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Density Plot of (Log) Counts Distributions ‚Äî draw_libsize_densities","text":"","code":"result <- hermes_data draw_libsize_densities(result)  draw_libsize_densities(result, log = FALSE)"},{"path":"https://insightsengineering.github.io/hermes/reference/draw_libsize_hist.html","id":null,"dir":"Reference","previous_headings":"","what":"Histogram of Library Sizes ‚Äî draw_libsize_hist","title":"Histogram of Library Sizes ‚Äî draw_libsize_hist","text":"creates histogram library sizes AnyHermesData object.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/draw_libsize_hist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Histogram of Library Sizes ‚Äî draw_libsize_hist","text":"","code":"draw_libsize_hist(object, bins = 30L, fill = \"darkgrey\")"},{"path":"https://insightsengineering.github.io/hermes/reference/draw_libsize_hist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Histogram of Library Sizes ‚Äî draw_libsize_hist","text":"object (AnyHermesData) input. bins (count) number evenly distributed groups desired. fill (string) color bars filling.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/draw_libsize_hist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Histogram of Library Sizes ‚Äî draw_libsize_hist","text":"ggplot object histogram.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/draw_libsize_hist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Histogram of Library Sizes ‚Äî draw_libsize_hist","text":"","code":"result <- hermes_data draw_libsize_hist(result)  draw_libsize_hist(result, bins = 10L, fill = \"blue\")"},{"path":"https://insightsengineering.github.io/hermes/reference/draw_libsize_qq.html","id":null,"dir":"Reference","previous_headings":"","what":"Q-Q Plot of Library Sizes ‚Äî draw_libsize_qq","title":"Q-Q Plot of Library Sizes ‚Äî draw_libsize_qq","text":"creates Q-Q plot library sizes AnyHermesData object.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/draw_libsize_qq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Q-Q Plot of Library Sizes ‚Äî draw_libsize_qq","text":"","code":"draw_libsize_qq(object, color = \"grey\", linetype = \"dashed\")"},{"path":"https://insightsengineering.github.io/hermes/reference/draw_libsize_qq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Q-Q Plot of Library Sizes ‚Äî draw_libsize_qq","text":"object (AnyHermesData) input. color (string) color Q-Q line. linetype (string) line type  Q-Q line.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/draw_libsize_qq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Q-Q Plot of Library Sizes ‚Äî draw_libsize_qq","text":"ggplot object Q-Q Plot.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/draw_libsize_qq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Q-Q Plot of Library Sizes ‚Äî draw_libsize_qq","text":"","code":"result <- hermes_data draw_libsize_qq(result)  draw_libsize_qq(result, color = \"blue\", linetype = \"solid\")   # We can also add sample names as labels. library(ggrepel) draw_libsize_qq(result) + geom_text_repel(label = colnames(result), stat = \"qq\")"},{"path":"https://insightsengineering.github.io/hermes/reference/draw_nonzero_boxplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Boxplot of Non-Zero Genes ‚Äî draw_nonzero_boxplot","title":"Boxplot of Non-Zero Genes ‚Äî draw_nonzero_boxplot","text":"draws boxplot, overlaid data points, number non-zero expressed genes per sample.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/draw_nonzero_boxplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Boxplot of Non-Zero Genes ‚Äî draw_nonzero_boxplot","text":"","code":"draw_nonzero_boxplot(object, position = position_jitter(0.2), alpha = 0.25)"},{"path":"https://insightsengineering.github.io/hermes/reference/draw_nonzero_boxplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Boxplot of Non-Zero Genes ‚Äî draw_nonzero_boxplot","text":"object (AnyHermesData) input. position (Position) specifies x-axis position points, e.g. jittering. alpha (proportion) specifies transparency points.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/draw_nonzero_boxplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Boxplot of Non-Zero Genes ‚Äî draw_nonzero_boxplot","text":"ggplot object boxplot.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/draw_nonzero_boxplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Boxplot of Non-Zero Genes ‚Äî draw_nonzero_boxplot","text":"","code":"# Default boxplot. result <- hermes_data draw_nonzero_boxplot(result)   # Reusing the same position for labeling. library(ggrepel) pos <- position_jitter(0.5) draw_nonzero_boxplot(result, position = pos) +   geom_text_repel(aes(label = samples(result)), position = pos)"},{"path":"https://insightsengineering.github.io/hermes/reference/draw_scatterplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Scatterplot for Gene Expression Values ‚Äî draw_scatterplot","title":"Scatterplot for Gene Expression Values ‚Äî draw_scatterplot","text":"produces scatterplot two genes gene signatures.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/draw_scatterplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scatterplot for Gene Expression Values ‚Äî draw_scatterplot","text":"","code":"draw_scatterplot(   object,   assay_name,   x_spec,   y_spec,   color_var = NULL,   facet_var = NULL,   smooth_method = c(\"lm\", \"loess\", \"none\") )"},{"path":"https://insightsengineering.github.io/hermes/reference/draw_scatterplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scatterplot for Gene Expression Values ‚Äî draw_scatterplot","text":"object (AnyHermesData) input. assay_name (string) selects assay input. x_spec (GeneSpec) gene specification x-axis. y_spec (GeneSpec) gene specification y-axis. color_var (string NULL) optional color variable, taken input sample variables. facet_var (string NULL) optional faceting variable, taken input sample variables. smooth_method (string) smoothing method use, either linear regression line (lm), local polynomial regression (loess) none.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/draw_scatterplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scatterplot for Gene Expression Values ‚Äî draw_scatterplot","text":"ggplot scatterplot.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/draw_scatterplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scatterplot for Gene Expression Values ‚Äî draw_scatterplot","text":"","code":"object <- hermes_data g <- genes(object)  draw_scatterplot(   object,   assay_name = \"counts\",   facet_var = NULL,   x_spec = gene_spec(c(A = g[1])),   y_spec = gene_spec(g[2]),   color = \"RACE\" )   object2 <- object %>%   add_quality_flags() %>%   filter() %>%   normalize() g2 <- genes(object2)  draw_scatterplot(   object2,   assay_name = \"tpm\",   facet_var = \"SEX\",   x_spec = gene_spec(g2[1:10], colMeans, \"Mean\"),   y_spec = gene_spec(g2[11:20], colMedians, \"Median\"),   smooth_method = \"loess\" )"},{"path":"https://insightsengineering.github.io/hermes/reference/expression_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Example ExpressionSet Data ‚Äî expression_set","title":"Example ExpressionSet Data ‚Äî expression_set","text":"example data can used try conversion Biobase::ExpressionSet object HermesData object.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/expression_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example ExpressionSet Data ‚Äî expression_set","text":"","code":"expression_set"},{"path":"https://insightsengineering.github.io/hermes/reference/expression_set.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example ExpressionSet Data ‚Äî expression_set","text":"Biobase::ExpressionSet object 20 samples covering 5085 features (Entrez gene IDs).","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/expression_set.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example ExpressionSet Data ‚Äî expression_set","text":"artificial dataset designed resemble real data.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/hermes/reference/extra_data_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Extra Variable Names Accessor Methods ‚Äî extra_data_names","title":"Extra Variable Names Accessor Methods ‚Äî extra_data_names","text":"methods access names variables colData() rowData() object required design. can additional sample patient characteristics, gene characteristics.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/extra_data_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extra Variable Names Accessor Methods ‚Äî extra_data_names","text":"","code":"extraColDataNames(x, ...)  # S4 method for AnyHermesData extraColDataNames(x, ...)  extraRowDataNames(x, ...)  # S4 method for AnyHermesData extraRowDataNames(x, ...)"},{"path":"https://insightsengineering.github.io/hermes/reference/extra_data_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extra Variable Names Accessor Methods ‚Äî extra_data_names","text":"x (AnyHermesData) object. ... used.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/extra_data_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extra Variable Names Accessor Methods ‚Äî extra_data_names","text":"character vector additional variable names either colData() rowData().","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/extra_data_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extra Variable Names Accessor Methods ‚Äî extra_data_names","text":"","code":"object <- hermes_data extraColDataNames(object) #>  [1] \"Filename\" \"SampleID\" \"AGEGRP\"   \"AGE18\"    \"STDDRS\"   \"STDDRSD\"  #>  [7] \"STDSSDT\"  \"TRTDRS\"   \"TRTDRSD\"  \"BHDCIRC\"  \"BHDCIRCU\" \"ADAFL\"    #> [13] \"BLANP\"    \"BKPS\"     \"BLKS\"     \"BTANNER\"  \"FRPST\"    \"DURIDX\"   #> [19] \"DURSAF\"   \"DURSUR\"   \"LNTHRPY\"  \"AENCIFL\"  \"STUDYID\"  \"USUBJID\"  #> [25] \"RFSTDTC\"  \"RFENDTC\"  \"RFXSTDTC\" \"RFXENDTC\" \"RFICDTC\"  \"RFPENDTC\" #> [31] \"DTHDTC\"   \"DTHFL\"    \"SITEID\"   \"INVID\"    \"AGE\"      \"AGEU\"     #> [37] \"SEX\"      \"RACE\"     \"ETHNIC\"   \"ARMCD\"    \"ARM\"      \"ACTARMCD\" #> [43] \"ACTARM\"   \"COUNTRY\"  \"DMDTC\"    \"DMDY\"     \"BAGE\"     \"BAGEU\"    #> [49] \"BWT\"      \"BWTU\"     \"BHT\"      \"BHTU\"     \"BBMI\"     \"ITTFL\"    #> [55] \"SAFFL\"    \"INFCODT\"  \"RANDDT\"   \"TRTSDTC\"  \"TRTSDTM\"  \"TRTSTMF\"  #> [61] \"TRTEDTM\"  \"TRTETMF\"  \"TRTDUR\"   \"DISCSTUD\" \"DISCDEAT\" \"DISCAE\"   #> [67] \"DISTRTFL\" \"AEWITHFL\" \"ALIVDT\"   \"COHORT\"   \"TTYPE\"    \"STDSSDY\"  extraRowDataNames(object) #> [1] \"GeneID\"          \"SYMBOL\"          \"chromosome_name\""},{"path":"https://insightsengineering.github.io/hermes/reference/filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter AnyHermesData on Subset Passing Default QC Flags ‚Äî filter","title":"Filter AnyHermesData on Subset Passing Default QC Flags ‚Äî filter","text":"filters AnyHermesData object using default QC flags required annotations.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter AnyHermesData on Subset Passing Default QC Flags ‚Äî filter","text":"","code":"filter(object, ...)  # S4 method for AnyHermesData filter(object, what = c(\"genes\", \"samples\"), annotation_required = \"size\")  # S4 method for data.frame filter(object, ...)  # S4 method for ts filter(object, ...)"},{"path":"https://insightsengineering.github.io/hermes/reference/filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter AnyHermesData on Subset Passing Default QC Flags ‚Äî filter","text":"object (AnyHermesData) object filter. ... additional arguments. (character) specify whether apply filter genes / samples. annotation_required (character) names required annotation columns genes. used genes filtered.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter AnyHermesData on Subset Passing Default QC Flags ‚Äî filter","text":"filtered AnyHermesData object.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/filter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter AnyHermesData on Subset Passing Default QC Flags ‚Äî filter","text":"genes without low expression (low_expression_flag) samples without low depth (low_depth_flag) technical failure (tech_failure_flag) remain returned filtered object. Also required gene annotation columns can specified, genes complete columns filtered . default size column, needed default normalization object.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/filter.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Filter AnyHermesData on Subset Passing Default QC Flags ‚Äî filter","text":"internal implementation use subset() method since requires non-standard evaluation arguments.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/filter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter AnyHermesData on Subset Passing Default QC Flags ‚Äî filter","text":"","code":"a <- hermes_data dim(a) #> [1] 5085   20  # Filter genes and samples on default QC flags. result <- filter(a) dim(result) #> [1] 2064   18  # Filter only genes without low expression. result <- filter(a, what = \"genes\")  # Filter only samples with low depth and technical failure. result <- filter(a, what = \"samples\")  # Filter only genes, and require certain annotations to be present. result <- filter(a, what = \"genes\", annotation_required = c(\"size\"))"},{"path":"https://insightsengineering.github.io/hermes/reference/gene_spec.html","id":null,"dir":"Reference","previous_headings":"","what":"GeneSpec Constructor ‚Äî gene_spec","title":"GeneSpec Constructor ‚Äî gene_spec","text":"Creates new GeneSpec object.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/gene_spec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GeneSpec Constructor ‚Äî gene_spec","text":"","code":"gene_spec(genes = NULL, fun = NULL, fun_name = deparse(substitute(fun)))"},{"path":"https://insightsengineering.github.io/hermes/reference/gene_spec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GeneSpec Constructor ‚Äî gene_spec","text":"genes (named character NULL) gene IDs, names used labels available. fun (function NULL) summary function. NULL used multiple genes summarized returned matrix extract method. fun_name (string) name summary function.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/gene_spec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GeneSpec Constructor ‚Äî gene_spec","text":"new GeneSpec object.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/gene_spec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GeneSpec Constructor ‚Äî gene_spec","text":"","code":"gene_spec(\"GeneID:11185\") #> <GeneSpec> #>   Public: #>     clone: function (deep = FALSE)  #>     extract: function (assay)  #>     extract_data_frame: function (assay)  #>     get_gene_labels: function (genes = self$get_genes())  #>     get_genes: function ()  #>     get_label: function (genes = self$get_genes())  #>     initialize: function (genes = NULL, fun = NULL, fun_name = deparse(substitute(fun)))  #>     returns_vector: function ()  #>   Private: #>     fun: NULL #>     fun_name: NULL #>     gene_labels: GeneID:11185 #>     genes: GeneID:11185 gene_spec(c(\"GeneID:11185\", \"GeneID:10677\", \"GeneID:101928428\"), fun = colMeans) #> <GeneSpec> #>   Public: #>     clone: function (deep = FALSE)  #>     extract: function (assay)  #>     extract_data_frame: function (assay)  #>     get_gene_labels: function (genes = self$get_genes())  #>     get_genes: function ()  #>     get_label: function (genes = self$get_genes())  #>     initialize: function (genes = NULL, fun = NULL, fun_name = deparse(substitute(fun)))  #>     returns_vector: function ()  #>   Private: #>     fun: function (x, na.rm = FALSE, dims = 1, ...)  #>     fun_name: colMeans #>     gene_labels: GeneID:11185 GeneID:10677 GeneID:101928428 #>     genes: GeneID:11185 GeneID:10677 GeneID:101928428"},{"path":"https://insightsengineering.github.io/hermes/reference/genes.html","id":null,"dir":"Reference","previous_headings":"","what":"Gene IDs Accessor ‚Äî genes","title":"Gene IDs Accessor ‚Äî genes","text":"Access gene IDs, .e. row names, AnyHermesData object nicely named accessor method.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/genes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gene IDs Accessor ‚Äî genes","text":"","code":"genes(object)  # S4 method for AnyHermesData genes(object)"},{"path":"https://insightsengineering.github.io/hermes/reference/genes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gene IDs Accessor ‚Äî genes","text":"object (AnyHermesData) input.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/genes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gene IDs Accessor ‚Äî genes","text":"character vector gene IDs.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/hermes/reference/genes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gene IDs Accessor ‚Äî genes","text":"","code":"a <- hermes_data genes(a) #>    [1] \"GeneID:11185\"     \"GeneID:10677\"     \"GeneID:101928428\" #>    [4] \"GeneID:100422835\" \"GeneID:102466731\" \"GeneID:64881\"     #>    [7] \"GeneID:286205\"    \"GeneID:8365\"      \"GeneID:6804\"      #>   [10] \"GeneID:100423018\" \"GeneID:23526\"     \"GeneID:102724693\" #>   [13] \"GeneID:10755\"     \"GeneID:283150\"    \"GeneID:101929282\" #>   [16] \"GeneID:57630\"     \"GeneID:101930284\" \"GeneID:102724480\" #>   [19] \"GeneID:9724\"      \"GeneID:647166\"    \"GeneID:339010\"    #>   [22] \"GeneID:4595\"      \"GeneID:11019\"     \"GeneID:407020\"    #>   [25] \"GeneID:116154\"    \"GeneID:27336\"     \"GeneID:51455\"     #>   [28] \"GeneID:26225\"     \"GeneID:102723987\" \"GeneID:5828\"      #>   [31] \"GeneID:100533181\" \"GeneID:10940\"     \"GeneID:55290\"     #>   [34] \"GeneID:2790\"      \"GeneID:101928197\" \"GeneID:277\"       #>   [37] \"GeneID:26818\"     \"GeneID:574033\"    \"GeneID:101929014\" #>   [40] \"GeneID:7200\"      \"GeneID:7386\"      \"GeneID:100422893\" #>   [43] \"GeneID:11189\"     \"GeneID:100130331\" \"GeneID:102723828\" #>   [46] \"GeneID:54936\"     \"GeneID:1088\"      \"GeneID:283234\"    #>   [49] \"GeneID:100505495\" \"GeneID:345462\"    \"GeneID:101927039\" #>   [52] \"GeneID:79908\"     \"GeneID:100130673\" \"GeneID:6277\"      #>   [55] \"GeneID:100846993\" \"GeneID:284836\"    \"GeneID:151827\"    #>   [58] \"GeneID:100507616\" \"GeneID:112812\"    \"GeneID:51098\"     #>   [61] \"GeneID:84278\"     \"GeneID:256643\"    \"GeneID:101927809\" #>   [64] \"GeneID:3149\"      \"GeneID:101929908\" \"GeneID:80201\"     #>   [67] \"GeneID:1553\"      \"GeneID:10966\"     \"GeneID:101928449\" #>   [70] \"GeneID:80024\"     \"GeneID:101928694\" \"GeneID:80305\"     #>   [73] \"GeneID:101927496\" \"GeneID:101927407\" \"GeneID:100996349\" #>   [76] \"GeneID:283624\"    \"GeneID:1057\"      \"GeneID:100287205\" #>   [79] \"GeneID:10919\"     \"GeneID:5686\"      \"GeneID:100302242\" #>   [82] \"GeneID:3454\"      \"GeneID:102725213\" \"GeneID:101930449\" #>   [85] \"GeneID:101927483\" \"GeneID:114770\"    \"GeneID:101928266\" #>   [88] \"GeneID:101927348\" \"GeneID:222894\"    \"GeneID:100316904\" #>   [91] \"GeneID:55128\"     \"GeneID:100874195\" \"GeneID:8685\"      #>   [94] \"GeneID:101927044\" \"GeneID:102466738\" \"GeneID:8295\"      #>   [97] \"GeneID:85456\"     \"GeneID:102725169\" \"GeneID:101927105\" #>  [100] \"GeneID:643355\"    \"GeneID:56931\"     \"GeneID:8354\"      #>  [103] \"GeneID:9717\"      \"GeneID:85016\"     \"GeneID:26222\"     #>  [106] \"GeneID:102725324\" \"GeneID:102724216\" \"GeneID:27333\"     #>  [109] \"GeneID:26999\"     \"GeneID:11212\"     \"GeneID:9024\"      #>  [112] \"GeneID:4359\"      \"GeneID:101927249\" \"GeneID:2055\"      #>  [115] \"GeneID:8325\"      \"GeneID:253982\"    \"GeneID:81544\"     #>  [118] \"GeneID:390067\"    \"GeneID:4261\"      \"GeneID:7472\"      #>  [121] \"GeneID:27299\"     \"GeneID:9383\"      \"GeneID:113730\"    #>  [124] \"GeneID:25984\"     \"GeneID:134265\"    \"GeneID:4141\"      #>  [127] \"GeneID:56651\"     \"GeneID:345456\"    \"GeneID:932\"       #>  [130] \"GeneID:3690\"      \"GeneID:22848\"     \"GeneID:102723454\" #>  [133] \"GeneID:100616330\" \"GeneID:7171\"      \"GeneID:102723659\" #>  [136] \"GeneID:9473\"      \"GeneID:391123\"    \"GeneID:9811\"      #>  [139] \"GeneID:147525\"    \"GeneID:338817\"    \"GeneID:219874\"    #>  [142] \"GeneID:3653\"      \"GeneID:221120\"    \"GeneID:102723329\" #>  [145] \"GeneID:100616419\" \"GeneID:440311\"    \"GeneID:220136\"    #>  [148] \"GeneID:100528022\" \"GeneID:64426\"     \"GeneID:114044\"    #>  [151] \"GeneID:574502\"    \"GeneID:378925\"    \"GeneID:54932\"     #>  [154] \"GeneID:2176\"      \"GeneID:124997\"    \"GeneID:57486\"     #>  [157] \"GeneID:2064\"      \"GeneID:340542\"    \"GeneID:10150\"     #>  [160] \"GeneID:10634\"     \"GeneID:25898\"     \"GeneID:126014\"    #>  [163] \"GeneID:390561\"    \"GeneID:100616136\" \"GeneID:8811\"      #>  [166] \"GeneID:100144748\" \"GeneID:693135\"    \"GeneID:4250\"      #>  [169] \"GeneID:10903\"     \"GeneID:56649\"     \"GeneID:440561\"    #>  [172] \"GeneID:958\"       \"GeneID:101927271\" \"GeneID:79092\"     #>  [175] \"GeneID:646670\"    \"GeneID:653513\"    \"GeneID:677837\"    #>  [178] \"GeneID:55795\"     \"GeneID:93349\"     \"GeneID:440570\"    #>  [181] \"GeneID:494332\"    \"GeneID:286177\"    \"GeneID:11156\"     #>  [184] \"GeneID:57864\"     \"GeneID:285766\"    \"GeneID:55776\"     #>  [187] \"GeneID:10804\"     \"GeneID:168451\"    \"GeneID:101930416\" #>  [190] \"GeneID:9377\"      \"GeneID:344758\"    \"GeneID:102725183\" #>  [193] \"GeneID:101929401\" \"GeneID:574494\"    \"GeneID:344967\"    #>  [196] \"GeneID:84331\"     \"GeneID:440386\"    \"GeneID:54504\"     #>  [199] \"GeneID:25893\"     \"GeneID:7109\"      \"GeneID:203100\"    #>  [202] \"GeneID:100289678\" \"GeneID:102724405\" \"GeneID:117608\"    #>  [205] \"GeneID:101927457\" \"GeneID:27044\"     \"GeneID:64396\"     #>  [208] \"GeneID:119692\"    \"GeneID:282616\"    \"GeneID:26716\"     #>  [211] \"GeneID:64236\"     \"GeneID:344892\"    \"GeneID:100996485\" #>  [214] \"GeneID:645434\"    \"GeneID:344905\"    \"GeneID:102465140\" #>  [217] \"GeneID:57037\"     \"GeneID:10777\"     \"GeneID:26276\"     #>  [220] \"GeneID:9435\"      \"GeneID:204851\"    \"GeneID:102723952\" #>  [223] \"GeneID:102465839\" \"GeneID:5201\"      \"GeneID:92521\"     #>  [226] \"GeneID:258\"       \"GeneID:5893\"      \"GeneID:3558\"      #>  [229] \"GeneID:9880\"      \"GeneID:64215\"     \"GeneID:2894\"      #>  [232] \"GeneID:389125\"    \"GeneID:102724585\" \"GeneID:102725138\" #>  [235] \"GeneID:100507054\" \"GeneID:340990\"    \"GeneID:102724534\" #>  [238] \"GeneID:100073347\" \"GeneID:387103\"    \"GeneID:284424\"    #>  [241] \"GeneID:693164\"    \"GeneID:100288637\" \"GeneID:390\"       #>  [244] \"GeneID:102724735\" \"GeneID:101926971\" \"GeneID:100874158\" #>  [247] \"GeneID:56943\"     \"GeneID:100131089\" \"GeneID:100500847\" #>  [250] \"GeneID:56923\"     \"GeneID:132946\"    \"GeneID:57448\"     #>  [253] \"GeneID:146956\"    \"GeneID:64284\"     \"GeneID:100271722\" #>  [256] \"GeneID:27352\"     \"GeneID:65217\"     \"GeneID:3065\"      #>  [259] \"GeneID:102724670\" \"GeneID:124975\"    \"GeneID:1431\"      #>  [262] \"GeneID:2194\"      \"GeneID:8318\"      \"GeneID:6144\"      #>  [265] \"GeneID:55907\"     \"GeneID:102725172\" \"GeneID:23401\"     #>  [268] \"GeneID:102725406\" \"GeneID:53828\"     \"GeneID:6510\"      #>  [271] \"GeneID:4712\"      \"GeneID:1911\"      \"GeneID:85478\"     #>  [274] \"GeneID:102723898\" \"GeneID:399687\"    \"GeneID:574411\"    #>  [277] \"GeneID:5324\"      \"GeneID:10135\"     \"GeneID:4300\"      #>  [280] \"GeneID:10818\"     \"GeneID:129401\"    \"GeneID:92305\"     #>  [283] \"GeneID:29780\"     \"GeneID:22941\"     \"GeneID:85300\"     #>  [286] \"GeneID:23237\"     \"GeneID:101929591\" \"GeneID:94239\"     #>  [289] \"GeneID:3157\"      \"GeneID:57718\"     \"GeneID:81550\"     #>  [292] \"GeneID:51411\"     \"GeneID:170627\"    \"GeneID:170825\"    #>  [295] \"GeneID:101927888\" \"GeneID:101929849\" \"GeneID:101929651\" #>  [298] \"GeneID:171546\"    \"GeneID:126668\"    \"GeneID:6730\"      #>  [301] \"GeneID:101929950\" \"GeneID:728492\"    \"GeneID:160\"       #>  [304] \"GeneID:101928156\" \"GeneID:1207\"      \"GeneID:140732\"    #>  [307] \"GeneID:2114\"      \"GeneID:101929425\" \"GeneID:4775\"      #>  [310] \"GeneID:8332\"      \"GeneID:55731\"     \"GeneID:7764\"      #>  [313] \"GeneID:85509\"     \"GeneID:101929756\" \"GeneID:2550\"      #>  [316] \"GeneID:151176\"    \"GeneID:145820\"    \"GeneID:100287616\" #>  [319] \"GeneID:84060\"     \"GeneID:1776\"      \"GeneID:8635\"      #>  [322] \"GeneID:102724839\" \"GeneID:283871\"    \"GeneID:91662\"     #>  [325] \"GeneID:142827\"    \"GeneID:10865\"     \"GeneID:100302184\" #>  [328] \"GeneID:504191\"    \"GeneID:833\"       \"GeneID:100422979\" #>  [331] \"GeneID:101930106\" \"GeneID:56169\"     \"GeneID:101927332\" #>  [334] \"GeneID:54793\"     \"GeneID:9617\"      \"GeneID:84798\"     #>  [337] \"GeneID:387748\"    \"GeneID:55622\"     \"GeneID:26057\"     #>  [340] \"GeneID:57646\"     \"GeneID:100049587\" \"GeneID:338588\"    #>  [343] \"GeneID:2350\"      \"GeneID:114880\"    \"GeneID:6721\"      #>  [346] \"GeneID:91445\"     \"GeneID:4836\"      \"GeneID:102723565\" #>  [349] \"GeneID:64853\"     \"GeneID:552891\"    \"GeneID:9123\"      #>  [352] \"GeneID:102724591\" \"GeneID:7596\"      \"GeneID:26098\"     #>  [355] \"GeneID:10652\"     \"GeneID:1580\"      \"GeneID:57405\"     #>  [358] \"GeneID:100874137\" \"GeneID:2009\"      \"GeneID:4734\"      #>  [361] \"GeneID:103581031\" \"GeneID:101930440\" \"GeneID:100033804\" #>  [364] \"GeneID:100996574\" \"GeneID:102465464\" \"GeneID:101241892\" #>  [367] \"GeneID:51567\"     \"GeneID:101929675\" \"GeneID:9254\"      #>  [370] \"GeneID:84890\"     \"GeneID:51804\"     \"GeneID:55889\"     #>  [373] \"GeneID:55630\"     \"GeneID:4541\"      \"GeneID:101928654\" #>  [376] \"GeneID:83446\"     \"GeneID:340441\"    \"GeneID:29063\"     #>  [379] \"GeneID:100132356\" \"GeneID:1400\"      \"GeneID:51517\"     #>  [382] \"GeneID:196374\"    \"GeneID:57180\"     \"GeneID:58510\"     #>  [385] \"GeneID:348174\"    \"GeneID:101929493\" \"GeneID:57231\"     #>  [388] \"GeneID:100847048\" \"GeneID:403273\"    \"GeneID:1947\"      #>  [391] \"GeneID:5858\"      \"GeneID:644093\"    \"GeneID:896\"       #>  [394] \"GeneID:102465489\" \"GeneID:729025\"    \"GeneID:196385\"    #>  [397] \"GeneID:283045\"    \"GeneID:5832\"      \"GeneID:101927391\" #>  [400] \"GeneID:1787\"      \"GeneID:4850\"      \"GeneID:80153\"     #>  [403] \"GeneID:124044\"    \"GeneID:10094\"     \"GeneID:84070\"     #>  [406] \"GeneID:101929994\" \"GeneID:100505692\" \"GeneID:203447\"    #>  [409] \"GeneID:1193\"      \"GeneID:102724927\" \"GeneID:4899\"      #>  [412] \"GeneID:6038\"      \"GeneID:222546\"    \"GeneID:83895\"     #>  [415] \"GeneID:102724811\" \"GeneID:4736\"      \"GeneID:147945\"    #>  [418] \"GeneID:84206\"     \"GeneID:55698\"     \"GeneID:3801\"      #>  [421] \"GeneID:645974\"    \"GeneID:767591\"    \"GeneID:56156\"     #>  [424] \"GeneID:26973\"     \"GeneID:9288\"      \"GeneID:327657\"    #>  [427] \"GeneID:7545\"      \"GeneID:407030\"    \"GeneID:4000\"      #>  [430] \"GeneID:100302158\" \"GeneID:102724232\" \"GeneID:58472\"     #>  [433] \"GeneID:9486\"      \"GeneID:8658\"      \"GeneID:56882\"     #>  [436] \"GeneID:51233\"     \"GeneID:102723976\" \"GeneID:390667\"    #>  [439] \"GeneID:347736\"    \"GeneID:100500842\" \"GeneID:144125\"    #>  [442] \"GeneID:79473\"     \"GeneID:153443\"    \"GeneID:283483\"    #>  [445] \"GeneID:101928947\" \"GeneID:101929628\" \"GeneID:3007\"      #>  [448] \"GeneID:154215\"    \"GeneID:4051\"      \"GeneID:345643\"    #>  [451] \"GeneID:101927670\" \"GeneID:102725405\" \"GeneID:100033417\" #>  [454] \"GeneID:85364\"     \"GeneID:1603\"      \"GeneID:90799\"     #>  [457] \"GeneID:2796\"      \"GeneID:23753\"     \"GeneID:55188\"     #>  [460] \"GeneID:101927722\" \"GeneID:284403\"    \"GeneID:338662\"    #>  [463] \"GeneID:474152\"    \"GeneID:143570\"    \"GeneID:101927507\" #>  [466] \"GeneID:100529209\" \"GeneID:574\"       \"GeneID:54101\"     #>  [469] \"GeneID:574465\"    \"GeneID:101928268\" \"GeneID:388695\"    #>  [472] \"GeneID:574447\"    \"GeneID:80313\"     \"GeneID:1071\"      #>  [475] \"GeneID:4628\"      \"GeneID:1176\"      \"GeneID:389906\"    #>  [478] \"GeneID:100616356\" \"GeneID:390181\"    \"GeneID:387787\"    #>  [481] \"GeneID:4988\"      \"GeneID:64101\"     \"GeneID:7021\"      #>  [484] \"GeneID:100500857\" \"GeneID:5089\"      \"GeneID:6860\"      #>  [487] \"GeneID:56131\"     \"GeneID:6533\"      \"GeneID:101927207\" #>  [490] \"GeneID:6262\"      \"GeneID:129450\"    \"GeneID:84750\"     #>  [493] \"GeneID:8370\"      \"GeneID:3832\"      \"GeneID:100996822\" #>  [496] \"GeneID:5961\"      \"GeneID:389124\"    \"GeneID:100616498\" #>  [499] \"GeneID:4618\"      \"GeneID:114960\"    \"GeneID:66008\"     #>  [502] \"GeneID:102723988\" \"GeneID:136242\"    \"GeneID:8242\"      #>  [505] \"GeneID:339302\"    \"GeneID:6431\"      \"GeneID:100313895\" #>  [508] \"GeneID:100381270\" \"GeneID:407043\"    \"GeneID:102723712\" #>  [511] \"GeneID:102724139\" \"GeneID:402778\"    \"GeneID:1647\"      #>  [514] \"GeneID:63874\"     \"GeneID:10149\"     \"GeneID:9344\"      #>  [517] \"GeneID:441455\"    \"GeneID:4539\"      \"GeneID:56140\"     #>  [520] \"GeneID:2827\"      \"GeneID:1475\"      \"GeneID:392509\"    #>  [523] \"GeneID:8763\"      \"GeneID:102465458\" \"GeneID:56242\"     #>  [526] \"GeneID:2180\"      \"GeneID:6522\"      \"GeneID:7570\"      #>  [529] \"GeneID:90835\"     \"GeneID:80301\"     \"GeneID:102724294\" #>  [532] \"GeneID:102466757\" \"GeneID:613\"       \"GeneID:101928555\" #>  [535] \"GeneID:664613\"    \"GeneID:8969\"      \"GeneID:26538\"     #>  [538] \"GeneID:100379661\" \"GeneID:402682\"    \"GeneID:653145\"    #>  [541] \"GeneID:101928207\" \"GeneID:9245\"      \"GeneID:51154\"     #>  [544] \"GeneID:727677\"    \"GeneID:102723786\" \"GeneID:720\"       #>  [547] \"GeneID:6160\"      \"GeneID:3936\"      \"GeneID:101930523\" #>  [550] \"GeneID:100506302\" \"GeneID:4026\"      \"GeneID:641373\"    #>  [553] \"GeneID:101929865\" \"GeneID:4858\"      \"GeneID:1622\"      #>  [556] \"GeneID:150248\"    \"GeneID:100506393\" \"GeneID:197003\"    #>  [559] \"GeneID:3083\"      \"GeneID:64518\"     \"GeneID:6617\"      #>  [562] \"GeneID:100129534\" \"GeneID:344148\"    \"GeneID:10460\"     #>  [565] \"GeneID:100313838\" \"GeneID:130752\"    \"GeneID:102724607\" #>  [568] \"GeneID:8985\"      \"GeneID:84793\"     \"GeneID:9546\"      #>  [571] \"GeneID:8667\"      \"GeneID:7319\"      \"GeneID:101926901\" #>  [574] \"GeneID:387254\"    \"GeneID:129790\"    \"GeneID:50700\"     #>  [577] \"GeneID:4148\"      \"GeneID:5191\"      \"GeneID:401944\"    #>  [580] \"GeneID:101926983\" \"GeneID:102725071\" \"GeneID:101928872\" #>  [583] \"GeneID:101928729\" \"GeneID:337867\"    \"GeneID:2040\"      #>  [586] \"GeneID:151009\"    \"GeneID:6774\"      \"GeneID:101930516\" #>  [589] \"GeneID:27239\"     \"GeneID:9527\"      \"GeneID:102724299\" #>  [592] \"GeneID:6405\"      \"GeneID:10623\"     \"GeneID:100616165\" #>  [595] \"GeneID:84514\"     \"GeneID:146336\"    \"GeneID:11316\"     #>  [598] \"GeneID:4794\"      \"GeneID:5778\"      \"GeneID:25833\"     #>  [601] \"GeneID:8337\"      \"GeneID:9534\"      \"GeneID:4985\"      #>  [604] \"GeneID:64805\"     \"GeneID:116337\"    \"GeneID:83548\"     #>  [607] \"GeneID:25828\"     \"GeneID:84440\"     \"GeneID:10778\"     #>  [610] \"GeneID:387978\"    \"GeneID:773\"       \"GeneID:390059\"    #>  [613] \"GeneID:221481\"    \"GeneID:3337\"      \"GeneID:841\"       #>  [616] \"GeneID:653645\"    \"GeneID:102725283\" \"GeneID:6737\"      #>  [619] \"GeneID:102724312\" \"GeneID:117581\"    \"GeneID:321\"       #>  [622] \"GeneID:101929410\" \"GeneID:27201\"     \"GeneID:81890\"     #>  [625] \"GeneID:10612\"     \"GeneID:128859\"    \"GeneID:100505989\" #>  [628] \"GeneID:7515\"      \"GeneID:27334\"     \"GeneID:64092\"     #>  [631] \"GeneID:102723603\" \"GeneID:51297\"     \"GeneID:7047\"      #>  [634] \"GeneID:22987\"     \"GeneID:101928722\" \"GeneID:27146\"     #>  [637] \"GeneID:728283\"    \"GeneID:100302140\" \"GeneID:102724285\" #>  [640] \"GeneID:83889\"     \"GeneID:3972\"      \"GeneID:8458\"      #>  [643] \"GeneID:64427\"     \"GeneID:100500823\" \"GeneID:10446\"     #>  [646] \"GeneID:27327\"     \"GeneID:54470\"     \"GeneID:102725185\" #>  [649] \"GeneID:23500\"     \"GeneID:55215\"     \"GeneID:101927191\" #>  [652] \"GeneID:83650\"     \"GeneID:152641\"    \"GeneID:102723992\" #>  [655] \"GeneID:84435\"     \"GeneID:6647\"      \"GeneID:178\"       #>  [658] \"GeneID:7733\"      \"GeneID:101930353\" \"GeneID:8460\"      #>  [661] \"GeneID:255119\"    \"GeneID:100996713\" \"GeneID:4047\"      #>  [664] \"GeneID:102725485\" \"GeneID:65008\"     \"GeneID:113115\"    #>  [667] \"GeneID:728741\"    \"GeneID:100287364\" \"GeneID:28960\"     #>  [670] \"GeneID:255239\"    \"GeneID:729683\"    \"GeneID:25895\"     #>  [673] \"GeneID:102466200\" \"GeneID:27133\"     \"GeneID:100128731\" #>  [676] \"GeneID:100616487\" \"GeneID:11018\"     \"GeneID:2967\"      #>  [679] \"GeneID:10466\"     \"GeneID:5563\"      \"GeneID:100128993\" #>  [682] \"GeneID:387319\"    \"GeneID:54544\"     \"GeneID:23517\"     #>  [685] \"GeneID:102465445\" \"GeneID:101241902\" \"GeneID:167838\"    #>  [688] \"GeneID:414062\"    \"GeneID:100505887\" \"GeneID:339803\"    #>  [691] \"GeneID:54097\"     \"GeneID:8907\"      \"GeneID:8735\"      #>  [694] \"GeneID:101340250\" \"GeneID:101929467\" \"GeneID:101929350\" #>  [697] \"GeneID:23127\"     \"GeneID:101930124\" \"GeneID:8852\"      #>  [700] \"GeneID:100874002\" \"GeneID:646892\"    \"GeneID:100874087\" #>  [703] \"GeneID:87769\"     \"GeneID:100126307\" \"GeneID:26291\"     #>  [706] \"GeneID:9085\"      \"GeneID:220416\"    \"GeneID:120376\"    #>  [709] \"GeneID:10526\"     \"GeneID:90990\"     \"GeneID:81035\"     #>  [712] \"GeneID:100129550\" \"GeneID:100873985\" \"GeneID:28971\"     #>  [715] \"GeneID:400612\"    \"GeneID:606293\"    \"GeneID:256281\"    #>  [718] \"GeneID:64096\"     \"GeneID:9114\"      \"GeneID:8161\"      #>  [721] \"GeneID:102724697\" \"GeneID:100873969\" \"GeneID:100506974\" #>  [724] \"GeneID:101929357\" \"GeneID:375056\"    \"GeneID:100033424\" #>  [727] \"GeneID:2577\"      \"GeneID:441687\"    \"GeneID:101929918\" #>  [730] \"GeneID:4692\"      \"GeneID:3040\"      \"GeneID:55729\"     #>  [733] \"GeneID:151188\"    \"GeneID:653123\"    \"GeneID:102723954\" #>  [736] \"GeneID:7433\"      \"GeneID:51388\"     \"GeneID:80059\"     #>  [739] \"GeneID:139562\"    \"GeneID:392188\"    \"GeneID:100302135\" #>  [742] \"GeneID:439\"       \"GeneID:100101938\" \"GeneID:345193\"    #>  [745] \"GeneID:102725008\" \"GeneID:390084\"    \"GeneID:81532\"     #>  [748] \"GeneID:341416\"    \"GeneID:619555\"    \"GeneID:103752554\" #>  [751] \"GeneID:7484\"      \"GeneID:6910\"      \"GeneID:653361\"    #>  [754] \"GeneID:100507674\" \"GeneID:400940\"    \"GeneID:9369\"      #>  [757] \"GeneID:100507006\" \"GeneID:102466726\" \"GeneID:348793\"    #>  [760] \"GeneID:132\"       \"GeneID:84146\"     \"GeneID:100505909\" #>  [763] \"GeneID:100009676\" \"GeneID:102725332\" \"GeneID:102465449\" #>  [766] \"GeneID:51257\"     \"GeneID:7062\"      \"GeneID:100288485\" #>  [769] \"GeneID:5197\"      \"GeneID:101928566\" \"GeneID:58486\"     #>  [772] \"GeneID:101927805\" \"GeneID:5016\"      \"GeneID:28316\"     #>  [775] \"GeneID:5317\"      \"GeneID:102724453\" \"GeneID:26809\"     #>  [778] \"GeneID:645323\"    \"GeneID:101929046\" \"GeneID:7044\"      #>  [781] \"GeneID:100996645\" \"GeneID:7274\"      \"GeneID:27328\"     #>  [784] \"GeneID:102725175\" \"GeneID:115653\"    \"GeneID:339669\"    #>  [787] \"GeneID:101929219\" \"GeneID:219981\"    \"GeneID:4549\"      #>  [790] \"GeneID:1901\"      \"GeneID:3237\"      \"GeneID:101929660\" #>  [793] \"GeneID:81494\"     \"GeneID:493911\"    \"GeneID:101927274\" #>  [796] \"GeneID:143888\"    \"GeneID:10404\"     \"GeneID:6360\"      #>  [799] \"GeneID:23593\"     \"GeneID:220979\"    \"GeneID:100616193\" #>  [802] \"GeneID:140775\"    \"GeneID:149111\"    \"GeneID:150290\"    #>  [805] \"GeneID:102723645\" \"GeneID:5921\"      \"GeneID:100130950\" #>  [808] \"GeneID:154907\"    \"GeneID:149351\"    \"GeneID:23155\"     #>  [811] \"GeneID:102800310\" \"GeneID:6285\"      \"GeneID:724031\"    #>  [814] \"GeneID:84057\"     \"GeneID:102724713\" \"GeneID:496\"       #>  [817] \"GeneID:541466\"    \"GeneID:101929941\" \"GeneID:3097\"      #>  [820] \"GeneID:400680\"    \"GeneID:100996379\" \"GeneID:353322\"    #>  [823] \"GeneID:4234\"      \"GeneID:101929384\" \"GeneID:23148\"     #>  [826] \"GeneID:79970\"     \"GeneID:337985\"    \"GeneID:83863\"     #>  [829] \"GeneID:55668\"     \"GeneID:5455\"      \"GeneID:2909\"      #>  [832] \"GeneID:8793\"      \"GeneID:8390\"      \"GeneID:101928907\" #>  [835] \"GeneID:29106\"     \"GeneID:4176\"      \"GeneID:100874296\" #>  [838] \"GeneID:100303755\" \"GeneID:5739\"      \"GeneID:84666\"     #>  [841] \"GeneID:100996694\" \"GeneID:158314\"    \"GeneID:100287226\" #>  [844] \"GeneID:170425\"    \"GeneID:101930421\" \"GeneID:79969\"     #>  [847] \"GeneID:102546227\" \"GeneID:8944\"      \"GeneID:102724664\" #>  [850] \"GeneID:284577\"    \"GeneID:84062\"     \"GeneID:79170\"     #>  [853] \"GeneID:84210\"     \"GeneID:103695364\" \"GeneID:57062\"     #>  [856] \"GeneID:101929411\" \"GeneID:100874081\" \"GeneID:100616386\" #>  [859] \"GeneID:26986\"     \"GeneID:3433\"      \"GeneID:51111\"     #>  [862] \"GeneID:102724014\" \"GeneID:221981\"    \"GeneID:286359\"    #>  [865] \"GeneID:338699\"    \"GeneID:81490\"     \"GeneID:101928747\" #>  [868] \"GeneID:100313843\" \"GeneID:100873945\" \"GeneID:100130876\" #>  [871] \"GeneID:80034\"     \"GeneID:55690\"     \"GeneID:388335\"    #>  [874] \"GeneID:1437\"      \"GeneID:117157\"    \"GeneID:1124\"      #>  [877] \"GeneID:401089\"    \"GeneID:403340\"    \"GeneID:8859\"      #>  [880] \"GeneID:7101\"      \"GeneID:4088\"      \"GeneID:163702\"    #>  [883] \"GeneID:80054\"     \"GeneID:2289\"      \"GeneID:7979\"      #>  [886] \"GeneID:100271846\" \"GeneID:117246\"    \"GeneID:102724150\" #>  [889] \"GeneID:57466\"     \"GeneID:102725495\" \"GeneID:102724194\" #>  [892] \"GeneID:23586\"     \"GeneID:100507458\" \"GeneID:102466873\" #>  [895] \"GeneID:101060386\" \"GeneID:100616196\" \"GeneID:219970\"    #>  [898] \"GeneID:8904\"      \"GeneID:9652\"      \"GeneID:6049\"      #>  [901] \"GeneID:2863\"      \"GeneID:23038\"     \"GeneID:9422\"      #>  [904] \"GeneID:102723331\" \"GeneID:367\"       \"GeneID:102724215\" #>  [907] \"GeneID:56146\"     \"GeneID:2990\"      \"GeneID:100873757\" #>  [910] \"GeneID:101927940\" \"GeneID:101927775\" \"GeneID:9056\"      #>  [913] \"GeneID:100270680\" \"GeneID:388436\"    \"GeneID:100874100\" #>  [916] \"GeneID:26870\"     \"GeneID:101929314\" \"GeneID:2678\"      #>  [919] \"GeneID:147381\"    \"GeneID:3592\"      \"GeneID:79986\"     #>  [922] \"GeneID:347918\"    \"GeneID:949\"       \"GeneID:57048\"     #>  [925] \"GeneID:388555\"    \"GeneID:284729\"    \"GeneID:102725116\" #>  [928] \"GeneID:101927010\" \"GeneID:255738\"    \"GeneID:134829\"    #>  [931] \"GeneID:5295\"      \"GeneID:92345\"     \"GeneID:10517\"     #>  [934] \"GeneID:643749\"    \"GeneID:677815\"    \"GeneID:100422980\" #>  [937] \"GeneID:693144\"    \"GeneID:245802\"    \"GeneID:101926908\" #>  [940] \"GeneID:440695\"    \"GeneID:102466984\" \"GeneID:23168\"     #>  [943] \"GeneID:729759\"    \"GeneID:5924\"      \"GeneID:100422975\" #>  [946] \"GeneID:100507173\" \"GeneID:442914\"    \"GeneID:10253\"     #>  [949] \"GeneID:368\"       \"GeneID:112802\"    \"GeneID:9170\"      #>  [952] \"GeneID:5304\"      \"GeneID:100049076\" \"GeneID:57117\"     #>  [955] \"GeneID:101929805\" \"GeneID:51124\"     \"GeneID:55732\"     #>  [958] \"GeneID:102723563\" \"GeneID:84231\"     \"GeneID:348235\"    #>  [961] \"GeneID:60496\"     \"GeneID:81572\"     \"GeneID:100533997\" #>  [964] \"GeneID:445\"       \"GeneID:89882\"     \"GeneID:102724010\" #>  [967] \"GeneID:100313886\" \"GeneID:8936\"      \"GeneID:101927313\" #>  [970] \"GeneID:101928863\" \"GeneID:254896\"    \"GeneID:4049\"      #>  [973] \"GeneID:89822\"     \"GeneID:100873962\" \"GeneID:51266\"     #>  [976] \"GeneID:100033437\" \"GeneID:56977\"     \"GeneID:10953\"     #>  [979] \"GeneID:84446\"     \"GeneID:101929604\" \"GeneID:64919\"     #>  [982] \"GeneID:257169\"    \"GeneID:100996598\" \"GeneID:1241\"      #>  [985] \"GeneID:56271\"     \"GeneID:148823\"    \"GeneID:23022\"     #>  [988] \"GeneID:10095\"     \"GeneID:84681\"     \"GeneID:89870\"     #>  [991] \"GeneID:158131\"    \"GeneID:693211\"    \"GeneID:100506655\" #>  [994] \"GeneID:50640\"     \"GeneID:51069\"     \"GeneID:10730\"     #>  [997] \"GeneID:406912\"    \"GeneID:406992\"    \"GeneID:2592\"      #> [1000] \"GeneID:677775\"    \"GeneID:101927746\" \"GeneID:1820\"      #> [1003] \"GeneID:101929818\" \"GeneID:94115\"     \"GeneID:25959\"     #> [1006] \"GeneID:140459\"    \"GeneID:6618\"      \"GeneID:51264\"     #> [1009] \"GeneID:127254\"    \"GeneID:139604\"    \"GeneID:101929459\" #> [1012] \"GeneID:57539\"     \"GeneID:10008\"     \"GeneID:80726\"     #> [1015] \"GeneID:51081\"     \"GeneID:91746\"     \"GeneID:448835\"    #> [1018] \"GeneID:241\"       \"GeneID:7832\"      \"GeneID:10437\"     #> [1021] \"GeneID:80270\"     \"GeneID:102724273\" \"GeneID:220\"       #> [1024] \"GeneID:52\"        \"GeneID:7745\"      \"GeneID:27035\"     #> [1027] \"GeneID:261734\"    \"GeneID:100500818\" \"GeneID:102723901\" #> [1030] \"GeneID:57761\"     \"GeneID:101929698\" \"GeneID:728192\"    #> [1033] \"GeneID:131\"       \"GeneID:102724552\" \"GeneID:356\"       #> [1036] \"GeneID:101928458\" \"GeneID:2576\"      \"GeneID:84651\"     #> [1039] \"GeneID:3423\"      \"GeneID:5810\"      \"GeneID:9302\"      #> [1042] \"GeneID:285847\"    \"GeneID:9166\"      \"GeneID:101927628\" #> [1045] \"GeneID:1499\"      \"GeneID:6098\"      \"GeneID:83858\"     #> [1048] \"GeneID:100303749\" \"GeneID:4608\"      \"GeneID:101928374\" #> [1051] \"GeneID:101060602\" \"GeneID:101927281\" \"GeneID:149069\"    #> [1054] \"GeneID:102060414\" \"GeneID:51308\"     \"GeneID:9681\"      #> [1057] \"GeneID:115950\"    \"GeneID:113246\"    \"GeneID:401634\"    #> [1060] \"GeneID:158506\"    \"GeneID:4553\"      \"GeneID:9050\"      #> [1063] \"GeneID:7730\"      \"GeneID:115811\"    \"GeneID:102724141\" #> [1066] \"GeneID:10999\"     \"GeneID:9784\"      \"GeneID:100132247\" #> [1069] \"GeneID:102725055\" \"GeneID:440672\"    \"GeneID:101927187\" #> [1072] \"GeneID:101060458\" \"GeneID:100289650\" \"GeneID:102725180\" #> [1075] \"GeneID:340286\"    \"GeneID:100306951\" \"GeneID:54769\"     #> [1078] \"GeneID:7436\"      \"GeneID:55178\"     \"GeneID:158228\"    #> [1081] \"GeneID:100616254\" \"GeneID:186\"       \"GeneID:101927168\" #> [1084] \"GeneID:100288778\" \"GeneID:101927080\" \"GeneID:126549\"    #> [1087] \"GeneID:102723768\" \"GeneID:27143\"     \"GeneID:3274\"      #> [1090] \"GeneID:221188\"    \"GeneID:54587\"     \"GeneID:114548\"    #> [1093] \"GeneID:101930228\" \"GeneID:89858\"     \"GeneID:100033800\" #> [1096] \"GeneID:80775\"     \"GeneID:64493\"     \"GeneID:11227\"     #> [1099] \"GeneID:54910\"     \"GeneID:101927501\" \"GeneID:102723641\" #> [1102] \"GeneID:526\"       \"GeneID:101927590\" \"GeneID:642846\"    #> [1105] \"GeneID:144535\"    \"GeneID:2038\"      \"GeneID:285834\"    #> [1108] \"GeneID:100874006\" \"GeneID:56479\"     \"GeneID:128360\"    #> [1111] \"GeneID:79665\"     \"GeneID:54482\"     \"GeneID:101929666\" #> [1114] \"GeneID:101929025\" \"GeneID:9854\"      \"GeneID:101929755\" #> [1117] \"GeneID:78996\"     \"GeneID:10666\"     \"GeneID:101929120\" #> [1120] \"GeneID:79783\"     \"GeneID:163049\"    \"GeneID:388931\"    #> [1123] \"GeneID:100302739\" \"GeneID:6642\"      \"GeneID:388795\"    #> [1126] \"GeneID:22953\"     \"GeneID:9543\"      \"GeneID:102724003\" #> [1129] \"GeneID:101928875\" \"GeneID:408263\"    \"GeneID:10239\"     #> [1132] \"GeneID:100190938\" \"GeneID:4627\"      \"GeneID:100616160\" #> [1135] \"GeneID:100130705\" \"GeneID:102465523\" \"GeneID:113540\"    #> [1138] \"GeneID:100129597\" \"GeneID:101928077\" \"GeneID:101927123\" #> [1141] \"GeneID:101928537\" \"GeneID:79718\"     \"GeneID:494513\"    #> [1144] \"GeneID:100129543\" \"GeneID:402160\"    \"GeneID:64418\"     #> [1147] \"GeneID:22955\"     \"GeneID:23616\"     \"GeneID:51534\"     #> [1150] \"GeneID:2326\"      \"GeneID:102724631\" \"GeneID:100128252\" #> [1153] \"GeneID:100133315\" \"GeneID:102723352\" \"GeneID:7050\"      #> [1156] \"GeneID:80099\"     \"GeneID:160140\"    \"GeneID:101927931\" #> [1159] \"GeneID:126328\"    \"GeneID:139081\"    \"GeneID:3084\"      #> [1162] \"GeneID:10476\"     \"GeneID:5723\"      \"GeneID:79654\"     #> [1165] \"GeneID:441666\"    \"GeneID:10382\"     \"GeneID:642423\"    #> [1168] \"GeneID:388552\"    \"GeneID:2717\"      \"GeneID:3673\"      #> [1171] \"GeneID:10435\"     \"GeneID:406980\"    \"GeneID:144100\"    #> [1174] \"GeneID:3567\"      \"GeneID:5818\"      \"GeneID:10280\"     #> [1177] \"GeneID:101929648\" \"GeneID:26521\"     \"GeneID:101928602\" #> [1180] \"GeneID:102724589\" \"GeneID:391109\"    \"GeneID:1154\"      #> [1183] \"GeneID:54813\"     \"GeneID:102466235\" \"GeneID:100422951\" #> [1186] \"GeneID:84752\"     \"GeneID:574498\"    \"GeneID:6700\"      #> [1189] \"GeneID:2625\"      \"GeneID:55193\"     \"GeneID:196383\"    #> [1192] \"GeneID:101928605\" \"GeneID:684959\"    \"GeneID:102465525\" #> [1195] \"GeneID:80032\"     \"GeneID:645683\"    \"GeneID:101927020\" #> [1198] \"GeneID:56999\"     \"GeneID:64928\"     \"GeneID:101928282\" #> [1201] \"GeneID:102724305\" \"GeneID:84705\"     \"GeneID:29102\"     #> [1204] \"GeneID:26292\"     \"GeneID:4973\"      \"GeneID:326340\"    #> [1207] \"GeneID:29109\"     \"GeneID:102724455\" \"GeneID:100507513\" #> [1210] \"GeneID:83758\"     \"GeneID:10398\"     \"GeneID:101929472\" #> [1213] \"GeneID:80774\"     \"GeneID:93010\"     \"GeneID:3224\"      #> [1216] \"GeneID:7058\"      \"GeneID:101929787\" \"GeneID:27338\"     #> [1219] \"GeneID:102724056\" \"GeneID:9705\"      \"GeneID:6597\"      #> [1222] \"GeneID:100500856\" \"GeneID:401138\"    \"GeneID:389903\"    #> [1225] \"GeneID:101929134\" \"GeneID:100505874\" \"GeneID:26108\"     #> [1228] \"GeneID:113157\"    \"GeneID:54480\"     \"GeneID:55974\"     #> [1231] \"GeneID:83998\"     \"GeneID:102723732\" \"GeneID:101929295\" #> [1234] \"GeneID:63970\"     \"GeneID:122509\"    \"GeneID:177\"       #> [1237] \"GeneID:64708\"     \"GeneID:23760\"     \"GeneID:10962\"     #> [1240] \"GeneID:752014\"    \"GeneID:79875\"     \"GeneID:2271\"      #> [1243] \"GeneID:653509\"    \"GeneID:7007\"      \"GeneID:10044\"     #> [1246] \"GeneID:23660\"     \"GeneID:441061\"    \"GeneID:400706\"    #> [1249] \"GeneID:10061\"     \"GeneID:339479\"    \"GeneID:100507472\" #> [1252] \"GeneID:390205\"    \"GeneID:283080\"    \"GeneID:390439\"    #> [1255] \"GeneID:27324\"     \"GeneID:441208\"    \"GeneID:254439\"    #> [1258] \"GeneID:54970\"     \"GeneID:730087\"    \"GeneID:646498\"    #> [1261] \"GeneID:388799\"    \"GeneID:101927244\" \"GeneID:102723874\" #> [1264] \"GeneID:100113384\" \"GeneID:286133\"    \"GeneID:100506518\" #> [1267] \"GeneID:10331\"     \"GeneID:102724497\" \"GeneID:23417\"     #> [1270] \"GeneID:100616372\" \"GeneID:101927003\" \"GeneID:101954273\" #> [1273] \"GeneID:225689\"    \"GeneID:727956\"    \"GeneID:284933\"    #> [1276] \"GeneID:9219\"      \"GeneID:102723581\" \"GeneID:51206\"     #> [1279] \"GeneID:26984\"     \"GeneID:407046\"    \"GeneID:102724112\" #> [1282] \"GeneID:642648\"    \"GeneID:102724158\" \"GeneID:101060389\" #> [1285] \"GeneID:168090\"    \"GeneID:7414\"      \"GeneID:5024\"      #> [1288] \"GeneID:102723597\" \"GeneID:167410\"    \"GeneID:3800\"      #> [1291] \"GeneID:338429\"    \"GeneID:284417\"    \"GeneID:64434\"     #> [1294] \"GeneID:1347\"      \"GeneID:146378\"    \"GeneID:4134\"      #> [1297] \"GeneID:22920\"     \"GeneID:64693\"     \"GeneID:51060\"     #> [1300] \"GeneID:102724426\" \"GeneID:100874150\" \"GeneID:55862\"     #> [1303] \"GeneID:51471\"     \"GeneID:55054\"     \"GeneID:102725364\" #> [1306] \"GeneID:23031\"     \"GeneID:101927069\" \"GeneID:100126799\" #> [1309] \"GeneID:100302740\" \"GeneID:150622\"    \"GeneID:102723440\" #> [1312] \"GeneID:389690\"    \"GeneID:10156\"     \"GeneID:10638\"     #> [1315] \"GeneID:10133\"     \"GeneID:146177\"    \"GeneID:81847\"     #> [1318] \"GeneID:401337\"    \"GeneID:93594\"     \"GeneID:127435\"    #> [1321] \"GeneID:646405\"    \"GeneID:57140\"     \"GeneID:9002\"      #> [1324] \"GeneID:55298\"     \"GeneID:101929237\" \"GeneID:645700\"    #> [1327] \"GeneID:102724485\" \"GeneID:130162\"    \"GeneID:114882\"    #> [1330] \"GeneID:102724536\" \"GeneID:337976\"    \"GeneID:717\"       #> [1333] \"GeneID:128368\"    \"GeneID:51029\"     \"GeneID:57708\"     #> [1336] \"GeneID:51175\"     \"GeneID:144453\"    \"GeneID:388948\"    #> [1339] \"GeneID:100130587\" \"GeneID:201254\"    \"GeneID:23011\"     #> [1342] \"GeneID:474\"       \"GeneID:100289361\" \"GeneID:101060226\" #> [1345] \"GeneID:64146\"     \"GeneID:101928012\" \"GeneID:102466197\" #> [1348] \"GeneID:101928849\" \"GeneID:101927234\" \"GeneID:4886\"      #> [1351] \"GeneID:102724688\" \"GeneID:84069\"     \"GeneID:5356\"      #> [1354] \"GeneID:729177\"    \"GeneID:100287083\" \"GeneID:8786\"      #> [1357] \"GeneID:3669\"      \"GeneID:339166\"    \"GeneID:101928397\" #> [1360] \"GeneID:387111\"    \"GeneID:25831\"     \"GeneID:653423\"    #> [1363] \"GeneID:55339\"     \"GeneID:79004\"     \"GeneID:941\"       #> [1366] \"GeneID:100316868\" \"GeneID:79937\"     \"GeneID:101928663\" #> [1369] \"GeneID:286676\"    \"GeneID:253039\"    \"GeneID:102723561\" #> [1372] \"GeneID:442903\"    \"GeneID:85290\"     \"GeneID:101929538\" #> [1375] \"GeneID:140776\"    \"GeneID:147929\"    \"GeneID:57474\"     #> [1378] \"GeneID:100996701\" \"GeneID:63978\"     \"GeneID:5609\"      #> [1381] \"GeneID:4563\"      \"GeneID:3483\"      \"GeneID:79411\"     #> [1384] \"GeneID:58494\"     \"GeneID:1642\"      \"GeneID:6259\"      #> [1387] \"GeneID:100996255\" \"GeneID:149563\"    \"GeneID:126003\"    #> [1390] \"GeneID:100302185\" \"GeneID:102725193\" \"GeneID:102724469\" #> [1393] \"GeneID:391723\"    \"GeneID:4922\"      \"GeneID:101928742\" #> [1396] \"GeneID:8835\"      \"GeneID:5533\"      \"GeneID:100302118\" #> [1399] \"GeneID:101752334\" \"GeneID:102723819\" \"GeneID:83856\"     #> [1402] \"GeneID:55209\"     \"GeneID:79649\"     \"GeneID:440288\"    #> [1405] \"GeneID:11027\"     \"GeneID:51474\"     \"GeneID:29079\"     #> [1408] \"GeneID:1525\"      \"GeneID:122664\"    \"GeneID:286464\"    #> [1411] \"GeneID:100996808\" \"GeneID:59350\"     \"GeneID:100101148\" #> [1414] \"GeneID:101928752\" \"GeneID:254863\"    \"GeneID:101929609\" #> [1417] \"GeneID:2524\"      \"GeneID:84067\"     \"GeneID:81610\"     #> [1420] \"GeneID:100289574\" \"GeneID:100144596\" \"GeneID:92249\"     #> [1423] \"GeneID:102723937\" \"GeneID:80149\"     \"GeneID:6019\"      #> [1426] \"GeneID:102725370\" \"GeneID:399972\"    \"GeneID:115273\"    #> [1429] \"GeneID:285753\"    \"GeneID:102724251\" \"GeneID:102724355\" #> [1432] \"GeneID:49854\"     \"GeneID:9849\"      \"GeneID:440093\"    #> [1435] \"GeneID:154743\"    \"GeneID:221302\"    \"GeneID:285190\"    #> [1438] \"GeneID:100996924\" \"GeneID:102724809\" \"GeneID:92304\"     #> [1441] \"GeneID:6998\"      \"GeneID:644919\"    \"GeneID:652968\"    #> [1444] \"GeneID:7022\"      \"GeneID:7512\"      \"GeneID:11096\"     #> [1447] \"GeneID:1240\"      \"GeneID:284110\"    \"GeneID:140564\"    #> [1450] \"GeneID:102723510\" \"GeneID:1272\"      \"GeneID:3572\"      #> [1453] \"GeneID:7703\"      \"GeneID:6711\"      \"GeneID:140828\"    #> [1456] \"GeneID:101927871\" \"GeneID:284098\"    \"GeneID:100873758\" #> [1459] \"GeneID:406909\"    \"GeneID:4330\"      \"GeneID:55262\"     #> [1462] \"GeneID:58508\"     \"GeneID:148156\"    \"GeneID:94104\"     #> [1465] \"GeneID:85476\"     \"GeneID:440335\"    \"GeneID:101928784\" #> [1468] \"GeneID:101929125\" \"GeneID:100532724\" \"GeneID:6029\"      #> [1471] \"GeneID:26781\"     \"GeneID:101926915\" \"GeneID:83707\"     #> [1474] \"GeneID:253769\"    \"GeneID:27036\"     \"GeneID:3054\"      #> [1477] \"GeneID:2847\"      \"GeneID:140947\"    \"GeneID:5873\"      #> [1480] \"GeneID:646241\"    \"GeneID:22888\"     \"GeneID:400128\"    #> [1483] \"GeneID:284359\"    \"GeneID:6339\"      \"GeneID:7077\"      #> [1486] \"GeneID:55697\"     \"GeneID:283788\"    \"GeneID:6728\"      #> [1489] \"GeneID:102465690\" \"GeneID:3988\"      \"GeneID:407035\"    #> [1492] \"GeneID:4224\"      \"GeneID:101927392\" \"GeneID:54518\"     #> [1495] \"GeneID:100507501\" \"GeneID:102724921\" \"GeneID:220323\"    #> [1498] \"GeneID:22948\"     \"GeneID:101927322\" \"GeneID:101927334\" #> [1501] \"GeneID:5205\"      \"GeneID:102723793\" \"GeneID:2034\"      #> [1504] \"GeneID:101927126\" \"GeneID:102465248\" \"GeneID:729920\"    #> [1507] \"GeneID:80776\"     \"GeneID:155061\"    \"GeneID:222553\"    #> [1510] \"GeneID:100302526\" \"GeneID:79039\"     \"GeneID:10228\"     #> [1513] \"GeneID:2218\"      \"GeneID:4146\"      \"GeneID:131540\"    #> [1516] \"GeneID:102723479\" \"GeneID:9081\"      \"GeneID:102723355\" #> [1519] \"GeneID:647044\"    \"GeneID:124923\"    \"GeneID:8678\"      #> [1522] \"GeneID:130872\"    \"GeneID:101927828\" \"GeneID:284358\"    #> [1525] \"GeneID:1768\"      \"GeneID:102466759\" \"GeneID:898\"       #> [1528] \"GeneID:100129669\" \"GeneID:3965\"      \"GeneID:131870\"    #> [1531] \"GeneID:171558\"    \"GeneID:47\"        \"GeneID:100847047\" #> [1534] \"GeneID:55303\"     \"GeneID:146050\"    \"GeneID:3211\"      #> [1537] \"GeneID:1742\"      \"GeneID:100302116\" \"GeneID:23095\"     #> [1540] \"GeneID:102723604\" \"GeneID:80329\"     \"GeneID:100500815\" #> [1543] \"GeneID:10808\"     \"GeneID:100126318\" \"GeneID:100505853\" #> [1546] \"GeneID:100507065\" \"GeneID:492311\"    \"GeneID:100616280\" #> [1549] \"GeneID:8807\"      \"GeneID:10293\"     \"GeneID:163747\"    #> [1552] \"GeneID:25888\"     \"GeneID:54741\"     \"GeneID:100500897\" #> [1555] \"GeneID:100033453\" \"GeneID:23211\"     \"GeneID:9637\"      #> [1558] \"GeneID:100506142\" \"GeneID:2011\"      \"GeneID:283897\"    #> [1561] \"GeneID:53842\"     \"GeneID:646719\"    \"GeneID:148709\"    #> [1564] \"GeneID:51241\"     \"GeneID:101928068\" \"GeneID:65003\"     #> [1567] \"GeneID:401508\"    \"GeneID:27097\"     \"GeneID:26080\"     #> [1570] \"GeneID:124842\"    \"GeneID:284440\"    \"GeneID:102465250\" #> [1573] \"GeneID:6818\"      \"GeneID:100874110\" \"GeneID:102725189\" #> [1576] \"GeneID:5553\"      \"GeneID:100874188\" \"GeneID:5000\"      #> [1579] \"GeneID:100873768\" \"GeneID:80315\"     \"GeneID:101927901\" #> [1582] \"GeneID:150165\"    \"GeneID:100616223\" \"GeneID:4107\"      #> [1585] \"GeneID:23516\"     \"GeneID:100130992\" \"GeneID:83696\"     #> [1588] \"GeneID:101928618\" \"GeneID:22823\"     \"GeneID:2914\"      #> [1591] \"GeneID:56906\"     \"GeneID:101929964\" \"GeneID:101927288\" #> [1594] \"GeneID:102724775\" \"GeneID:158160\"    \"GeneID:101930064\" #> [1597] \"GeneID:51495\"     \"GeneID:3131\"      \"GeneID:1259\"      #> [1600] \"GeneID:284865\"    \"GeneID:91687\"     \"GeneID:51594\"     #> [1603] \"GeneID:55297\"     \"GeneID:7155\"      \"GeneID:102724184\" #> [1606] \"GeneID:22909\"     \"GeneID:10212\"     \"GeneID:101927492\" #> [1609] \"GeneID:85007\"     \"GeneID:401253\"    \"GeneID:168002\"    #> [1612] \"GeneID:58506\"     \"GeneID:25897\"     \"GeneID:25789\"     #> [1615] \"GeneID:23411\"     \"GeneID:654483\"    \"GeneID:102724861\" #> [1618] \"GeneID:8910\"      \"GeneID:101928754\" \"GeneID:6549\"      #> [1621] \"GeneID:9940\"      \"GeneID:101101776\" \"GeneID:91351\"     #> [1624] \"GeneID:101930002\" \"GeneID:101928225\" \"GeneID:653583\"    #> [1627] \"GeneID:55017\"     \"GeneID:79876\"     \"GeneID:768219\"    #> [1630] \"GeneID:101928135\" \"GeneID:677840\"    \"GeneID:51491\"     #> [1633] \"GeneID:2050\"      \"GeneID:11023\"     \"GeneID:102725201\" #> [1636] \"GeneID:2307\"      \"GeneID:101927464\" \"GeneID:814\"       #> [1639] \"GeneID:254102\"    \"GeneID:994\"       \"GeneID:153527\"    #> [1642] \"GeneID:10216\"     \"GeneID:2918\"      \"GeneID:200765\"    #> [1645] \"GeneID:894\"       \"GeneID:26791\"     \"GeneID:54495\"     #> [1648] \"GeneID:101927884\" \"GeneID:55540\"     \"GeneID:101927459\" #> [1651] \"GeneID:65059\"     \"GeneID:163175\"    \"GeneID:84848\"     #> [1654] \"GeneID:102724248\" \"GeneID:3267\"      \"GeneID:10238\"     #> [1657] \"GeneID:102724767\" \"GeneID:102723501\" \"GeneID:23090\"     #> [1660] \"GeneID:101927385\" \"GeneID:100500844\" \"GeneID:26097\"     #> [1663] \"GeneID:285550\"    \"GeneID:23317\"     \"GeneID:11199\"     #> [1666] \"GeneID:116461\"    \"GeneID:407040\"    \"GeneID:102724072\" #> [1669] \"GeneID:146861\"    \"GeneID:401480\"    \"GeneID:100616246\" #> [1672] \"GeneID:100874048\" \"GeneID:26298\"     \"GeneID:5165\"      #> [1675] \"GeneID:100616373\" \"GeneID:441046\"    \"GeneID:594857\"    #> [1678] \"GeneID:102724748\" \"GeneID:100302115\" \"GeneID:100188893\" #> [1681] \"GeneID:203\"       \"GeneID:222255\"    \"GeneID:441528\"    #> [1684] \"GeneID:100422874\" \"GeneID:100506563\" \"GeneID:401497\"    #> [1687] \"GeneID:7592\"      \"GeneID:401478\"    \"GeneID:101929143\" #> [1690] \"GeneID:101927840\" \"GeneID:10294\"     \"GeneID:2578\"      #> [1693] \"GeneID:2977\"      \"GeneID:102724280\" \"GeneID:128308\"    #> [1696] \"GeneID:2703\"      \"GeneID:101927793\" \"GeneID:102466953\" #> [1699] \"GeneID:407054\"    \"GeneID:100873973\" \"GeneID:102725353\" #> [1702] \"GeneID:102725328\" \"GeneID:8938\"      \"GeneID:2962\"      #> [1705] \"GeneID:103021165\" \"GeneID:101930089\" \"GeneID:101928455\" #> [1708] \"GeneID:401230\"    \"GeneID:22824\"     \"GeneID:27075\"     #> [1711] \"GeneID:54763\"     \"GeneID:348303\"    \"GeneID:344558\"    #> [1714] \"GeneID:7498\"      \"GeneID:23294\"     \"GeneID:196951\"    #> [1717] \"GeneID:100190939\" \"GeneID:4695\"      \"GeneID:784\"       #> [1720] \"GeneID:55835\"     \"GeneID:23558\"     \"GeneID:11336\"     #> [1723] \"GeneID:101929358\" \"GeneID:101927955\" \"GeneID:162967\"    #> [1726] \"GeneID:735301\"    \"GeneID:353299\"    \"GeneID:140578\"    #> [1729] \"GeneID:100506571\" \"GeneID:51123\"     \"GeneID:5547\"      #> [1732] \"GeneID:392307\"    \"GeneID:345611\"    \"GeneID:55893\"     #> [1735] \"GeneID:692197\"    \"GeneID:51645\"     \"GeneID:64180\"     #> [1738] \"GeneID:101930534\" \"GeneID:102725182\" \"GeneID:81669\"     #> [1741] \"GeneID:104\"       \"GeneID:100500849\" \"GeneID:101928120\" #> [1744] \"GeneID:133686\"    \"GeneID:122809\"    \"GeneID:2971\"      #> [1747] \"GeneID:6222\"      \"GeneID:9293\"      \"GeneID:81930\"     #> [1750] \"GeneID:414300\"    \"GeneID:6102\"      \"GeneID:102723315\" #> [1753] \"GeneID:100302111\" \"GeneID:26515\"     \"GeneID:5729\"      #> [1756] \"GeneID:2959\"      \"GeneID:645206\"    \"GeneID:257397\"    #> [1759] \"GeneID:5369\"      \"GeneID:652276\"    \"GeneID:101929445\" #> [1762] \"GeneID:574518\"    \"GeneID:6474\"      \"GeneID:220988\"    #> [1765] \"GeneID:55616\"     \"GeneID:222962\"    \"GeneID:548645\"    #> [1768] \"GeneID:90324\"     \"GeneID:116938\"    \"GeneID:23498\"     #> [1771] \"GeneID:57477\"     \"GeneID:10230\"     \"GeneID:284047\"    #> [1774] \"GeneID:158801\"    \"GeneID:23154\"     \"GeneID:9321\"      #> [1777] \"GeneID:79071\"     \"GeneID:102723965\" \"GeneID:55870\"     #> [1780] \"GeneID:100287898\" \"GeneID:100033460\" \"GeneID:401093\"    #> [1783] \"GeneID:11151\"     \"GeneID:123591\"    \"GeneID:100507034\" #> [1786] \"GeneID:101927995\" \"GeneID:5162\"      \"GeneID:100862728\" #> [1789] \"GeneID:10955\"     \"GeneID:79694\"     \"GeneID:5916\"      #> [1792] \"GeneID:4298\"      \"GeneID:442028\"    \"GeneID:283011\"    #> [1795] \"GeneID:25972\"     \"GeneID:100885775\" \"GeneID:22901\"     #> [1798] \"GeneID:64921\"     \"GeneID:122616\"    \"GeneID:79712\"     #> [1801] \"GeneID:3195\"      \"GeneID:400997\"    \"GeneID:101927212\" #> [1804] \"GeneID:102724354\" \"GeneID:9946\"      \"GeneID:5747\"      #> [1807] \"GeneID:114900\"    \"GeneID:402483\"    \"GeneID:102465689\" #> [1810] \"GeneID:102723985\" \"GeneID:94103\"     \"GeneID:102465858\" #> [1813] \"GeneID:83473\"     \"GeneID:7905\"      \"GeneID:100303453\" #> [1816] \"GeneID:402135\"    \"GeneID:125115\"    \"GeneID:10907\"     #> [1819] \"GeneID:9914\"      \"GeneID:100506014\" \"GeneID:102725156\" #> [1822] \"GeneID:101928111\" \"GeneID:11285\"     \"GeneID:102724893\" #> [1825] \"GeneID:401207\"    \"GeneID:100499171\" \"GeneID:339122\"    #> [1828] \"GeneID:100616217\" \"GeneID:102723719\" \"GeneID:55208\"     #> [1831] \"GeneID:51282\"     \"GeneID:28227\"     \"GeneID:29969\"     #> [1834] \"GeneID:101926888\" \"GeneID:55037\"     \"GeneID:89777\"     #> [1837] \"GeneID:100616492\" \"GeneID:100131551\" \"GeneID:10200\"     #> [1840] \"GeneID:84643\"     \"GeneID:164045\"    \"GeneID:79097\"     #> [1843] \"GeneID:8945\"      \"GeneID:731789\"    \"GeneID:102725247\" #> [1846] \"GeneID:9612\"      \"GeneID:101927792\" \"GeneID:10613\"     #> [1849] \"GeneID:56005\"     \"GeneID:55689\"     \"GeneID:441282\"    #> [1852] \"GeneID:144321\"    \"GeneID:100886964\" \"GeneID:2584\"      #> [1855] \"GeneID:84084\"     \"GeneID:51805\"     \"GeneID:79023\"     #> [1858] \"GeneID:2662\"      \"GeneID:100616190\" \"GeneID:406902\"    #> [1861] \"GeneID:84283\"     \"GeneID:56897\"     \"GeneID:100419868\" #> [1864] \"GeneID:101928122\" \"GeneID:283238\"    \"GeneID:102725434\" #> [1867] \"GeneID:101926955\" \"GeneID:9537\"      \"GeneID:117145\"    #> [1870] \"GeneID:101928323\" \"GeneID:88\"        \"GeneID:101929654\" #> [1873] \"GeneID:388387\"    \"GeneID:64747\"     \"GeneID:101927082\" #> [1876] \"GeneID:5141\"      \"GeneID:100034743\" \"GeneID:441932\"    #> [1879] \"GeneID:222389\"    \"GeneID:5860\"      \"GeneID:102465506\" #> [1882] \"GeneID:27248\"     \"GeneID:3284\"      \"GeneID:55713\"     #> [1885] \"GeneID:101929478\" \"GeneID:2017\"      \"GeneID:5648\"      #> [1888] \"GeneID:65061\"     \"GeneID:26019\"     \"GeneID:7037\"      #> [1891] \"GeneID:51725\"     \"GeneID:100874531\" \"GeneID:101928098\" #> [1894] \"GeneID:22853\"     \"GeneID:158055\"    \"GeneID:3651\"      #> [1897] \"GeneID:390066\"    \"GeneID:102723375\" \"GeneID:2267\"      #> [1900] \"GeneID:387129\"    \"GeneID:7994\"      \"GeneID:79869\"     #> [1903] \"GeneID:100169959\" \"GeneID:102723382\" \"GeneID:55753\"     #> [1906] \"GeneID:100616476\" \"GeneID:25825\"     \"GeneID:100996465\" #> [1909] \"GeneID:6100\"      \"GeneID:651\"       \"GeneID:221584\"    #> [1912] \"GeneID:101928144\" \"GeneID:100036566\" \"GeneID:56729\"     #> [1915] \"GeneID:407027\"    \"GeneID:3911\"      \"GeneID:8890\"      #> [1918] \"GeneID:54620\"     \"GeneID:101928136\" \"GeneID:100500876\" #> [1921] \"GeneID:102723862\" \"GeneID:101927378\" \"GeneID:266\"       #> [1924] \"GeneID:102725009\" \"GeneID:84647\"     \"GeneID:102724492\" #> [1927] \"GeneID:3008\"      \"GeneID:3682\"      \"GeneID:101928220\" #> [1930] \"GeneID:26083\"     \"GeneID:8310\"      \"GeneID:1427\"      #> [1933] \"GeneID:10950\"     \"GeneID:647264\"    \"GeneID:101929657\" #> [1936] \"GeneID:5566\"      \"GeneID:100874127\" \"GeneID:9231\"      #> [1939] \"GeneID:102723687\" \"GeneID:284618\"    \"GeneID:8345\"      #> [1942] \"GeneID:440051\"    \"GeneID:58505\"     \"GeneID:9266\"      #> [1945] \"GeneID:55500\"     \"GeneID:6888\"      \"GeneID:285740\"    #> [1948] \"GeneID:102724326\" \"GeneID:3630\"      \"GeneID:158747\"    #> [1951] \"GeneID:51447\"     \"GeneID:57608\"     \"GeneID:3304\"      #> [1954] \"GeneID:728339\"    \"GeneID:286319\"    \"GeneID:677784\"    #> [1957] \"GeneID:613126\"    \"GeneID:25865\"     \"GeneID:1783\"      #> [1960] \"GeneID:79025\"     \"GeneID:3442\"      \"GeneID:102725307\" #> [1963] \"GeneID:101928955\" \"GeneID:9162\"      \"GeneID:79609\"     #> [1966] \"GeneID:28\"        \"GeneID:729862\"    \"GeneID:3754\"      #> [1969] \"GeneID:100302143\" \"GeneID:100532742\" \"GeneID:154754\"    #> [1972] \"GeneID:100422912\" \"GeneID:50840\"     \"GeneID:25774\"     #> [1975] \"GeneID:442721\"    \"GeneID:5438\"      \"GeneID:55738\"     #> [1978] \"GeneID:9592\"      \"GeneID:10849\"     \"GeneID:374860\"    #> [1981] \"GeneID:100996588\" \"GeneID:101929229\" \"GeneID:375316\"    #> [1984] \"GeneID:342666\"    \"GeneID:100506241\" \"GeneID:4879\"      #> [1987] \"GeneID:5370\"      \"GeneID:100137049\" \"GeneID:55079\"     #> [1990] \"GeneID:123036\"    \"GeneID:100287171\" \"GeneID:79026\"     #> [1993] \"GeneID:6003\"      \"GeneID:101929019\" \"GeneID:1522\"      #> [1996] \"GeneID:130497\"    \"GeneID:102723671\" \"GeneID:5173\"      #> [1999] \"GeneID:4223\"      \"GeneID:102724949\" \"GeneID:6996\"      #> [2002] \"GeneID:645027\"    \"GeneID:79171\"     \"GeneID:84898\"     #> [2005] \"GeneID:100996669\" \"GeneID:7139\"      \"GeneID:10933\"     #> [2008] \"GeneID:102725095\" \"GeneID:285533\"    \"GeneID:8711\"      #> [2011] \"GeneID:26774\"     \"GeneID:27247\"     \"GeneID:10844\"     #> [2014] \"GeneID:8634\"      \"GeneID:100128573\" \"GeneID:1802\"      #> [2017] \"GeneID:140886\"    \"GeneID:120065\"    \"GeneID:101060216\" #> [2020] \"GeneID:84931\"     \"GeneID:25987\"     \"GeneID:333929\"    #> [2023] \"GeneID:101929552\" \"GeneID:83606\"     \"GeneID:212\"       #> [2026] \"GeneID:83756\"     \"GeneID:102465517\" \"GeneID:121536\"    #> [2029] \"GeneID:11258\"     \"GeneID:283981\"    \"GeneID:9969\"      #> [2032] \"GeneID:3360\"      \"GeneID:723805\"    \"GeneID:187\"       #> [2035] \"GeneID:55175\"     \"GeneID:645520\"    \"GeneID:150696\"    #> [2038] \"GeneID:29085\"     \"GeneID:100874372\" \"GeneID:3126\"      #> [2041] \"GeneID:643770\"    \"GeneID:284294\"    \"GeneID:100507855\" #> [2044] \"GeneID:102466250\" \"GeneID:101060181\" \"GeneID:80196\"     #> [2047] \"GeneID:101930479\" \"GeneID:129531\"    \"GeneID:101928257\" #> [2050] \"GeneID:100422996\" \"GeneID:101928870\" \"GeneID:100847022\" #> [2053] \"GeneID:6948\"      \"GeneID:101928811\" \"GeneID:219790\"    #> [2056] \"GeneID:57498\"     \"GeneID:102467214\" \"GeneID:388697\"    #> [2059] \"GeneID:54657\"     \"GeneID:102724766\" \"GeneID:3043\"      #> [2062] \"GeneID:100268168\" \"GeneID:10090\"     \"GeneID:23276\"     #> [2065] \"GeneID:102724798\" \"GeneID:9846\"      \"GeneID:493856\"    #> [2068] \"GeneID:100033799\" \"GeneID:8204\"      \"GeneID:102725481\" #> [2071] \"GeneID:79160\"     \"GeneID:407004\"    \"GeneID:5709\"      #> [2074] \"GeneID:85009\"     \"GeneID:24148\"     \"GeneID:101928809\" #> [2077] \"GeneID:100419743\" \"GeneID:65080\"     \"GeneID:102465909\" #> [2080] \"GeneID:1459\"      \"GeneID:153743\"    \"GeneID:768222\"    #> [2083] \"GeneID:442862\"    \"GeneID:58538\"     \"GeneID:26508\"     #> [2086] \"GeneID:3816\"      \"GeneID:2649\"      \"GeneID:440078\"    #> [2089] \"GeneID:80777\"     \"GeneID:26065\"     \"GeneID:400643\"    #> [2092] \"GeneID:255480\"    \"GeneID:140686\"    \"GeneID:100134938\" #> [2095] \"GeneID:11012\"     \"GeneID:685\"       \"GeneID:9031\"      #> [2098] \"GeneID:100847059\" \"GeneID:101929796\" \"GeneID:154197\"    #> [2101] \"GeneID:728264\"    \"GeneID:2018\"      \"GeneID:139065\"    #> [2104] \"GeneID:57018\"     \"GeneID:102725164\" \"GeneID:27120\"     #> [2107] \"GeneID:101929163\" \"GeneID:51617\"     \"GeneID:8539\"      #> [2110] \"GeneID:118430\"    \"GeneID:100861550\" \"GeneID:10335\"     #> [2113] \"GeneID:10512\"     \"GeneID:3172\"      \"GeneID:3762\"      #> [2116] \"GeneID:53336\"     \"GeneID:219287\"    \"GeneID:29929\"     #> [2119] \"GeneID:340481\"    \"GeneID:29087\"     \"GeneID:100652768\" #> [2122] \"GeneID:51008\"     \"GeneID:10980\"     \"GeneID:156\"       #> [2125] \"GeneID:100422872\" \"GeneID:101928368\" \"GeneID:101929482\" #> [2128] \"GeneID:9693\"      \"GeneID:651302\"    \"GeneID:102723542\" #> [2131] \"GeneID:340578\"    \"GeneID:58515\"     \"GeneID:27091\"     #> [2134] \"GeneID:692196\"    \"GeneID:101928583\" \"GeneID:619499\"    #> [2137] \"GeneID:102724819\" \"GeneID:134430\"    \"GeneID:101927864\" #> [2140] \"GeneID:102723794\" \"GeneID:2624\"      \"GeneID:119369\"    #> [2143] \"GeneID:55633\"     \"GeneID:101927353\" \"GeneID:3693\"      #> [2146] \"GeneID:91828\"     \"GeneID:102724183\" \"GeneID:349149\"    #> [2149] \"GeneID:503645\"    \"GeneID:284942\"    \"GeneID:400359\"    #> [2152] \"GeneID:406888\"    \"GeneID:5704\"      \"GeneID:100616438\" #> [2155] \"GeneID:10842\"     \"GeneID:100129516\" \"GeneID:101060200\" #> [2158] \"GeneID:101929174\" \"GeneID:8613\"      \"GeneID:283197\"    #> [2161] \"GeneID:373\"       \"GeneID:102465666\" \"GeneID:7805\"      #> [2164] \"GeneID:55744\"     \"GeneID:22905\"     \"GeneID:7078\"      #> [2167] \"GeneID:406931\"    \"GeneID:102724559\" \"GeneID:222584\"    #> [2170] \"GeneID:339483\"    \"GeneID:83690\"     \"GeneID:660\"       #> [2173] \"GeneID:7128\"      \"GeneID:647310\"    \"GeneID:149998\"    #> [2176] \"GeneID:102724084\" \"GeneID:2014\"      \"GeneID:102723443\" #> [2179] \"GeneID:23545\"     \"GeneID:102724694\" \"GeneID:9582\"      #> [2182] \"GeneID:174\"       \"GeneID:926\"       \"GeneID:221421\"    #> [2185] \"GeneID:26873\"     \"GeneID:55422\"     \"GeneID:102723398\" #> [2188] \"GeneID:100616215\" \"GeneID:101927242\" \"GeneID:441518\"    #> [2191] \"GeneID:56034\"     \"GeneID:23122\"     \"GeneID:53981\"     #> [2194] \"GeneID:100873941\" \"GeneID:102724680\" \"GeneID:102466732\" #> [2197] \"GeneID:6913\"      \"GeneID:102723345\" \"GeneID:1601\"      #> [2200] \"GeneID:51295\"     \"GeneID:139135\"    \"GeneID:6218\"      #> [2203] \"GeneID:101928388\" \"GeneID:1852\"      \"GeneID:96459\"     #> [2206] \"GeneID:92400\"     \"GeneID:198437\"    \"GeneID:78991\"     #> [2209] \"GeneID:26576\"     \"GeneID:57684\"     \"GeneID:410\"       #> [2212] \"GeneID:343472\"    \"GeneID:57611\"     \"GeneID:51569\"     #> [2215] \"GeneID:3836\"      \"GeneID:81615\"     \"GeneID:619343\"    #> [2218] \"GeneID:285359\"    \"GeneID:643401\"    \"GeneID:285266\"    #> [2221] \"GeneID:100033447\" \"GeneID:728075\"    \"GeneID:117579\"    #> [2224] \"GeneID:441295\"    \"GeneID:509\"       \"GeneID:100128811\" #> [2227] \"GeneID:101927060\" \"GeneID:6830\"      \"GeneID:101928327\" #> [2230] \"GeneID:23433\"     \"GeneID:3456\"      \"GeneID:23547\"     #> [2233] \"GeneID:10797\"     \"GeneID:1669\"      \"GeneID:100337591\" #> [2236] \"GeneID:53938\"     \"GeneID:57582\"     \"GeneID:101928472\" #> [2239] \"GeneID:9337\"      \"GeneID:102723503\" \"GeneID:3995\"      #> [2242] \"GeneID:5610\"      \"GeneID:401428\"    \"GeneID:599\"       #> [2245] \"GeneID:7547\"      \"GeneID:102723875\" \"GeneID:29919\"     #> [2248] \"GeneID:653203\"    \"GeneID:541465\"    \"GeneID:102723824\" #> [2251] \"GeneID:64798\"     \"GeneID:5360\"      \"GeneID:11201\"     #> [2254] \"GeneID:8665\"      \"GeneID:100423004\" \"GeneID:54541\"     #> [2257] \"GeneID:284418\"    \"GeneID:3980\"      \"GeneID:695\"       #> [2260] \"GeneID:7980\"      \"GeneID:100533496\" \"GeneID:26766\"     #> [2263] \"GeneID:6288\"      \"GeneID:84295\"     \"GeneID:22990\"     #> [2266] \"GeneID:3675\"      \"GeneID:27244\"     \"GeneID:863\"       #> [2269] \"GeneID:121260\"    \"GeneID:26740\"     \"GeneID:6400\"      #> [2272] \"GeneID:84288\"     \"GeneID:728724\"    \"GeneID:101929831\" #> [2275] \"GeneID:7707\"      \"GeneID:10077\"     \"GeneID:101928253\" #> [2278] \"GeneID:79966\"     \"GeneID:55352\"     \"GeneID:23591\"     #> [2281] \"GeneID:115123\"    \"GeneID:101927926\" \"GeneID:101928118\" #> [2284] \"GeneID:3074\"      \"GeneID:9709\"      \"GeneID:83873\"     #> [2287] \"GeneID:23532\"     \"GeneID:130075\"    \"GeneID:55755\"     #> [2290] \"GeneID:101930539\" \"GeneID:79923\"     \"GeneID:103021164\" #> [2293] \"GeneID:63946\"     \"GeneID:101930079\" \"GeneID:102723372\" #> [2296] \"GeneID:10492\"     \"GeneID:284207\"    \"GeneID:3646\"      #> [2299] \"GeneID:728342\"    \"GeneID:441520\"    \"GeneID:6514\"      #> [2302] \"GeneID:27042\"     \"GeneID:100505576\" \"GeneID:102723480\" #> [2305] \"GeneID:58504\"     \"GeneID:84181\"     \"GeneID:123355\"    #> [2308] \"GeneID:135112\"    \"GeneID:102724059\" \"GeneID:2314\"      #> [2311] \"GeneID:101927184\" \"GeneID:8335\"      \"GeneID:128872\"    #> [2314] \"GeneID:78994\"     \"GeneID:54557\"     \"GeneID:100874273\" #> [2317] \"GeneID:728739\"    \"GeneID:79611\"     \"GeneID:8867\"      #> [2320] \"GeneID:102724077\" \"GeneID:9021\"      \"GeneID:100616268\" #> [2323] \"GeneID:154860\"    \"GeneID:102465867\" \"GeneID:5870\"      #> [2326] \"GeneID:7920\"      \"GeneID:8820\"      \"GeneID:151516\"    #> [2329] \"GeneID:339192\"    \"GeneID:23533\"     \"GeneID:6295\"      #> [2332] \"GeneID:101927936\" \"GeneID:64210\"     \"GeneID:157922\"    #> [2335] \"GeneID:401335\"    \"GeneID:100506827\" \"GeneID:8676\"      #> [2338] \"GeneID:22986\"     \"GeneID:101929643\" \"GeneID:4558\"      #> [2341] \"GeneID:102466222\" \"GeneID:81328\"     \"GeneID:100507495\" #> [2344] \"GeneID:100887744\" \"GeneID:25907\"     \"GeneID:83449\"     #> [2347] \"GeneID:65990\"     \"GeneID:100506680\" \"GeneID:100126354\" #> [2350] \"GeneID:100616285\" \"GeneID:552900\"    \"GeneID:10199\"     #> [2353] \"GeneID:1544\"      \"GeneID:406900\"    \"GeneID:101930464\" #> [2356] \"GeneID:100188917\" \"GeneID:55421\"     \"GeneID:102724610\" #> [2359] \"GeneID:5223\"      \"GeneID:81871\"     \"GeneID:27092\"     #> [2362] \"GeneID:161291\"    \"GeneID:101928657\" \"GeneID:100505865\" #> [2365] \"GeneID:92370\"     \"GeneID:387810\"    \"GeneID:100500840\" #> [2368] \"GeneID:101928615\" \"GeneID:80124\"     \"GeneID:100505824\" #> [2371] \"GeneID:171482\"    \"GeneID:646096\"    \"GeneID:101978785\" #> [2374] \"GeneID:5599\"      \"GeneID:100130460\" \"GeneID:677765\"    #> [2377] \"GeneID:10891\"     \"GeneID:91966\"     \"GeneID:102724826\" #> [2380] \"GeneID:100507395\" \"GeneID:9175\"      \"GeneID:284904\"    #> [2383] \"GeneID:83657\"     \"GeneID:102724467\" \"GeneID:57118\"     #> [2386] \"GeneID:79139\"     \"GeneID:100506178\" \"GeneID:57863\"     #> [2389] \"GeneID:646024\"    \"GeneID:721\"       \"GeneID:63901\"     #> [2392] \"GeneID:54778\"     \"GeneID:51062\"     \"GeneID:102723593\" #> [2395] \"GeneID:399876\"    \"GeneID:101928383\" \"GeneID:284233\"    #> [2398] \"GeneID:79334\"     \"GeneID:51379\"     \"GeneID:81623\"     #> [2401] \"GeneID:101927691\" \"GeneID:9188\"      \"GeneID:102723802\" #> [2404] \"GeneID:84826\"     \"GeneID:101927929\" \"GeneID:677807\"    #> [2407] \"GeneID:166378\"    \"GeneID:283887\"    \"GeneID:94120\"     #> [2410] \"GeneID:7694\"      \"GeneID:51176\"     \"GeneID:101928404\" #> [2413] \"GeneID:4616\"      \"GeneID:92070\"     \"GeneID:728448\"    #> [2416] \"GeneID:7482\"      \"GeneID:51117\"     \"GeneID:151278\"    #> [2419] \"GeneID:6690\"      \"GeneID:10516\"     \"GeneID:643733\"    #> [2422] \"GeneID:2998\"      \"GeneID:102724396\" \"GeneID:388815\"    #> [2425] \"GeneID:9117\"      \"GeneID:101928056\" \"GeneID:407028\"    #> [2428] \"GeneID:9559\"      \"GeneID:9518\"      \"GeneID:145864\"    #> [2431] \"GeneID:101928793\" \"GeneID:65243\"     \"GeneID:51003\"     #> [2434] \"GeneID:57379\"     \"GeneID:26173\"     \"GeneID:2328\"      #> [2437] \"GeneID:1179\"      \"GeneID:90525\"     \"GeneID:57536\"     #> [2440] \"GeneID:51279\"     \"GeneID:6013\"      \"GeneID:4213\"      #> [2443] \"GeneID:57050\"     \"GeneID:101927869\" \"GeneID:9025\"      #> [2446] \"GeneID:4504\"      \"GeneID:101928844\" \"GeneID:163589\"    #> [2449] \"GeneID:57655\"     \"GeneID:4191\"      \"GeneID:10243\"     #> [2452] \"GeneID:3758\"      \"GeneID:400553\"    \"GeneID:6869\"      #> [2455] \"GeneID:2867\"      \"GeneID:407000\"    \"GeneID:643955\"    #> [2458] \"GeneID:81556\"     \"GeneID:102466758\" \"GeneID:85320\"     #> [2461] \"GeneID:2290\"      \"GeneID:1673\"      \"GeneID:386627\"    #> [2464] \"GeneID:1269\"      \"GeneID:673\"       \"GeneID:101927695\" #> [2467] \"GeneID:161725\"    \"GeneID:123207\"    \"GeneID:347273\"    #> [2470] \"GeneID:58160\"     \"GeneID:100616350\" \"GeneID:114757\"    #> [2473] \"GeneID:5150\"      \"GeneID:100506253\" \"GeneID:29890\"     #> [2476] \"GeneID:441631\"    \"GeneID:51575\"     \"GeneID:102725427\" #> [2479] \"GeneID:11073\"     \"GeneID:101928416\" \"GeneID:79036\"     #> [2482] \"GeneID:22875\"     \"GeneID:1848\"      \"GeneID:100130342\" #> [2485] \"GeneID:2787\"      \"GeneID:102724935\" \"GeneID:204474\"    #> [2488] \"GeneID:101927681\" \"GeneID:56260\"     \"GeneID:55240\"     #> [2491] \"GeneID:101930417\" \"GeneID:100132169\" \"GeneID:2947\"      #> [2494] \"GeneID:100128905\" \"GeneID:5007\"      \"GeneID:1736\"      #> [2497] \"GeneID:100874041\" \"GeneID:729852\"    \"GeneID:3105\"      #> [2500] \"GeneID:84946\"     \"GeneID:102724321\" \"GeneID:102465516\" #> [2503] \"GeneID:724028\"    \"GeneID:2862\"      \"GeneID:84280\"     #> [2506] \"GeneID:101927559\" \"GeneID:100379141\" \"GeneID:11025\"     #> [2509] \"GeneID:574514\"    \"GeneID:6939\"      \"GeneID:30014\"     #> [2512] \"GeneID:8484\"      \"GeneID:102724648\" \"GeneID:3973\"      #> [2515] \"GeneID:117143\"    \"GeneID:100856811\" \"GeneID:100861437\" #> [2518] \"GeneID:23215\"     \"GeneID:390326\"    \"GeneID:283373\"    #> [2521] \"GeneID:100423062\" \"GeneID:102723803\" \"GeneID:1825\"      #> [2524] \"GeneID:220963\"    \"GeneID:9066\"      \"GeneID:84839\"     #> [2527] \"GeneID:26585\"     \"GeneID:9725\"      \"GeneID:56655\"     #> [2530] \"GeneID:101060106\" \"GeneID:25924\"     \"GeneID:22999\"     #> [2533] \"GeneID:84230\"     \"GeneID:6528\"      \"GeneID:101929196\" #> [2536] \"GeneID:101409256\" \"GeneID:730198\"    \"GeneID:128646\"    #> [2539] \"GeneID:84221\"     \"GeneID:102724371\" \"GeneID:101927329\" #> [2542] \"GeneID:55343\"     \"GeneID:101928787\" \"GeneID:651959\"    #> [2545] \"GeneID:100506365\" \"GeneID:653162\"    \"GeneID:728635\"    #> [2548] \"GeneID:155006\"    \"GeneID:619279\"    \"GeneID:100131801\" #> [2551] \"GeneID:693192\"    \"GeneID:121355\"    \"GeneID:102724152\" #> [2554] \"GeneID:102725384\" \"GeneID:8506\"      \"GeneID:202\"       #> [2557] \"GeneID:643803\"    \"GeneID:7290\"      \"GeneID:6359\"      #> [2560] \"GeneID:27005\"     \"GeneID:4831\"      \"GeneID:101928239\" #> [2563] \"GeneID:90121\"     \"GeneID:374928\"    \"GeneID:101060521\" #> [2566] \"GeneID:102723590\" \"GeneID:354\"       \"GeneID:252995\"    #> [2569] \"GeneID:9682\"      \"GeneID:51593\"     \"GeneID:102723705\" #> [2572] \"GeneID:100192379\" \"GeneID:7381\"      \"GeneID:7352\"      #> [2575] \"GeneID:102467223\" \"GeneID:7086\"      \"GeneID:322\"       #> [2578] \"GeneID:132851\"    \"GeneID:441376\"    \"GeneID:54922\"     #> [2581] \"GeneID:6276\"      \"GeneID:9567\"      \"GeneID:90678\"     #> [2584] \"GeneID:8449\"      \"GeneID:80007\"     \"GeneID:57115\"     #> [2587] \"GeneID:404216\"    \"GeneID:983\"       \"GeneID:102725447\" #> [2590] \"GeneID:130340\"    \"GeneID:27\"        \"GeneID:4013\"      #> [2593] \"GeneID:5244\"      \"GeneID:100505710\" \"GeneID:100130017\" #> [2596] \"GeneID:101927518\" \"GeneID:2104\"      \"GeneID:3346\"      #> [2599] \"GeneID:25775\"     \"GeneID:199221\"    \"GeneID:90102\"     #> [2602] \"GeneID:5281\"      \"GeneID:25900\"     \"GeneID:340784\"    #> [2605] \"GeneID:100134091\" \"GeneID:100846978\" \"GeneID:378950\"    #> [2608] \"GeneID:102723790\" \"GeneID:23624\"     \"GeneID:102724872\" #> [2611] \"GeneID:102725398\" \"GeneID:102723599\" \"GeneID:8541\"      #> [2614] \"GeneID:102724818\" \"GeneID:11016\"     \"GeneID:101060264\" #> [2617] \"GeneID:2729\"      \"GeneID:117283\"    \"GeneID:8453\"      #> [2620] \"GeneID:84224\"     \"GeneID:102724136\" \"GeneID:811\"       #> [2623] \"GeneID:8492\"      \"GeneID:101929498\" \"GeneID:101928683\" #> [2626] \"GeneID:8425\"      \"GeneID:54212\"     \"GeneID:1728\"      #> [2629] \"GeneID:55762\"     \"GeneID:338440\"    \"GeneID:57648\"     #> [2632] \"GeneID:100101121\" \"GeneID:55454\"     \"GeneID:100132724\" #> [2635] \"GeneID:116983\"    \"GeneID:101930442\" \"GeneID:23229\"     #> [2638] \"GeneID:219541\"    \"GeneID:92483\"     \"GeneID:101930258\" #> [2641] \"GeneID:51082\"     \"GeneID:102724118\" \"GeneID:3786\"      #> [2644] \"GeneID:100506195\" \"GeneID:6607\"      \"GeneID:102723489\" #> [2647] \"GeneID:102723949\" \"GeneID:101928380\" \"GeneID:254028\"    #> [2650] \"GeneID:101929152\" \"GeneID:6705\"      \"GeneID:79957\"     #> [2653] \"GeneID:143630\"    \"GeneID:64839\"     \"GeneID:282890\"    #> [2656] \"GeneID:85302\"     \"GeneID:170688\"    \"GeneID:730091\"    #> [2659] \"GeneID:652\"       \"GeneID:101927538\" \"GeneID:282966\"    #> [2662] \"GeneID:5968\"      \"GeneID:26049\"     \"GeneID:5327\"      #> [2665] \"GeneID:102723411\" \"GeneID:363\"       \"GeneID:10906\"     #> [2668] \"GeneID:56970\"     \"GeneID:100505685\" \"GeneID:3781\"      #> [2671] \"GeneID:395\"       \"GeneID:388963\"    \"GeneID:55937\"     #> [2674] \"GeneID:100507464\" \"GeneID:100616357\" \"GeneID:729041\"    #> [2677] \"GeneID:391002\"    \"GeneID:7082\"      \"GeneID:3680\"      #> [2680] \"GeneID:102724340\" \"GeneID:286887\"    \"GeneID:148109\"    #> [2683] \"GeneID:26100\"     \"GeneID:100616155\" \"GeneID:7481\"      #> [2686] \"GeneID:1396\"      \"GeneID:3725\"      \"GeneID:1720\"      #> [2689] \"GeneID:693197\"    \"GeneID:100616380\" \"GeneID:4035\"      #> [2692] \"GeneID:102724314\" \"GeneID:4157\"      \"GeneID:85027\"     #> [2695] \"GeneID:102724825\" \"GeneID:85366\"     \"GeneID:8216\"      #> [2698] \"GeneID:984\"       \"GeneID:222950\"    \"GeneID:84131\"     #> [2701] \"GeneID:102725315\" \"GeneID:219557\"    \"GeneID:389090\"    #> [2704] \"GeneID:57705\"     \"GeneID:392459\"    \"GeneID:730227\"    #> [2707] \"GeneID:54578\"     \"GeneID:1915\"      \"GeneID:101928625\" #> [2710] \"GeneID:23334\"     \"GeneID:1770\"      \"GeneID:140290\"    #> [2713] \"GeneID:729770\"    \"GeneID:25940\"     \"GeneID:102725474\" #> [2716] \"GeneID:503538\"    \"GeneID:116028\"    \"GeneID:780853\"    #> [2719] \"GeneID:51004\"     \"GeneID:101927724\" \"GeneID:102724133\" #> [2722] \"GeneID:102723760\" \"GeneID:643332\"    \"GeneID:102725167\" #> [2725] \"GeneID:400058\"    \"GeneID:55184\"     \"GeneID:847\"       #> [2728] \"GeneID:5273\"      \"GeneID:100500903\" \"GeneID:340485\"    #> [2731] \"GeneID:117177\"    \"GeneID:406922\"    \"GeneID:79934\"     #> [2734] \"GeneID:94081\"     \"GeneID:1317\"      \"GeneID:23150\"     #> [2737] \"GeneID:515\"       \"GeneID:2691\"      \"GeneID:101928536\" #> [2740] \"GeneID:8079\"      \"GeneID:100500905\" \"GeneID:6272\"      #> [2743] \"GeneID:83655\"     \"GeneID:4598\"      \"GeneID:7074\"      #> [2746] \"GeneID:102725417\" \"GeneID:100505993\" \"GeneID:3993\"      #> [2749] \"GeneID:55831\"     \"GeneID:10957\"     \"GeneID:3655\"      #> [2752] \"GeneID:55600\"     \"GeneID:114790\"    \"GeneID:101929309\" #> [2755] \"GeneID:7780\"      \"GeneID:730109\"    \"GeneID:101927842\" #> [2758] \"GeneID:643406\"    \"GeneID:196996\"    \"GeneID:91782\"     #> [2761] \"GeneID:51659\"     \"GeneID:79677\"     \"GeneID:9879\"      #> [2764] \"GeneID:201477\"    \"GeneID:64066\"     \"GeneID:1442\"      #> [2767] \"GeneID:1991\"      \"GeneID:57626\"     \"GeneID:648691\"    #> [2770] \"GeneID:101927438\" \"GeneID:23178\"     \"GeneID:64005\"     #> [2773] \"GeneID:102464831\" \"GeneID:677772\"    \"GeneID:100616333\" #> [2776] \"GeneID:441493\"    \"GeneID:100616183\" \"GeneID:2582\"      #> [2779] \"GeneID:167153\"    \"GeneID:84893\"     \"GeneID:100133204\" #> [2782] \"GeneID:26165\"     \"GeneID:100505782\" \"GeneID:23431\"     #> [2785] \"GeneID:79744\"     \"GeneID:643905\"    \"GeneID:157869\"    #> [2788] \"GeneID:11344\"     \"GeneID:677836\"    \"GeneID:51294\"     #> [2791] \"GeneID:7405\"      \"GeneID:25939\"     \"GeneID:27128\"     #> [2794] \"GeneID:60489\"     \"GeneID:23522\"     \"GeneID:728082\"    #> [2797] \"GeneID:286178\"    \"GeneID:6355\"      \"GeneID:5178\"      #> [2800] \"GeneID:440354\"    \"GeneID:55293\"     \"GeneID:80233\"     #> [2803] \"GeneID:100132987\" \"GeneID:100130264\" \"GeneID:2570\"      #> [2806] \"GeneID:11054\"     \"GeneID:50852\"     \"GeneID:55304\"     #> [2809] \"GeneID:1592\"      \"GeneID:102723342\" \"GeneID:29904\"     #> [2812] \"GeneID:326625\"    \"GeneID:84957\"     \"GeneID:83877\"     #> [2815] \"GeneID:825\"       \"GeneID:1747\"      \"GeneID:728276\"    #> [2818] \"GeneID:57701\"     \"GeneID:401563\"    \"GeneID:102723354\" #> [2821] \"GeneID:100500884\" \"GeneID:266747\"    \"GeneID:90523\"     #> [2824] \"GeneID:92312\"     \"GeneID:4705\"      \"GeneID:200845\"    #> [2827] \"GeneID:284001\"    \"GeneID:103752555\" \"GeneID:8260\"      #> [2830] \"GeneID:100126306\" \"GeneID:93550\"     \"GeneID:714\"       #> [2833] \"GeneID:220382\"    \"GeneID:102723831\" \"GeneID:5213\"      #> [2836] \"GeneID:57452\"     \"GeneID:8986\"      \"GeneID:54908\"     #> [2839] \"GeneID:388015\"    \"GeneID:100329135\" \"GeneID:4828\"      #> [2842] \"GeneID:408187\"    \"GeneID:57577\"     \"GeneID:102465906\" #> [2845] \"GeneID:4900\"      \"GeneID:8439\"      \"GeneID:3087\"      #> [2848] \"GeneID:158056\"    \"GeneID:83547\"     \"GeneID:101929081\" #> [2851] \"GeneID:102725135\" \"GeneID:126823\"    \"GeneID:55846\"     #> [2854] \"GeneID:727940\"    \"GeneID:4014\"      \"GeneID:4591\"      #> [2857] \"GeneID:101928744\" \"GeneID:101927756\" \"GeneID:348738\"    #> [2860] \"GeneID:284106\"    \"GeneID:203074\"    \"GeneID:23303\"     #> [2863] \"GeneID:65084\"     \"GeneID:125206\"    \"GeneID:22995\"     #> [2866] \"GeneID:101930134\" \"GeneID:11179\"     \"GeneID:6303\"      #> [2869] \"GeneID:138881\"    \"GeneID:388830\"    \"GeneID:101928931\" #> [2872] \"GeneID:5058\"      \"GeneID:653606\"    \"GeneID:101928205\" #> [2875] \"GeneID:81872\"     \"GeneID:79813\"     \"GeneID:102724117\" #> [2878] \"GeneID:101928751\" \"GeneID:389633\"    \"GeneID:63931\"     #> [2881] \"GeneID:55824\"     \"GeneID:57099\"     \"GeneID:10775\"     #> [2884] \"GeneID:100302156\" \"GeneID:126402\"    \"GeneID:3553\"      #> [2887] \"GeneID:221468\"    \"GeneID:4938\"      \"GeneID:100133251\" #> [2890] \"GeneID:23543\"     \"GeneID:283420\"    \"GeneID:646396\"    #> [2893] \"GeneID:255180\"    \"GeneID:7556\"      \"GeneID:1381\"      #> [2896] \"GeneID:4253\"      \"GeneID:84167\"     \"GeneID:10491\"     #> [2899] \"GeneID:608\"       \"GeneID:729668\"    \"GeneID:103724388\" #> [2902] \"GeneID:1965\"      \"GeneID:9883\"      \"GeneID:101930668\" #> [2905] \"GeneID:79853\"     \"GeneID:2165\"      \"GeneID:102724219\" #> [2908] \"GeneID:386593\"    \"GeneID:102723466\" \"GeneID:8000\"      #> [2911] \"GeneID:283297\"    \"GeneID:102723555\" \"GeneID:899\"       #> [2914] \"GeneID:100033805\" \"GeneID:102725291\" \"GeneID:1557\"      #> [2917] \"GeneID:390201\"    \"GeneID:100506736\" \"GeneID:29843\"     #> [2920] \"GeneID:54585\"     \"GeneID:101927280\" \"GeneID:26036\"     #> [2923] \"GeneID:100616137\" \"GeneID:55432\"     \"GeneID:493901\"    #> [2926] \"GeneID:101410537\" \"GeneID:101929298\" \"GeneID:102725221\" #> [2929] \"GeneID:8673\"      \"GeneID:100500877\" \"GeneID:647121\"    #> [2932] \"GeneID:51441\"     \"GeneID:25999\"     \"GeneID:121364\"    #> [2935] \"GeneID:102724745\" \"GeneID:693159\"    \"GeneID:54948\"     #> [2938] \"GeneID:79047\"     \"GeneID:653598\"    \"GeneID:400658\"    #> [2941] \"GeneID:57568\"     \"GeneID:8878\"      \"GeneID:8178\"      #> [2944] \"GeneID:100132215\" \"GeneID:102724068\" \"GeneID:94005\"     #> [2947] \"GeneID:346528\"    \"GeneID:100506289\" \"GeneID:100616208\" #> [2950] \"GeneID:101927157\" \"GeneID:11218\"     \"GeneID:9086\"      #> [2953] \"GeneID:23190\"     \"GeneID:151242\"    \"GeneID:9643\"      #> [2956] \"GeneID:388524\"    \"GeneID:29126\"     \"GeneID:6770\"      #> [2959] \"GeneID:284697\"    \"GeneID:100287722\" \"GeneID:92086\"     #> [2962] \"GeneID:100996318\" \"GeneID:221895\"    \"GeneID:5592\"      #> [2965] \"GeneID:101929390\" \"GeneID:497049\"    \"GeneID:1839\"      #> [2968] \"GeneID:100775107\" \"GeneID:1486\"      \"GeneID:6872\"      #> [2971] \"GeneID:253959\"    \"GeneID:219858\"    \"GeneID:6943\"      #> [2974] \"GeneID:100129094\" \"GeneID:4572\"      \"GeneID:51385\"     #> [2977] \"GeneID:767577\"    \"GeneID:2203\"      \"GeneID:6328\"      #> [2980] \"GeneID:51043\"     \"GeneID:767583\"    \"GeneID:101929511\" #> [2983] \"GeneID:100616206\" \"GeneID:9419\"      \"GeneID:102465875\" #> [2986] \"GeneID:101929156\" \"GeneID:102724554\" \"GeneID:84992\"     #> [2989] \"GeneID:124912\"    \"GeneID:6653\"      \"GeneID:112597\"    #> [2992] \"GeneID:8477\"      \"GeneID:401261\"    \"GeneID:11172\"     #> [2995] \"GeneID:100861519\" \"GeneID:11340\"     \"GeneID:102724855\" #> [2998] \"GeneID:6954\"      \"GeneID:102724543\" \"GeneID:102724481\" #> [3001] \"GeneID:11272\"     \"GeneID:643596\"    \"GeneID:8148\"      #> [3004] \"GeneID:677831\"    \"GeneID:644353\"    \"GeneID:728\"       #> [3007] \"GeneID:54851\"     \"GeneID:155184\"    \"GeneID:2993\"      #> [3010] \"GeneID:100144603\" \"GeneID:100509490\" \"GeneID:92\"        #> [3013] \"GeneID:80731\"     \"GeneID:101929595\" \"GeneID:57020\"     #> [3016] \"GeneID:128312\"    \"GeneID:84186\"     \"GeneID:9332\"      #> [3019] \"GeneID:100287114\" \"GeneID:693209\"    \"GeneID:146395\"    #> [3022] \"GeneID:100288524\" \"GeneID:54828\"     \"GeneID:83787\"     #> [3025] \"GeneID:387882\"    \"GeneID:197131\"    \"GeneID:494335\"    #> [3028] \"GeneID:222658\"    \"GeneID:4773\"      \"GeneID:349667\"    #> [3031] \"GeneID:10557\"     \"GeneID:344658\"    \"GeneID:1397\"      #> [3034] \"GeneID:100847085\" \"GeneID:101928448\" \"GeneID:10926\"     #> [3037] \"GeneID:84961\"     \"GeneID:252948\"    \"GeneID:100170216\" #> [3040] \"GeneID:574463\"    \"GeneID:1302\"      \"GeneID:102724281\" #> [3043] \"GeneID:55195\"     \"GeneID:23473\"     \"GeneID:148398\"    #> [3046] \"GeneID:102466754\" \"GeneID:692085\"    \"GeneID:285692\"    #> [3049] \"GeneID:84924\"     \"GeneID:11120\"     \"GeneID:101929003\" #> [3052] \"GeneID:148418\"    \"GeneID:220107\"    \"GeneID:100874029\" #> [3055] \"GeneID:23467\"     \"GeneID:123103\"    \"GeneID:3214\"      #> [3058] \"GeneID:3429\"      \"GeneID:102724828\" \"GeneID:664614\"    #> [3061] \"GeneID:102723926\" \"GeneID:401024\"    \"GeneID:135644\"    #> [3064] \"GeneID:10584\"     \"GeneID:56474\"     \"GeneID:81050\"     #> [3067] \"GeneID:63036\"     \"GeneID:221178\"    \"GeneID:102724057\" #> [3070] \"GeneID:57139\"     \"GeneID:256021\"    \"GeneID:4155\"      #> [3073] \"GeneID:101927821\" \"GeneID:79912\"     \"GeneID:101930317\" #> [3076] \"GeneID:100499183\" \"GeneID:85019\"     \"GeneID:11202\"     #> [3079] \"GeneID:100616418\" \"GeneID:200298\"    \"GeneID:100133077\" #> [3082] \"GeneID:4793\"      \"GeneID:54762\"     \"GeneID:23658\"     #> [3085] \"GeneID:3890\"      \"GeneID:79861\"     \"GeneID:101929338\" #> [3088] \"GeneID:128439\"    \"GeneID:57176\"     \"GeneID:124857\"    #> [3091] \"GeneID:7561\"      \"GeneID:692200\"    \"GeneID:100124700\" #> [3094] \"GeneID:102465511\" \"GeneID:6397\"      \"GeneID:158381\"    #> [3097] \"GeneID:64499\"     \"GeneID:100132541\" \"GeneID:2788\"      #> [3100] \"GeneID:64083\"     \"GeneID:102724867\" \"GeneID:282679\"    #> [3103] \"GeneID:101927052\" \"GeneID:6655\"      \"GeneID:101928854\" #> [3106] \"GeneID:2984\"      \"GeneID:102723729\" \"GeneID:93034\"     #> [3109] \"GeneID:9735\"      \"GeneID:574466\"    \"GeneID:102723635\" #> [3112] \"GeneID:100616377\" \"GeneID:574492\"    \"GeneID:1581\"      #> [3115] \"GeneID:101930354\" \"GeneID:326343\"    \"GeneID:7145\"      #> [3118] \"GeneID:3344\"      \"GeneID:2214\"      \"GeneID:132241\"    #> [3121] \"GeneID:26548\"     \"GeneID:101929179\" \"GeneID:401898\"    #> [3124] \"GeneID:102724367\" \"GeneID:101928329\" \"GeneID:407048\"    #> [3127] \"GeneID:101929988\" \"GeneID:116447\"    \"GeneID:10644\"     #> [3130] \"GeneID:116843\"    \"GeneID:7392\"      \"GeneID:645202\"    #> [3133] \"GeneID:390442\"    \"GeneID:79574\"     \"GeneID:200185\"    #> [3136] \"GeneID:374403\"    \"GeneID:101926931\" \"GeneID:149281\"    #> [3139] \"GeneID:201501\"    \"GeneID:145200\"    \"GeneID:387647\"    #> [3142] \"GeneID:2006\"      \"GeneID:11342\"     \"GeneID:101928826\" #> [3145] \"GeneID:101928774\" \"GeneID:6205\"      \"GeneID:101928255\" #> [3148] \"GeneID:1112\"      \"GeneID:145978\"    \"GeneID:27349\"     #> [3151] \"GeneID:353149\"    \"GeneID:84677\"     \"GeneID:57215\"     #> [3154] \"GeneID:100616455\" \"GeneID:100616322\" \"GeneID:101927935\" #> [3157] \"GeneID:101929633\" \"GeneID:51614\"     \"GeneID:81488\"     #> [3160] \"GeneID:100505664\" \"GeneID:26499\"     \"GeneID:129881\"    #> [3163] \"GeneID:5214\"      \"GeneID:101927834\" \"GeneID:30061\"     #> [3166] \"GeneID:653061\"    \"GeneID:64429\"     \"GeneID:1676\"      #> [3169] \"GeneID:4594\"      \"GeneID:101927372\" \"GeneID:102724188\" #> [3172] \"GeneID:102724717\" \"GeneID:677885\"    \"GeneID:101927989\" #> [3175] \"GeneID:3957\"      \"GeneID:55626\"     \"GeneID:4512\"      #> [3178] \"GeneID:102724505\" \"GeneID:91392\"     \"GeneID:101928460\" #> [3181] \"GeneID:138799\"    \"GeneID:84059\"     \"GeneID:100874122\" #> [3184] \"GeneID:84735\"     \"GeneID:207107\"    \"GeneID:101928707\" #> [3187] \"GeneID:8683\"      \"GeneID:84832\"     \"GeneID:103091864\" #> [3190] \"GeneID:100533107\" \"GeneID:256949\"    \"GeneID:100422876\" #> [3193] \"GeneID:54823\"     \"GeneID:55328\"     \"GeneID:100500888\" #> [3196] \"GeneID:407013\"    \"GeneID:100616163\" \"GeneID:388115\"    #> [3199] \"GeneID:101928406\" \"GeneID:129607\"    \"GeneID:339324\"    #> [3202] \"GeneID:11345\"     \"GeneID:25909\"     \"GeneID:90736\"     #> [3205] \"GeneID:80335\"     \"GeneID:2803\"      \"GeneID:100874004\" #> [3208] \"GeneID:4716\"      \"GeneID:10451\"     \"GeneID:442911\"    #> [3211] \"GeneID:100131107\" \"GeneID:7479\"      \"GeneID:724027\"    #> [3214] \"GeneID:80757\"     \"GeneID:595098\"    \"GeneID:100506795\" #> [3217] \"GeneID:102723656\" \"GeneID:100423040\" \"GeneID:137075\"    #> [3220] \"GeneID:169200\"    \"GeneID:1656\"      \"GeneID:375298\"    #> [3223] \"GeneID:7348\"      \"GeneID:574507\"    \"GeneID:24142\"     #> [3226] \"GeneID:100129794\" \"GeneID:388820\"    \"GeneID:100500812\" #> [3229] \"GeneID:51537\"     \"GeneID:10278\"     \"GeneID:5140\"      #> [3232] \"GeneID:406930\"    \"GeneID:100422911\" \"GeneID:79960\"     #> [3235] \"GeneID:53615\"     \"GeneID:101929310\" \"GeneID:101928427\" #> [3238] \"GeneID:100507602\" \"GeneID:22797\"     \"GeneID:102723751\" #> [3241] \"GeneID:100188949\" \"GeneID:448831\"    \"GeneID:285762\"    #> [3244] \"GeneID:84804\"     \"GeneID:101927752\" \"GeneID:79065\"     #> [3247] \"GeneID:100130086\" \"GeneID:55320\"     \"GeneID:100422906\" #> [3250] \"GeneID:150992\"    \"GeneID:100507562\" \"GeneID:116115\"    #> [3253] \"GeneID:440275\"    \"GeneID:387065\"    \"GeneID:339926\"    #> [3256] \"GeneID:27090\"     \"GeneID:5132\"      \"GeneID:59343\"     #> [3259] \"GeneID:102724719\" \"GeneID:133060\"    \"GeneID:2838\"      #> [3262] \"GeneID:100652759\" \"GeneID:388588\"    \"GeneID:102723395\" #> [3265] \"GeneID:200933\"    \"GeneID:23410\"     \"GeneID:101926985\" #> [3268] \"GeneID:25832\"     \"GeneID:94233\"     \"GeneID:102723587\" #> [3271] \"GeneID:728081\"    \"GeneID:79948\"     \"GeneID:7791\"      #> [3274] \"GeneID:7033\"      \"GeneID:84307\"     \"GeneID:23705\"     #> [3277] \"GeneID:150368\"    \"GeneID:7477\"      \"GeneID:167681\"    #> [3280] \"GeneID:10412\"     \"GeneID:123720\"    \"GeneID:284312\"    #> [3283] \"GeneID:132660\"    \"GeneID:728095\"    \"GeneID:219988\"    #> [3286] \"GeneID:101928446\" \"GeneID:100134934\" \"GeneID:57508\"     #> [3289] \"GeneID:23314\"     \"GeneID:1750\"      \"GeneID:29018\"     #> [3292] \"GeneID:84699\"     \"GeneID:101928191\" \"GeneID:10146\"     #> [3295] \"GeneID:100302237\" \"GeneID:100861412\" \"GeneID:9356\"      #> [3298] \"GeneID:102724425\" \"GeneID:100033423\" \"GeneID:51754\"     #> [3301] \"GeneID:8086\"      \"GeneID:642976\"    \"GeneID:51334\"     #> [3304] \"GeneID:100506351\" \"GeneID:101927962\" \"GeneID:219348\"    #> [3307] \"GeneID:23354\"     \"GeneID:144817\"    \"GeneID:154386\"    #> [3310] \"GeneID:10767\"     \"GeneID:100422937\" \"GeneID:51119\"     #> [3313] \"GeneID:101928818\" \"GeneID:55\"        \"GeneID:56979\"     #> [3316] \"GeneID:406989\"    \"GeneID:101060153\" \"GeneID:390705\"    #> [3319] \"GeneID:101930318\" \"GeneID:100169756\" \"GeneID:101930433\" #> [3322] \"GeneID:3691\"      \"GeneID:64320\"     \"GeneID:163404\"    #> [3325] \"GeneID:149499\"    \"GeneID:100288730\" \"GeneID:440131\"    #> [3328] \"GeneID:388456\"    \"GeneID:54468\"     \"GeneID:11020\"     #> [3331] \"GeneID:11095\"     \"GeneID:23509\"     \"GeneID:9453\"      #> [3334] \"GeneID:54700\"     \"GeneID:282969\"    \"GeneID:55803\"     #> [3337] \"GeneID:79963\"     \"GeneID:128346\"    \"GeneID:6689\"      #> [3340] \"GeneID:3107\"      \"GeneID:102724820\" \"GeneID:64318\"     #> [3343] \"GeneID:9303\"      \"GeneID:81614\"     \"GeneID:51227\"     #> [3346] \"GeneID:415116\"    \"GeneID:80010\"     \"GeneID:102724264\" #> [3349] \"GeneID:22911\"     \"GeneID:101929842\" \"GeneID:83475\"     #> [3352] \"GeneID:143458\"    \"GeneID:10799\"     \"GeneID:3227\"      #> [3355] \"GeneID:100874196\" \"GeneID:101930277\" \"GeneID:339529\"    #> [3358] \"GeneID:125950\"    \"GeneID:128\"       \"GeneID:101928149\" #> [3361] \"GeneID:100132731\" \"GeneID:143502\"    \"GeneID:88455\"     #> [3364] \"GeneID:3975\"      \"GeneID:26776\"     \"GeneID:574442\"    #> [3367] \"GeneID:100422883\" \"GeneID:727800\"    \"GeneID:102724747\" #> [3370] \"GeneID:57538\"     \"GeneID:151648\"    \"GeneID:245812\"    #> [3373] \"GeneID:102724429\" \"GeneID:114804\"    \"GeneID:4352\"      #> [3376] \"GeneID:5161\"      \"GeneID:100500915\" \"GeneID:102725341\" #> [3379] \"GeneID:101928139\" \"GeneID:8073\"      \"GeneID:10318\"     #> [3382] \"GeneID:101927586\" \"GeneID:664701\"    \"GeneID:101929586\" #> [3385] \"GeneID:157724\"    \"GeneID:100302166\" \"GeneID:101927595\" #> [3388] \"GeneID:101927774\" \"GeneID:692073\"    \"GeneID:2013\"      #> [3391] \"GeneID:140731\"    \"GeneID:2938\"      \"GeneID:4335\"      #> [3394] \"GeneID:101928998\" \"GeneID:602\"       \"GeneID:284835\"    #> [3397] \"GeneID:387700\"    \"GeneID:30817\"     \"GeneID:64595\"     #> [3400] \"GeneID:101927482\" \"GeneID:101929665\" \"GeneID:9993\"      #> [3403] \"GeneID:6935\"      \"GeneID:6550\"      \"GeneID:100289188\" #> [3406] \"GeneID:402635\"    \"GeneID:101927954\" \"GeneID:102724220\" #> [3409] \"GeneID:102724125\" \"GeneID:102724657\" \"GeneID:8914\"      #> [3412] \"GeneID:2829\"      \"GeneID:858\"       \"GeneID:3712\"      #> [3415] \"GeneID:441871\"    \"GeneID:10198\"     \"GeneID:388531\"    #> [3418] \"GeneID:100500825\" \"GeneID:51115\"     \"GeneID:101929524\" #> [3421] \"GeneID:6759\"      \"GeneID:137964\"    \"GeneID:83540\"     #> [3424] \"GeneID:51439\"     \"GeneID:56905\"     \"GeneID:101928847\" #> [3427] \"GeneID:1305\"      \"GeneID:541473\"    \"GeneID:101929535\" #> [3430] \"GeneID:100873964\" \"GeneID:100302172\" \"GeneID:101929321\" #> [3433] \"GeneID:101929074\" \"GeneID:101929520\" \"GeneID:123745\"    #> [3436] \"GeneID:10693\"     \"GeneID:100169958\" \"GeneID:100313892\" #> [3439] \"GeneID:112616\"    \"GeneID:100506860\" \"GeneID:406894\"    #> [3442] \"GeneID:440021\"    \"GeneID:100616478\" \"GeneID:23645\"     #> [3445] \"GeneID:23033\"     \"GeneID:102466192\" \"GeneID:100616253\" #> [3448] \"GeneID:101930432\" \"GeneID:9722\"      \"GeneID:11259\"     #> [3451] \"GeneID:85444\"     \"GeneID:89122\"     \"GeneID:100130015\" #> [3454] \"GeneID:440952\"    \"GeneID:79091\"     \"GeneID:102465497\" #> [3457] \"GeneID:100996707\" \"GeneID:6778\"      \"GeneID:8972\"      #> [3460] \"GeneID:101927730\" \"GeneID:767605\"    \"GeneID:692075\"    #> [3463] \"GeneID:101928212\" \"GeneID:10915\"     \"GeneID:10249\"     #> [3466] \"GeneID:4726\"      \"GeneID:574407\"    \"GeneID:6084\"      #> [3469] \"GeneID:101929381\" \"GeneID:2262\"      \"GeneID:101928101\" #> [3472] \"GeneID:2695\"      \"GeneID:6925\"      \"GeneID:966\"       #> [3475] \"GeneID:728392\"    \"GeneID:7105\"      \"GeneID:92689\"     #> [3478] \"GeneID:349408\"    \"GeneID:79027\"     \"GeneID:63897\"     #> [3481] \"GeneID:731424\"    \"GeneID:102725243\" \"GeneID:202658\"    #> [3484] \"GeneID:80755\"     \"GeneID:101929416\" \"GeneID:8360\"      #> [3487] \"GeneID:102546228\" \"GeneID:91147\"     \"GeneID:6529\"      #> [3490] \"GeneID:100505938\" \"GeneID:414212\"    \"GeneID:100996679\" #> [3493] \"GeneID:4927\"      \"GeneID:51619\"     \"GeneID:22897\"     #> [3496] \"GeneID:6881\"      \"GeneID:283189\"    \"GeneID:414201\"    #> [3499] \"GeneID:102725122\" \"GeneID:100302273\" \"GeneID:8487\"      #> [3502] \"GeneID:84944\"     \"GeneID:116236\"    \"GeneID:101929774\" #> [3505] \"GeneID:7456\"      \"GeneID:3776\"      \"GeneID:441461\"    #> [3508] \"GeneID:374907\"    \"GeneID:56964\"     \"GeneID:728441\"    #> [3511] \"GeneID:79857\"     \"GeneID:196513\"    \"GeneID:219484\"    #> [3514] \"GeneID:81552\"     \"GeneID:100302195\" \"GeneID:23164\"     #> [3517] \"GeneID:102723870\" \"GeneID:646457\"    \"GeneID:442194\"    #> [3520] \"GeneID:54892\"     \"GeneID:6354\"      \"GeneID:54542\"     #> [3523] \"GeneID:284402\"    \"GeneID:100126345\" \"GeneID:55003\"     #> [3526] \"GeneID:1729\"      \"GeneID:5596\"      \"GeneID:255488\"    #> [3529] \"GeneID:5741\"      \"GeneID:51314\"     \"GeneID:5194\"      #> [3532] \"GeneID:102503427\" \"GeneID:148\"       \"GeneID:79906\"     #> [3535] \"GeneID:57380\"     \"GeneID:5957\"      \"GeneID:102724919\" #> [3538] \"GeneID:51727\"     \"GeneID:344875\"    \"GeneID:206426\"    #> [3541] \"GeneID:102724864\" \"GeneID:5329\"      \"GeneID:8338\"      #> [3544] \"GeneID:114907\"    \"GeneID:401474\"    \"GeneID:116512\"    #> [3547] \"GeneID:1734\"      \"GeneID:201229\"    \"GeneID:23365\"     #> [3550] \"GeneID:101927426\" \"GeneID:388780\"    \"GeneID:8269\"      #> [3553] \"GeneID:10129\"     \"GeneID:400927\"    \"GeneID:80228\"     #> [3556] \"GeneID:10093\"     \"GeneID:84661\"     \"GeneID:283093\"    #> [3559] \"GeneID:4149\"      \"GeneID:646743\"    \"GeneID:151313\"    #> [3562] \"GeneID:1416\"      \"GeneID:100287216\" \"GeneID:10861\"     #> [3565] \"GeneID:8209\"      \"GeneID:2205\"      \"GeneID:130502\"    #> [3568] \"GeneID:101927333\" \"GeneID:4624\"      \"GeneID:152503\"    #> [3571] \"GeneID:7476\"      \"GeneID:729739\"    \"GeneID:101054525\" #> [3574] \"GeneID:142679\"    \"GeneID:64682\"     \"GeneID:90113\"     #> [3577] \"GeneID:11140\"     \"GeneID:55970\"     \"GeneID:2051\"      #> [3580] \"GeneID:102724509\" \"GeneID:102724611\" \"GeneID:403284\"    #> [3583] \"GeneID:102724966\" \"GeneID:26251\"     \"GeneID:101060146\" #> [3586] \"GeneID:1215\"      \"GeneID:26275\"     \"GeneID:399909\"    #> [3589] \"GeneID:93663\"     \"GeneID:55288\"     \"GeneID:148304\"    #> [3592] \"GeneID:8817\"      \"GeneID:10043\"     \"GeneID:643486\"    #> [3595] \"GeneID:10714\"     \"GeneID:101928042\" \"GeneID:383\"       #> [3598] \"GeneID:101927688\" \"GeneID:84243\"     \"GeneID:116151\"    #> [3601] \"GeneID:102724031\" \"GeneID:100287284\" \"GeneID:100996619\" #> [3604] \"GeneID:100147773\" \"GeneID:441250\"    \"GeneID:55002\"     #> [3607] \"GeneID:102577426\" \"GeneID:285501\"    \"GeneID:9532\"      #> [3610] \"GeneID:221785\"    \"GeneID:57096\"     \"GeneID:1605\"      #> [3613] \"GeneID:151531\"    \"GeneID:120534\"    \"GeneID:23028\"     #> [3616] \"GeneID:101928661\" \"GeneID:102157402\" \"GeneID:340107\"    #> [3619] \"GeneID:3017\"      \"GeneID:7141\"      \"GeneID:23082\"     #> [3622] \"GeneID:375387\"    \"GeneID:100302741\" \"GeneID:7775\"      #> [3625] \"GeneID:100288198\" \"GeneID:100873946\" \"GeneID:442075\"    #> [3628] \"GeneID:114819\"    \"GeneID:100128590\" \"GeneID:142689\"    #> [3631] \"GeneID:10971\"     \"GeneID:81790\"     \"GeneID:693183\"    #> [3634] \"GeneID:3449\"      \"GeneID:100422914\" \"GeneID:26091\"     #> [3637] \"GeneID:3142\"      \"GeneID:6142\"      \"GeneID:677847\"    #> [3640] \"GeneID:101930098\" \"GeneID:4017\"      \"GeneID:100133161\" #> [3643] \"GeneID:643224\"    \"GeneID:27300\"     \"GeneID:101927972\" #> [3646] \"GeneID:220064\"    \"GeneID:4702\"      \"GeneID:246213\"    #> [3649] \"GeneID:280657\"    \"GeneID:102725152\" \"GeneID:64591\"     #> [3652] \"GeneID:57226\"     \"GeneID:7874\"      \"GeneID:84133\"     #> [3655] \"GeneID:26038\"     \"GeneID:144423\"    \"GeneID:57689\"     #> [3658] \"GeneID:23057\"     \"GeneID:9994\"      \"GeneID:8290\"      #> [3661] \"GeneID:11194\"     \"GeneID:100996668\" \"GeneID:102724377\" #> [3664] \"GeneID:10297\"     \"GeneID:100616186\" \"GeneID:84628\"     #> [3667] \"GeneID:254013\"    \"GeneID:10254\"     \"GeneID:219595\"    #> [3670] \"GeneID:90850\"     \"GeneID:51318\"     \"GeneID:100616149\" #> [3673] \"GeneID:1419\"      \"GeneID:154091\"    \"GeneID:80154\"     #> [3676] \"GeneID:100996862\" \"GeneID:161753\"    \"GeneID:54537\"     #> [3679] \"GeneID:728130\"    \"GeneID:4632\"      \"GeneID:389432\"    #> [3682] \"GeneID:486\"       \"GeneID:29903\"     \"GeneID:101928192\" #> [3685] \"GeneID:574461\"    \"GeneID:84232\"     \"GeneID:723779\"    #> [3688] \"GeneID:101928865\" \"GeneID:7009\"      \"GeneID:83999\"     #> [3691] \"GeneID:816\"       \"GeneID:79364\"     \"GeneID:196541\"    #> [3694] \"GeneID:8614\"      \"GeneID:11141\"     \"GeneID:199953\"    #> [3697] \"GeneID:145553\"    \"GeneID:80324\"     \"GeneID:389383\"    #> [3700] \"GeneID:1089\"      \"GeneID:102725145\" \"GeneID:441052\"    #> [3703] \"GeneID:100996648\" \"GeneID:222696\"    \"GeneID:1352\"      #> [3706] \"GeneID:574432\"    \"GeneID:6525\"      \"GeneID:10126\"     #> [3709] \"GeneID:728114\"    \"GeneID:101927133\" \"GeneID:9632\"      #> [3712] \"GeneID:125704\"    \"GeneID:54708\"     \"GeneID:84101\"     #> [3715] \"GeneID:1611\"      \"GeneID:7169\"      \"GeneID:163087\"    #> [3718] \"GeneID:101930091\" \"GeneID:102466816\" \"GeneID:101928846\" #> [3721] \"GeneID:100500887\" \"GeneID:102723482\" \"GeneID:7205\"      #> [3724] \"GeneID:80320\"     \"GeneID:54206\"     \"GeneID:93058\"     #> [3727] \"GeneID:100302124\" \"GeneID:101927779\" \"GeneID:9182\"      #> [3730] \"GeneID:23129\"     \"GeneID:6713\"      \"GeneID:116085\"    #> [3733] \"GeneID:25904\"     \"GeneID:29855\"     \"GeneID:283025\"    #> [3736] \"GeneID:57724\"     \"GeneID:54905\"     \"GeneID:101928034\" #> [3739] \"GeneID:56302\"     \"GeneID:2986\"      \"GeneID:4573\"      #> [3742] \"GeneID:102725255\" \"GeneID:8537\"      \"GeneID:728728\"    #> [3745] \"GeneID:93\"        \"GeneID:100302227\" \"GeneID:693216\"    #> [3748] \"GeneID:100500837\" \"GeneID:8704\"      \"GeneID:90333\"     #> [3751] \"GeneID:79882\"     \"GeneID:4312\"      \"GeneID:23066\"     #> [3754] \"GeneID:100129407\" \"GeneID:341116\"    \"GeneID:390928\"    #> [3757] \"GeneID:102466724\" \"GeneID:101928856\" \"GeneID:81875\"     #> [3760] \"GeneID:57407\"     \"GeneID:93492\"     \"GeneID:319085\"    #> [3763] \"GeneID:9300\"      \"GeneID:10157\"     \"GeneID:100126323\" #> [3766] \"GeneID:56674\"     \"GeneID:27181\"     \"GeneID:51465\"     #> [3769] \"GeneID:201725\"    \"GeneID:84820\"     \"GeneID:407012\"    #> [3772] \"GeneID:406940\"    \"GeneID:10554\"     \"GeneID:100847019\" #> [3775] \"GeneID:767580\"    \"GeneID:55236\"     \"GeneID:9265\"      #> [3778] \"GeneID:2710\"      \"GeneID:23187\"     \"GeneID:101929320\" #> [3781] \"GeneID:57805\"     \"GeneID:440300\"    \"GeneID:50943\"     #> [3784] \"GeneID:285326\"    \"GeneID:27329\"     \"GeneID:9407\"      #> [3787] \"GeneID:1500\"      \"GeneID:442421\"    \"GeneID:1357\"      #> [3790] \"GeneID:100240735\" \"GeneID:100616173\" \"GeneID:646480\"    #> [3793] \"GeneID:9275\"      \"GeneID:9774\"      \"GeneID:388581\"    #> [3796] \"GeneID:646600\"    \"GeneID:101927359\" \"GeneID:100506498\" #> [3799] \"GeneID:147040\"    \"GeneID:63904\"     \"GeneID:6414\"      #> [3802] \"GeneID:50814\"     \"GeneID:6404\"      \"GeneID:3516\"      #> [3805] \"GeneID:100874007\" \"GeneID:6801\"      \"GeneID:53942\"     #> [3808] \"GeneID:122769\"    \"GeneID:26095\"     \"GeneID:29951\"     #> [3811] \"GeneID:3569\"      \"GeneID:257396\"    \"GeneID:101928761\" #> [3814] \"GeneID:23643\"     \"GeneID:143162\"    \"GeneID:517\"       #> [3817] \"GeneID:100131755\" \"GeneID:163882\"    \"GeneID:101930295\" #> [3820] \"GeneID:101927491\" \"GeneID:1175\"      \"GeneID:55051\"     #> [3823] \"GeneID:64225\"     \"GeneID:10655\"     \"GeneID:90268\"     #> [3826] \"GeneID:9261\"      \"GeneID:30851\"     \"GeneID:100289150\" #> [3829] \"GeneID:255520\"    \"GeneID:339539\"    \"GeneID:100616134\" #> [3832] \"GeneID:100126348\" \"GeneID:29888\"     \"GeneID:100505564\" #> [3835] \"GeneID:670\"       \"GeneID:150082\"    \"GeneID:55620\"     #> [3838] \"GeneID:102725065\" \"GeneID:57794\"     \"GeneID:102466658\" #> [3841] \"GeneID:140730\"    \"GeneID:158158\"    \"GeneID:5575\"      #> [3844] \"GeneID:8943\"      \"GeneID:100128126\" \"GeneID:3763\"      #> [3847] \"GeneID:100847060\" \"GeneID:101929790\" \"GeneID:8125\"      #> [3850] \"GeneID:57467\"     \"GeneID:2585\"      \"GeneID:3641\"      #> [3853] \"GeneID:401134\"    \"GeneID:79804\"     \"GeneID:51150\"     #> [3856] \"GeneID:8082\"      \"GeneID:102725316\" \"GeneID:55707\"     #> [3859] \"GeneID:102725064\" \"GeneID:100169952\" \"GeneID:91056\"     #> [3862] \"GeneID:83903\"     \"GeneID:102724229\" \"GeneID:100288805\" #> [3865] \"GeneID:160419\"    \"GeneID:65108\"     \"GeneID:550113\"    #> [3868] \"GeneID:54874\"     \"GeneID:389396\"    \"GeneID:11100\"     #> [3871] \"GeneID:10276\"     \"GeneID:3831\"      \"GeneID:102465501\" #> [3874] \"GeneID:57786\"     \"GeneID:8444\"      \"GeneID:84444\"     #> [3877] \"GeneID:140902\"    \"GeneID:51\"        \"GeneID:6101\"      #> [3880] \"GeneID:23262\"     \"GeneID:100129034\" \"GeneID:10817\"     #> [3883] \"GeneID:101927874\" \"GeneID:574412\"    \"GeneID:441897\"    #> [3886] \"GeneID:7187\"      \"GeneID:4791\"      \"GeneID:389715\"    #> [3889] \"GeneID:102723365\" \"GeneID:100506928\" \"GeneID:140870\"    #> [3892] \"GeneID:102724128\" \"GeneID:7011\"      \"GeneID:79921\"     #> [3895] \"GeneID:101926935\" \"GeneID:101927603\" \"GeneID:693232\"    #> [3898] \"GeneID:387486\"    \"GeneID:85369\"     \"GeneID:1497\"      #> [3901] \"GeneID:57061\"     \"GeneID:100129716\" \"GeneID:102724567\" #> [3904] \"GeneID:83597\"     \"GeneID:101409254\" \"GeneID:55101\"     #> [3907] \"GeneID:3600\"      \"GeneID:4543\"      \"GeneID:375484\"    #> [3910] \"GeneID:203076\"    \"GeneID:103695365\" \"GeneID:406969\"    #> [3913] \"GeneID:9920\"      \"GeneID:60526\"     \"GeneID:64089\"     #> [3916] \"GeneID:5276\"      \"GeneID:8626\"      \"GeneID:101928115\" #> [3919] \"GeneID:6468\"      \"GeneID:728927\"    \"GeneID:102723894\" #> [3922] \"GeneID:574452\"    \"GeneID:100287010\" \"GeneID:102659353\" #> [3925] \"GeneID:729877\"    \"GeneID:392392\"    \"GeneID:347169\"    #> [3928] \"GeneID:10560\"     \"GeneID:101927150\" \"GeneID:2335\"      #> [3931] \"GeneID:85319\"     \"GeneID:79776\"     \"GeneID:101929484\" #> [3934] \"GeneID:29923\"     \"GeneID:3174\"      \"GeneID:100128081\" #> [3937] \"GeneID:26102\"     \"GeneID:24150\"     \"GeneID:100861523\" #> [3940] \"GeneID:100302165\" \"GeneID:285965\"    \"GeneID:9057\"      #> [3943] \"GeneID:102466271\" \"GeneID:283432\"    \"GeneID:80139\"     #> [3946] \"GeneID:1365\"      \"GeneID:440097\"    \"GeneID:9315\"      #> [3949] \"GeneID:2140\"      \"GeneID:392364\"    \"GeneID:101929530\" #> [3952] \"GeneID:102723583\" \"GeneID:102725159\" \"GeneID:10102\"     #> [3955] \"GeneID:101927560\" \"GeneID:100616381\" \"GeneID:5446\"      #> [3958] \"GeneID:23001\"     \"GeneID:643365\"    \"GeneID:537\"       #> [3961] \"GeneID:23404\"     \"GeneID:419\"       \"GeneID:337970\"    #> [3964] \"GeneID:7802\"      \"GeneID:140710\"    \"GeneID:120227\"    #> [3967] \"GeneID:283685\"    \"GeneID:5570\"      \"GeneID:7095\"      #> [3970] \"GeneID:5693\"      \"GeneID:8214\"      \"GeneID:102724604\" #> [3973] \"GeneID:64231\"     \"GeneID:100125288\" \"GeneID:285331\"    #> [3976] \"GeneID:100126335\" \"GeneID:100533106\" \"GeneID:83900\"     #> [3979] \"GeneID:100874270\" \"GeneID:220832\"    \"GeneID:101927854\" #> [3982] \"GeneID:407055\"    \"GeneID:166968\"    \"GeneID:339829\"    #> [3985] \"GeneID:163033\"    \"GeneID:667\"       \"GeneID:5919\"      #> [3988] \"GeneID:51460\"     \"GeneID:100422915\" \"GeneID:339975\"    #> [3991] \"GeneID:9172\"      \"GeneID:144920\"    \"GeneID:100302256\" #> [3994] \"GeneID:121278\"    \"GeneID:400454\"    \"GeneID:442919\"    #> [3997] \"GeneID:102725410\" \"GeneID:11235\"     \"GeneID:100288152\" #> [4000] \"GeneID:79007\"     \"GeneID:101929211\" \"GeneID:63027\"     #> [4003] \"GeneID:101927687\" \"GeneID:401289\"    \"GeneID:29947\"     #> [4006] \"GeneID:6014\"      \"GeneID:406937\"    \"GeneID:57419\"     #> [4009] \"GeneID:100652931\" \"GeneID:220081\"    \"GeneID:56288\"     #> [4012] \"GeneID:1968\"      \"GeneID:388818\"    \"GeneID:10100\"     #> [4015] \"GeneID:284352\"    \"GeneID:102724539\" \"GeneID:767608\"    #> [4018] \"GeneID:6626\"      \"GeneID:3765\"      \"GeneID:9628\"      #> [4021] \"GeneID:767611\"    \"GeneID:101928909\" \"GeneID:102724499\" #> [4024] \"GeneID:100861549\" \"GeneID:2331\"      \"GeneID:92922\"     #> [4027] \"GeneID:7516\"      \"GeneID:102724716\" \"GeneID:101926998\" #> [4030] \"GeneID:162515\"    \"GeneID:29902\"     \"GeneID:55180\"     #> [4033] \"GeneID:100507131\" \"GeneID:101929577\" \"GeneID:283214\"    #> [4036] \"GeneID:6480\"      \"GeneID:9557\"      \"GeneID:58503\"     #> [4039] \"GeneID:100128276\" \"GeneID:120863\"    \"GeneID:93100\"     #> [4042] \"GeneID:100288380\" \"GeneID:729475\"    \"GeneID:102723409\" #> [4045] \"GeneID:101929658\" \"GeneID:101928413\" \"GeneID:100507341\" #> [4048] \"GeneID:5378\"      \"GeneID:3880\"      \"GeneID:100506679\" #> [4051] \"GeneID:101930458\" \"GeneID:4635\"      \"GeneID:64773\"     #> [4054] \"GeneID:23117\"     \"GeneID:57152\"     \"GeneID:100616399\" #> [4057] \"GeneID:5199\"      \"GeneID:407032\"    \"GeneID:100507306\" #> [4060] \"GeneID:83795\"     \"GeneID:339822\"    \"GeneID:4881\"      #> [4063] \"GeneID:3447\"      \"GeneID:285375\"    \"GeneID:100131205\" #> [4066] \"GeneID:51185\"     \"GeneID:441168\"    \"GeneID:102723953\" #> [4069] \"GeneID:29941\"     \"GeneID:9560\"      \"GeneID:101927202\" #> [4072] \"GeneID:101928979\" \"GeneID:1404\"      \"GeneID:102723523\" #> [4075] \"GeneID:727832\"    \"GeneID:201163\"    \"GeneID:5160\"      #> [4078] \"GeneID:25790\"     \"GeneID:100652740\" \"GeneID:2569\"      #> [4081] \"GeneID:2534\"      \"GeneID:102725019\" \"GeneID:6846\"      #> [4084] \"GeneID:5564\"      \"GeneID:8452\"      \"GeneID:7534\"      #> [4087] \"GeneID:102724655\" \"GeneID:25906\"     \"GeneID:57703\"     #> [4090] \"GeneID:124491\"    \"GeneID:102725165\" \"GeneID:101927118\" #> [4093] \"GeneID:132949\"    \"GeneID:9026\"      \"GeneID:5453\"      #> [4096] \"GeneID:2108\"      \"GeneID:6908\"      \"GeneID:55291\"     #> [4099] \"GeneID:101929129\" \"GeneID:54809\"     \"GeneID:133558\"    #> [4102] \"GeneID:133923\"    \"GeneID:1893\"      \"GeneID:150967\"    #> [4105] \"GeneID:54940\"     \"GeneID:101928611\" \"GeneID:8647\"      #> [4108] \"GeneID:101927441\" \"GeneID:6750\"      \"GeneID:102723709\" #> [4111] \"GeneID:1340\"      \"GeneID:102466875\" \"GeneID:55211\"     #> [4114] \"GeneID:382\"       \"GeneID:101928673\" \"GeneID:8456\"      #> [4117] \"GeneID:102724382\" \"GeneID:100874086\" \"GeneID:100874176\" #> [4120] \"GeneID:693170\"    \"GeneID:101926889\" \"GeneID:58487\"     #> [4123] \"GeneID:414351\"    \"GeneID:90784\"     \"GeneID:51025\"     #> [4126] \"GeneID:388242\"    \"GeneID:283171\"    \"GeneID:344\"       #> [4129] \"GeneID:101929759\" \"GeneID:79812\"     \"GeneID:29775\"     #> [4132] \"GeneID:93643\"     \"GeneID:100874088\" \"GeneID:125113\"    #> [4135] \"GeneID:100302201\" \"GeneID:89944\"     \"GeneID:102724731\" #> [4138] \"GeneID:693165\"    \"GeneID:1040\"      \"GeneID:54903\"     #> [4141] \"GeneID:101928019\" \"GeneID:27010\"     \"GeneID:100132813\" #> [4144] \"GeneID:387266\"    \"GeneID:10313\"     \"GeneID:145942\"    #> [4147] \"GeneID:400823\"    \"GeneID:102725110\" \"GeneID:9076\"      #> [4150] \"GeneID:253573\"    \"GeneID:653505\"    \"GeneID:81034\"     #> [4153] \"GeneID:23191\"     \"GeneID:91120\"     \"GeneID:728763\"    #> [4156] \"GeneID:102724660\" \"GeneID:3846\"      \"GeneID:8287\"      #> [4159] \"GeneID:1495\"      \"GeneID:100313830\" \"GeneID:100169956\" #> [4162] \"GeneID:3081\"      \"GeneID:729506\"    \"GeneID:100126330\" #> [4165] \"GeneID:643802\"    \"GeneID:57699\"     \"GeneID:440993\"    #> [4168] \"GeneID:574460\"    \"GeneID:9630\"      \"GeneID:101929183\" #> [4171] \"GeneID:56254\"     \"GeneID:4322\"      \"GeneID:54476\"     #> [4174] \"GeneID:84321\"     \"GeneID:55231\"     \"GeneID:400797\"    #> [4177] \"GeneID:5676\"      \"GeneID:100874155\" \"GeneID:9343\"      #> [4180] \"GeneID:101927297\" \"GeneID:124411\"    \"GeneID:9825\"      #> [4183] \"GeneID:85452\"     \"GeneID:101927137\" \"GeneID:101928819\" #> [4186] \"GeneID:151742\"    \"GeneID:84451\"     \"GeneID:7284\"      #> [4189] \"GeneID:100616275\" \"GeneID:2633\"      \"GeneID:260341\"    #> [4192] \"GeneID:100873990\" \"GeneID:79736\"     \"GeneID:3809\"      #> [4195] \"GeneID:246100\"    \"GeneID:5106\"      \"GeneID:2661\"      #> [4198] \"GeneID:101929406\" \"GeneID:2001\"      \"GeneID:4733\"      #> [4201] \"GeneID:100033425\" \"GeneID:1727\"      \"GeneID:100126313\" #> [4204] \"GeneID:352887\"    \"GeneID:503519\"    \"GeneID:102724553\" #> [4207] \"GeneID:101928486\" \"GeneID:100170227\" \"GeneID:253190\"    #> [4210] \"GeneID:152302\"    \"GeneID:51629\"     \"GeneID:7681\"      #> [4213] \"GeneID:147429\"    \"GeneID:101060778\" \"GeneID:101930526\" #> [4216] \"GeneID:22864\"     \"GeneID:1327\"      \"GeneID:11099\"     #> [4219] \"GeneID:653252\"    \"GeneID:9196\"      \"GeneID:6494\"      #> [4222] \"GeneID:1641\"      \"GeneID:693234\"    \"GeneID:102724443\" #> [4225] \"GeneID:64651\"     \"GeneID:153364\"    \"GeneID:801\"       #> [4228] \"GeneID:100422845\" \"GeneID:100287513\" \"GeneID:26278\"     #> [4231] \"GeneID:23428\"     \"GeneID:100873989\" \"GeneID:9669\"      #> [4234] \"GeneID:7275\"      \"GeneID:100506492\" \"GeneID:102725369\" #> [4237] \"GeneID:100132967\" \"GeneID:58485\"     \"GeneID:594842\"    #> [4240] \"GeneID:55623\"     \"GeneID:65981\"     \"GeneID:101927342\" #> [4243] \"GeneID:84458\"     \"GeneID:728643\"    \"GeneID:26584\"     #> [4246] \"GeneID:3815\"      \"GeneID:1559\"      \"GeneID:102725041\" #> [4249] \"GeneID:102724779\" \"GeneID:102723838\" \"GeneID:100509457\" #> [4252] \"GeneID:128367\"    \"GeneID:139324\"    \"GeneID:401040\"    #> [4255] \"GeneID:101927241\" \"GeneID:1717\"      \"GeneID:27032\"     #> [4258] \"GeneID:10120\"     \"GeneID:4913\"      \"GeneID:100113392\" #> [4261] \"GeneID:117248\"    \"GeneID:256355\"    \"GeneID:645426\"    #> [4264] \"GeneID:100996249\" \"GeneID:6591\"      \"GeneID:1837\"      #> [4267] \"GeneID:5901\"      \"GeneID:23770\"     \"GeneID:100507423\" #> [4270] \"GeneID:645682\"    \"GeneID:80219\"     \"GeneID:128178\"    #> [4273] \"GeneID:23555\"     \"GeneID:158471\"    \"GeneID:26226\"     #> [4276] \"GeneID:5368\"      \"GeneID:4571\"      \"GeneID:101928015\" #> [4279] \"GeneID:100506599\" \"GeneID:10938\"     \"GeneID:121457\"    #> [4282] \"GeneID:22976\"     \"GeneID:332\"       \"GeneID:102725466\" #> [4285] \"GeneID:100422877\" \"GeneID:6975\"      \"GeneID:26863\"     #> [4288] \"GeneID:90655\"     \"GeneID:692209\"    \"GeneID:728621\"    #> [4291] \"GeneID:79730\"     \"GeneID:65122\"     \"GeneID:6261\"      #> [4294] \"GeneID:27130\"     \"GeneID:56121\"     \"GeneID:2063\"      #> [4297] \"GeneID:945\"       \"GeneID:387032\"    \"GeneID:768206\"    #> [4300] \"GeneID:137970\"    \"GeneID:22846\"     \"GeneID:65268\"     #> [4303] \"GeneID:27164\"     \"GeneID:101928119\" \"GeneID:9524\"      #> [4306] \"GeneID:55627\"     \"GeneID:392\"       \"GeneID:101927220\" #> [4309] \"GeneID:6009\"      \"GeneID:692099\"    \"GeneID:27004\"     #> [4312] \"GeneID:9437\"      \"GeneID:57533\"     \"GeneID:94023\"     #> [4315] \"GeneID:5885\"      \"GeneID:143379\"    \"GeneID:100616415\" #> [4318] \"GeneID:1816\"      \"GeneID:3161\"      \"GeneID:440567\"    #> [4321] \"GeneID:102724954\" \"GeneID:8861\"      \"GeneID:147011\"    #> [4324] \"GeneID:8854\"      \"GeneID:146923\"    \"GeneID:5925\"      #> [4327] \"GeneID:101060588\" \"GeneID:101927283\" \"GeneID:55092\"     #> [4330] \"GeneID:23075\"     \"GeneID:101928281\" \"GeneID:728090\"    #> [4333] \"GeneID:388591\"    \"GeneID:7006\"      \"GeneID:9781\"      #> [4336] \"GeneID:22865\"     \"GeneID:10798\"     \"GeneID:101928310\" #> [4339] \"GeneID:137362\"    \"GeneID:102724224\" \"GeneID:102466659\" #> [4342] \"GeneID:54996\"     \"GeneID:145249\"    \"GeneID:126074\"    #> [4345] \"GeneID:55837\"     \"GeneID:81932\"     \"GeneID:406945\"    #> [4348] \"GeneID:101928407\" \"GeneID:101929385\" \"GeneID:113220\"    #> [4351] \"GeneID:1356\"      \"GeneID:84612\"     \"GeneID:162605\"    #> [4354] \"GeneID:64963\"     \"GeneID:10673\"     \"GeneID:693140\"    #> [4357] \"GeneID:152065\"    \"GeneID:55314\"     \"GeneID:116349\"    #> [4360] \"GeneID:4033\"      \"GeneID:7090\"      \"GeneID:119694\"    #> [4363] \"GeneID:286753\"    \"GeneID:90379\"     \"GeneID:400748\"    #> [4366] \"GeneID:102465480\" \"GeneID:102723910\" \"GeneID:9834\"      #> [4369] \"GeneID:283710\"    \"GeneID:1195\"      \"GeneID:286343\"    #> [4372] \"GeneID:158511\"    \"GeneID:342933\"    \"GeneID:79101\"     #> [4375] \"GeneID:26747\"     \"GeneID:11083\"     \"GeneID:693138\"    #> [4378] \"GeneID:7779\"      \"GeneID:100133985\" \"GeneID:51510\"     #> [4381] \"GeneID:400604\"    \"GeneID:101929172\" \"GeneID:3952\"      #> [4384] \"GeneID:728400\"    \"GeneID:84239\"     \"GeneID:151534\"    #> [4387] \"GeneID:23255\"     \"GeneID:51350\"     \"GeneID:101928287\" #> [4390] \"GeneID:100302232\" \"GeneID:101929903\" \"GeneID:574469\"    #> [4393] \"GeneID:100129480\" \"GeneID:2668\"      \"GeneID:5931\"      #> [4396] \"GeneID:101928431\" \"GeneID:102724205\" \"GeneID:100616494\" #> [4399] \"GeneID:4090\"      \"GeneID:57084\"     \"GeneID:9326\"      #> [4402] \"GeneID:221044\"    \"GeneID:693173\"    \"GeneID:101927155\" #> [4405] \"GeneID:283598\"    \"GeneID:80758\"     \"GeneID:84548\"     #> [4408] \"GeneID:654\"       \"GeneID:2620\"      \"GeneID:116\"       #> [4411] \"GeneID:9464\"      \"GeneID:3842\"      \"GeneID:256227\"    #> [4414] \"GeneID:23649\"     \"GeneID:319100\"    \"GeneID:25786\"     #> [4417] \"GeneID:8874\"      \"GeneID:84959\"     \"GeneID:246778\"    #> [4420] \"GeneID:51296\"     \"GeneID:4846\"      \"GeneID:23595\"     #> [4423] \"GeneID:388507\"    \"GeneID:100287948\" \"GeneID:100422931\" #> [4426] \"GeneID:7976\"      \"GeneID:57664\"     \"GeneID:54852\"     #> [4429] \"GeneID:101929897\" \"GeneID:56547\"     \"GeneID:55011\"     #> [4432] \"GeneID:8567\"      \"GeneID:153201\"    \"GeneID:101930584\" #> [4435] \"GeneID:79661\"     \"GeneID:10469\"     \"GeneID:390648\"    #> [4438] \"GeneID:8995\"      \"GeneID:9132\"      \"GeneID:595\"       #> [4441] \"GeneID:1718\"      \"GeneID:127602\"    \"GeneID:10196\"     #> [4444] \"GeneID:348808\"    \"GeneID:922\"       \"GeneID:101928578\" #> [4447] \"GeneID:3044\"      \"GeneID:641365\"    \"GeneID:100507240\" #> [4450] \"GeneID:101928353\" \"GeneID:113457\"    \"GeneID:100505716\" #> [4453] \"GeneID:102723706\" \"GeneID:5294\"      \"GeneID:102465974\" #> [4456] \"GeneID:729384\"    \"GeneID:220441\"    \"GeneID:23086\"     #> [4459] \"GeneID:100288798\" \"GeneID:148170\"    \"GeneID:6829\"      #> [4462] \"GeneID:729732\"    \"GeneID:3860\"      \"GeneID:34\"        #> [4465] \"GeneID:100169760\" \"GeneID:102723724\" \"GeneID:101928248\" #> [4468] \"GeneID:91012\"     \"GeneID:338\"       \"GeneID:81037\"     #> [4471] \"GeneID:9350\"      \"GeneID:5224\"      \"GeneID:102724831\" #> [4474] \"GeneID:54928\"     \"GeneID:204\"       \"GeneID:55793\"     #> [4477] \"GeneID:8842\"      \"GeneID:10036\"     \"GeneID:6519\"      #> [4480] \"GeneID:440145\"    \"GeneID:60561\"     \"GeneID:2196\"      #> [4483] \"GeneID:64344\"     \"GeneID:3191\"      \"GeneID:102724676\" #> [4486] \"GeneID:2299\"      \"GeneID:84720\"     \"GeneID:23081\"     #> [4489] \"GeneID:84332\"     \"GeneID:102465862\" \"GeneID:81025\"     #> [4492] \"GeneID:2828\"      \"GeneID:3015\"      \"GeneID:8417\"      #> [4495] \"GeneID:448834\"    \"GeneID:10312\"     \"GeneID:339453\"    #> [4498] \"GeneID:23588\"     \"GeneID:5149\"      \"GeneID:727684\"    #> [4501] \"GeneID:90321\"     \"GeneID:7504\"      \"GeneID:102725197\" #> [4504] \"GeneID:23612\"     \"GeneID:2492\"      \"GeneID:350383\"    #> [4507] \"GeneID:81893\"     \"GeneID:102725149\" \"GeneID:101926992\" #> [4510] \"GeneID:166336\"    \"GeneID:389015\"    \"GeneID:101930489\" #> [4513] \"GeneID:3475\"      \"GeneID:11166\"     \"GeneID:554045\"    #> [4516] \"GeneID:6347\"      \"GeneID:100128496\" \"GeneID:400046\"    #> [4519] \"GeneID:100653005\" \"GeneID:102724653\" \"GeneID:256076\"    #> [4522] \"GeneID:100652749\" \"GeneID:101928123\" \"GeneID:101930473\" #> [4525] \"GeneID:102725388\" \"GeneID:163\"       \"GeneID:442229\"    #> [4528] \"GeneID:1551\"      \"GeneID:2002\"      \"GeneID:9771\"      #> [4531] \"GeneID:101929451\" \"GeneID:100874093\" \"GeneID:115908\"    #> [4534] \"GeneID:4864\"      \"GeneID:653483\"    \"GeneID:5992\"      #> [4537] \"GeneID:646802\"    \"GeneID:10927\"     \"GeneID:102725161\" #> [4540] \"GeneID:91368\"     \"GeneID:644903\"    \"GeneID:101060091\" #> [4543] \"GeneID:407024\"    \"GeneID:112869\"    \"GeneID:5434\"      #> [4546] \"GeneID:3265\"      \"GeneID:101927822\" \"GeneID:127385\"    #> [4549] \"GeneID:100505658\" \"GeneID:3783\"      \"GeneID:6041\"      #> [4552] \"GeneID:121006\"    \"GeneID:101929996\" \"GeneID:56938\"     #> [4555] \"GeneID:7767\"      \"GeneID:55636\"     \"GeneID:84996\"     #> [4558] \"GeneID:1440\"      \"GeneID:100422907\" \"GeneID:26151\"     #> [4561] \"GeneID:404744\"    \"GeneID:83875\"     \"GeneID:84085\"     #> [4564] \"GeneID:83955\"     \"GeneID:153910\"    \"GeneID:123099\"    #> [4567] \"GeneID:100302261\" \"GeneID:100422955\" \"GeneID:102723762\" #> [4570] \"GeneID:751816\"    \"GeneID:9045\"      \"GeneID:815\"       #> [4573] \"GeneID:55705\"     \"GeneID:10672\"     \"GeneID:55758\"     #> [4576] \"GeneID:101928770\" \"GeneID:286257\"    \"GeneID:102724082\" #> [4579] \"GeneID:1052\"      \"GeneID:158724\"    \"GeneID:148198\"    #> [4582] \"GeneID:153579\"    \"GeneID:441212\"    \"GeneID:101927352\" #> [4585] \"GeneID:51316\"     \"GeneID:84522\"     \"GeneID:7434\"      #> [4588] \"GeneID:386724\"    \"GeneID:100873766\" \"GeneID:100506405\" #> [4591] \"GeneID:337969\"    \"GeneID:100507203\" \"GeneID:283922\"    #> [4594] \"GeneID:5395\"      \"GeneID:100302277\" \"GeneID:101930070\" #> [4597] \"GeneID:1326\"      \"GeneID:102723956\" \"GeneID:102724094\" #> [4600] \"GeneID:2891\"      \"GeneID:100885781\" \"GeneID:6723\"      #> [4603] \"GeneID:283422\"    \"GeneID:55187\"     \"GeneID:100126800\" #> [4606] \"GeneID:285941\"    \"GeneID:55832\"     \"GeneID:976\"       #> [4609] \"GeneID:642778\"    \"GeneID:339978\"    \"GeneID:57678\"     #> [4612] \"GeneID:207147\"    \"GeneID:54512\"     \"GeneID:25960\"     #> [4615] \"GeneID:283298\"    \"GeneID:6281\"      \"GeneID:25973\"     #> [4618] \"GeneID:51343\"     \"GeneID:1536\"      \"GeneID:102725214\" #> [4621] \"GeneID:101929631\" \"GeneID:118738\"    \"GeneID:26960\"     #> [4624] \"GeneID:25871\"     \"GeneID:4951\"      \"GeneID:100113381\" #> [4627] \"GeneID:100616305\" \"GeneID:1534\"      \"GeneID:124540\"    #> [4630] \"GeneID:146562\"    \"GeneID:11031\"     \"GeneID:51330\"     #> [4633] \"GeneID:92105\"     \"GeneID:84958\"     \"GeneID:101928650\" #> [4636] \"GeneID:388886\"    \"GeneID:54954\"     \"GeneID:100616353\" #> [4639] \"GeneID:102724572\" \"GeneID:100133920\" \"GeneID:57799\"     #> [4642] \"GeneID:3266\"      \"GeneID:102724474\" \"GeneID:100505724\" #> [4645] \"GeneID:574477\"    \"GeneID:260425\"    \"GeneID:11056\"     #> [4648] \"GeneID:100652770\" \"GeneID:81607\"     \"GeneID:100033815\" #> [4651] \"GeneID:284611\"    \"GeneID:260436\"    \"GeneID:160287\"    #> [4654] \"GeneID:100874355\" \"GeneID:642236\"    \"GeneID:101929953\" #> [4657] \"GeneID:26280\"     \"GeneID:102725188\" \"GeneID:345895\"    #> [4660] \"GeneID:101928779\" \"GeneID:148281\"    \"GeneID:100996405\" #> [4663] \"GeneID:10316\"     \"GeneID:101927737\" \"GeneID:693120\"    #> [4666] \"GeneID:10597\"     \"GeneID:8789\"      \"GeneID:101929983\" #> [4669] \"GeneID:25759\"     \"GeneID:63940\"     \"GeneID:2979\"      #> [4672] \"GeneID:5136\"      \"GeneID:90411\"     \"GeneID:4066\"      #> [4675] \"GeneID:6318\"      \"GeneID:5528\"      \"GeneID:8480\"      #> [4678] \"GeneID:442916\"    \"GeneID:10911\"     \"GeneID:23546\"     #> [4681] \"GeneID:100996746\" \"GeneID:100506660\" \"GeneID:101930671\" #> [4684] \"GeneID:81565\"     \"GeneID:386653\"    \"GeneID:606500\"    #> [4687] \"GeneID:51560\"     \"GeneID:157310\"    \"GeneID:7138\"      #> [4690] \"GeneID:400818\"    \"GeneID:9493\"      \"GeneID:414766\"    #> [4693] \"GeneID:114803\"    \"GeneID:4232\"      \"GeneID:101927486\" #> [4696] \"GeneID:6657\"      \"GeneID:340120\"    \"GeneID:124871\"    #> [4699] \"GeneID:54546\"     \"GeneID:100616345\" \"GeneID:102725345\" #> [4702] \"GeneID:138240\"    \"GeneID:284009\"    \"GeneID:101927079\" #> [4705] \"GeneID:28231\"     \"GeneID:1675\"      \"GeneID:10347\"     #> [4708] \"GeneID:79913\"     \"GeneID:5076\"      \"GeneID:27173\"     #> [4711] \"GeneID:100507056\" \"GeneID:9064\"      \"GeneID:677792\"    #> [4714] \"GeneID:101060553\" \"GeneID:89874\"     \"GeneID:26610\"     #> [4717] \"GeneID:728379\"    \"GeneID:2588\"      \"GeneID:23657\"     #> [4720] \"GeneID:134637\"    \"GeneID:100616220\" \"GeneID:101928513\" #> [4723] \"GeneID:401388\"    \"GeneID:100287314\" \"GeneID:152195\"    #> [4726] \"GeneID:647323\"    \"GeneID:101927354\" \"GeneID:38\"        #> [4729] \"GeneID:335\"       \"GeneID:100652857\" \"GeneID:84690\"     #> [4732] \"GeneID:90627\"     \"GeneID:642946\"    \"GeneID:92799\"     #> [4735] \"GeneID:101928303\" \"GeneID:102723826\" \"GeneID:150786\"    #> [4738] \"GeneID:26149\"     \"GeneID:654322\"    \"GeneID:1299\"      #> [4741] \"GeneID:100506749\" \"GeneID:51760\"     \"GeneID:646960\"    #> [4744] \"GeneID:8739\"      \"GeneID:51128\"     \"GeneID:100616297\" #> [4747] \"GeneID:4568\"      \"GeneID:102724142\" \"GeneID:100129620\" #> [4750] \"GeneID:115704\"    \"GeneID:124976\"    \"GeneID:100500819\" #> [4753] \"GeneID:100507520\" \"GeneID:84253\"     \"GeneID:101930349\" #> [4756] \"GeneID:400541\"    \"GeneID:347746\"    \"GeneID:101929333\" #> [4759] \"GeneID:101928437\" \"GeneID:102466252\" \"GeneID:55785\"     #> [4762] \"GeneID:101927085\" \"GeneID:22906\"     \"GeneID:287\"       #> [4765] \"GeneID:100500773\" \"GeneID:1318\"      \"GeneID:51582\"     #> [4768] \"GeneID:64901\"     \"GeneID:102723562\" \"GeneID:8756\"      #> [4771] \"GeneID:101927235\" \"GeneID:27163\"     \"GeneID:57060\"     #> [4774] \"GeneID:102723330\" \"GeneID:2885\"      \"GeneID:9144\"      #> [4777] \"GeneID:3805\"      \"GeneID:80144\"     \"GeneID:286828\"    #> [4780] \"GeneID:124626\"    \"GeneID:101930530\" \"GeneID:100126315\" #> [4783] \"GeneID:79982\"     \"GeneID:100422829\" \"GeneID:140432\"    #> [4786] \"GeneID:26958\"     \"GeneID:84255\"     \"GeneID:101927227\" #> [4789] \"GeneID:9463\"      \"GeneID:101927745\" \"GeneID:374875\"    #> [4792] \"GeneID:102723931\" \"GeneID:102465484\" \"GeneID:285704\"    #> [4795] \"GeneID:5831\"      \"GeneID:84868\"     \"GeneID:54979\"     #> [4798] \"GeneID:65982\"     \"GeneID:113612\"    \"GeneID:493913\"    #> [4801] \"GeneID:290\"       \"GeneID:642633\"    \"GeneID:54453\"     #> [4804] \"GeneID:100313842\" \"GeneID:115265\"    \"GeneID:133746\"    #> [4807] \"GeneID:7038\"      \"GeneID:101927147\" \"GeneID:8790\"      #> [4810] \"GeneID:730394\"    \"GeneID:1579\"      \"GeneID:100885795\" #> [4813] \"GeneID:9088\"      \"GeneID:10101\"     \"GeneID:1854\"      #> [4816] \"GeneID:83443\"     \"GeneID:57827\"     \"GeneID:340168\"    #> [4819] \"GeneID:574489\"    \"GeneID:101929815\" \"GeneID:254528\"    #> [4822] \"GeneID:3268\"      \"GeneID:144501\"    \"GeneID:338324\"    #> [4825] \"GeneID:400955\"    \"GeneID:102725306\" \"GeneID:102723612\" #> [4828] \"GeneID:100129128\" \"GeneID:730183\"    \"GeneID:23436\"     #> [4831] \"GeneID:138009\"    \"GeneID:102723577\" \"GeneID:100507206\" #> [4834] \"GeneID:9895\"      \"GeneID:102723916\" \"GeneID:100506944\" #> [4837] \"GeneID:8555\"      \"GeneID:6154\"      \"GeneID:54508\"     #> [4840] \"GeneID:26071\"     \"GeneID:100874246\" \"GeneID:3357\"      #> [4843] \"GeneID:9\"         \"GeneID:81061\"     \"GeneID:101927708\" #> [4846] \"GeneID:646625\"    \"GeneID:768097\"    \"GeneID:10573\"     #> [4849] \"GeneID:102724788\" \"GeneID:9194\"      \"GeneID:6916\"      #> [4852] \"GeneID:203286\"    \"GeneID:11017\"     \"GeneID:58530\"     #> [4855] \"GeneID:477\"       \"GeneID:123016\"    \"GeneID:8643\"      #> [4858] \"GeneID:101927186\" \"GeneID:440023\"    \"GeneID:574434\"    #> [4861] \"GeneID:727924\"    \"GeneID:9403\"      \"GeneID:728407\"    #> [4864] \"GeneID:101927895\" \"GeneID:100996735\" \"GeneID:79990\"     #> [4867] \"GeneID:4218\"      \"GeneID:90874\"     \"GeneID:84125\"     #> [4870] \"GeneID:643827\"    \"GeneID:59269\"     \"GeneID:102724843\" #> [4873] \"GeneID:101448202\" \"GeneID:56937\"     \"GeneID:100113402\" #> [4876] \"GeneID:120224\"    \"GeneID:101927063\" \"GeneID:693136\"    #> [4879] \"GeneID:102724339\" \"GeneID:1266\"      \"GeneID:653489\"    #> [4882] \"GeneID:101927366\" \"GeneID:51147\"     \"GeneID:54847\"     #> [4885] \"GeneID:642636\"    \"GeneID:128408\"    \"GeneID:100616256\" #> [4888] \"GeneID:10047\"     \"GeneID:5583\"      \"GeneID:219854\"    #> [4891] \"GeneID:8803\"      \"GeneID:139599\"    \"GeneID:51548\"     #> [4894] \"GeneID:102723476\" \"GeneID:100142659\" \"GeneID:10734\"     #> [4897] \"GeneID:54887\"     \"GeneID:57497\"     \"GeneID:112939\"    #> [4900] \"GeneID:8263\"      \"GeneID:136853\"    \"GeneID:9986\"      #> [4903] \"GeneID:5781\"      \"GeneID:116496\"    \"GeneID:304\"       #> [4906] \"GeneID:2935\"      \"GeneID:23438\"     \"GeneID:389741\"    #> [4909] \"GeneID:51118\"     \"GeneID:101927467\" \"GeneID:101928361\" #> [4912] \"GeneID:102723607\" \"GeneID:79022\"     \"GeneID:100507387\" #> [4915] \"GeneID:79781\"     \"GeneID:100313772\" \"GeneID:60625\"     #> [4918] \"GeneID:102723310\" \"GeneID:377841\"    \"GeneID:64772\"     #> [4921] \"GeneID:201283\"    \"GeneID:378951\"    \"GeneID:60495\"     #> [4924] \"GeneID:100288432\" \"GeneID:255809\"    \"GeneID:100616318\" #> [4927] \"GeneID:326342\"    \"GeneID:100500894\" \"GeneID:23647\"     #> [4930] \"GeneID:2353\"      \"GeneID:4728\"      \"GeneID:101929770\" #> [4933] \"GeneID:100874236\" \"GeneID:6624\"      \"GeneID:102724862\" #> [4936] \"GeneID:400410\"    \"GeneID:7111\"      \"GeneID:101927992\" #> [4939] \"GeneID:100422968\" \"GeneID:643923\"    \"GeneID:4897\"      #> [4942] \"GeneID:348761\"    \"GeneID:26749\"     \"GeneID:6585\"      #> [4945] \"GeneID:101930248\" \"GeneID:157983\"    \"GeneID:29844\"     #> [4948] \"GeneID:3976\"      \"GeneID:25920\"     \"GeneID:27079\"     #> [4951] \"GeneID:9658\"      \"GeneID:101927046\" \"GeneID:22980\"     #> [4954] \"GeneID:8939\"      \"GeneID:101929560\" \"GeneID:91289\"     #> [4957] \"GeneID:388730\"    \"GeneID:5451\"      \"GeneID:905\"       #> [4960] \"GeneID:9053\"      \"GeneID:25788\"     \"GeneID:101928349\" #> [4963] \"GeneID:91526\"     \"GeneID:83460\"     \"GeneID:26354\"     #> [4966] \"GeneID:693124\"    \"GeneID:101929352\" \"GeneID:5046\"      #> [4969] \"GeneID:101730217\" \"GeneID:102723306\" \"GeneID:100422957\" #> [4972] \"GeneID:728734\"    \"GeneID:91754\"     \"GeneID:83452\"     #> [4975] \"GeneID:26022\"     \"GeneID:1910\"      \"GeneID:8840\"      #> [4978] \"GeneID:101927614\" \"GeneID:440087\"    \"GeneID:4494\"      #> [4981] \"GeneID:100527950\" \"GeneID:101927873\" \"GeneID:388813\"    #> [4984] \"GeneID:3298\"      \"GeneID:100616211\" \"GeneID:3925\"      #> [4987] \"GeneID:114881\"    \"GeneID:9479\"      \"GeneID:100130733\" #> [4990] \"GeneID:58495\"     \"GeneID:100422971\" \"GeneID:8801\"      #> [4993] \"GeneID:101929951\" \"GeneID:101928474\" \"GeneID:285172\"    #> [4996] \"GeneID:54856\"     \"GeneID:26819\"     \"GeneID:101928992\" #> [4999] \"GeneID:79001\"     \"GeneID:79782\"     \"GeneID:100101115\" #> [5002] \"GeneID:100101116\" \"GeneID:100101117\" \"GeneID:100101118\" #> [5005] \"GeneID:100101120\" \"GeneID:100132596\" \"GeneID:100289087\" #> [5008] \"GeneID:100533178\" \"GeneID:100874056\" \"GeneID:101929148\" #> [5011] \"GeneID:102723934\" \"GeneID:114758\"    \"GeneID:114760\"    #> [5014] \"GeneID:114761\"    \"GeneID:140032\"    \"GeneID:159119\"    #> [5017] \"GeneID:159125\"    \"GeneID:159162\"    \"GeneID:159163\"    #> [5020] \"GeneID:1617\"      \"GeneID:203611\"    \"GeneID:22829\"     #> [5023] \"GeneID:246119\"    \"GeneID:246122\"    \"GeneID:246126\"    #> [5026] \"GeneID:252946\"    \"GeneID:252949\"    \"GeneID:252950\"    #> [5029] \"GeneID:252951\"    \"GeneID:252952\"    \"GeneID:252953\"    #> [5032] \"GeneID:252954\"    \"GeneID:252955\"    \"GeneID:253175\"    #> [5035] \"GeneID:286554\"    \"GeneID:286557\"    \"GeneID:340618\"    #> [5038] \"GeneID:353513\"    \"GeneID:353515\"    \"GeneID:378948\"    #> [5041] \"GeneID:378949\"    \"GeneID:401629\"    \"GeneID:401630\"    #> [5044] \"GeneID:425057\"    \"GeneID:441543\"    \"GeneID:442867\"    #> [5047] \"GeneID:442868\"    \"GeneID:474148\"    \"GeneID:474149\"    #> [5050] \"GeneID:474150\"    \"GeneID:474151\"    \"GeneID:50858\"     #> [5053] \"GeneID:5616\"      \"GeneID:57054\"     \"GeneID:57055\"     #> [5056] \"GeneID:57135\"     \"GeneID:5940\"      \"GeneID:60439\"     #> [5059] \"GeneID:6192\"      \"GeneID:64593\"     \"GeneID:6736\"      #> [5062] \"GeneID:7258\"      \"GeneID:728137\"    \"GeneID:728395\"    #> [5065] \"GeneID:728403\"    \"GeneID:7404\"      \"GeneID:7544\"      #> [5068] \"GeneID:8284\"      \"GeneID:83259\"     \"GeneID:83864\"     #> [5071] \"GeneID:83866\"     \"GeneID:83867\"     \"GeneID:83868\"     #> [5074] \"GeneID:83869\"     \"GeneID:84559\"     \"GeneID:84672\"     #> [5077] \"GeneID:84673\"     \"GeneID:8653\"      \"GeneID:86614\"     #> [5080] \"GeneID:90665\"     \"GeneID:9082\"      \"GeneID:9083\"      #> [5083] \"GeneID:9084\"      \"GeneID:9087\"      \"GeneID:9426\""},{"path":"https://insightsengineering.github.io/hermes/reference/h_all_duplicated.html","id":null,"dir":"Reference","previous_headings":"","what":"Finding All Duplicates in Vector ‚Äî h_all_duplicated","title":"Finding All Duplicates in Vector ‚Äî h_all_duplicated","text":"difference duplicated() also first occurrence duplicate flagged TRUE.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/h_all_duplicated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Finding All Duplicates in Vector ‚Äî h_all_duplicated","text":"","code":"h_all_duplicated(x)"},{"path":"https://insightsengineering.github.io/hermes/reference/h_all_duplicated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Finding All Duplicates in Vector ‚Äî h_all_duplicated","text":"x vector data frame array NULL.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/h_all_duplicated.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Finding All Duplicates in Vector ‚Äî h_all_duplicated","text":"Logical vector flagging occurrences duplicate values TRUE.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/h_all_duplicated.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Finding All Duplicates in Vector ‚Äî h_all_duplicated","text":"","code":"h_all_duplicated(c(\"a\", \"a\", \"b\")) #> [1]  TRUE  TRUE FALSE duplicated(c(\"a\", \"a\", \"b\")) #> [1] FALSE  TRUE FALSE"},{"path":"https://insightsengineering.github.io/hermes/reference/h_df_factors_with_explicit_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Conversion to Factors with Explicit Missing Level in a data.frame ‚Äî h_df_factors_with_explicit_na","title":"Conversion to Factors with Explicit Missing Level in a data.frame ‚Äî h_df_factors_with_explicit_na","text":"helper function converts character logical variables factor variables data.frame. also sets explicit missing data level factor variables least one NA. Empty strings handled NA.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/h_df_factors_with_explicit_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conversion to Factors with Explicit Missing Level in a data.frame ‚Äî h_df_factors_with_explicit_na","text":"","code":"h_df_factors_with_explicit_na(data, na_level = \"<Missing>\")"},{"path":"https://insightsengineering.github.io/hermes/reference/h_df_factors_with_explicit_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conversion to Factors with Explicit Missing Level in a data.frame ‚Äî h_df_factors_with_explicit_na","text":"data (data.frame) input data least one column. na_level (string) explicit missing level used.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/h_df_factors_with_explicit_na.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conversion to Factors with Explicit Missing Level in a data.frame ‚Äî h_df_factors_with_explicit_na","text":"modified data.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/h_df_factors_with_explicit_na.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conversion to Factors with Explicit Missing Level in a data.frame ‚Äî h_df_factors_with_explicit_na","text":"","code":"dat <- data.frame(   a = c(NA, 2),   b = c(\"A\", NA),   c = c(\"C\", \"D\"),   d = factor(c(NA, \"X\")),   e = factor(c(\"Y\", \"Z\")) ) h_df_factors_with_explicit_na(dat) #>    a         b c         d e #> 1 NA         A C <Missing> Y #> 2  2 <Missing> D         X Z"},{"path":"https://insightsengineering.github.io/hermes/reference/h_diff_expr_deseq2.html","id":null,"dir":"Reference","previous_headings":"","what":"DESeq2 Differential Expression Analysis ‚Äî h_diff_expr_deseq2","title":"DESeq2 Differential Expression Analysis ‚Äî h_diff_expr_deseq2","text":"helper functions performs differential expression analysis DESeq2::DESeq() given AnyHermesData input design matrix.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/h_diff_expr_deseq2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DESeq2 Differential Expression Analysis ‚Äî h_diff_expr_deseq2","text":"","code":"h_diff_expr_deseq2(object, design, ...)"},{"path":"https://insightsengineering.github.io/hermes/reference/h_diff_expr_deseq2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DESeq2 Differential Expression Analysis ‚Äî h_diff_expr_deseq2","text":"object (HermesData) input. design (matrix) design matrix. ... additional arguments internally passed DESeq2::DESeq() (fitType, sfType, minReplicatesForReplace, useT, minmu).","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/h_diff_expr_deseq2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DESeq2 Differential Expression Analysis ‚Äî h_diff_expr_deseq2","text":"data frame columns log2_fc (estimated log2 fold change), stat (Wald statistic), p_val (raw p-value), adj_p_pval (Benjamini-Hochberg adjusted p-value).","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/h_diff_expr_deseq2.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"DESeq2 Differential Expression Analysis ‚Äî h_diff_expr_deseq2","text":"Love MI, Huber W, Anders S (2014). ‚ÄúModerated estimation fold change dispersion RNA-seq data DESeq2.‚Äù Genome Biology, 15(12), 550. doi:10.1186/s13059-014-0550-8 .","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/h_diff_expr_deseq2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DESeq2 Differential Expression Analysis ‚Äî h_diff_expr_deseq2","text":"","code":"object <- hermes_data  # Create the design matrix corresponding to the factor of interest. design <- model.matrix(~SEX, colData(object))  # Then perform the `DESeq2` differential expression analysis. result <- h_diff_expr_deseq2(object, design) head(result) #>                 log2_fc      stat        p_val    adj_p_val #> GeneID:9834    5.859486  5.440035 5.327024e-08 0.0001852739 #> GeneID:221188  3.450713  4.805489 1.543734e-06 0.0026845539 #> GeneID:151242 -4.316426 -4.707534 2.507316e-06 0.0029068155 #> GeneID:9002    2.324969  4.390859 1.129039e-05 0.0097580091 #> GeneID:64344  -2.880611 -4.343419 1.402819e-05 0.0097580091 #> GeneID:4359    2.914210  4.206676 2.591542e-05 0.0113396717  # Change of the `fitType` can be required in some cases. result2 <- h_diff_expr_deseq2(object, design, fitType = \"local\") head(result2) #>                  log2_fc      stat        p_val    adj_p_val #> GeneID:9834    5.8595097  5.436419 5.436203e-08 0.0001605311 #> GeneID:221188  3.4507368  4.796226 1.616827e-06 0.0023872456 #> GeneID:151242 -4.3163441 -4.693049 2.691627e-06 0.0026494579 #> GeneID:9002    2.3249808  4.379230 1.190996e-05 0.0073970422 #> GeneID:64344  -2.8805945 -4.368250 1.252462e-05 0.0073970422 #> GeneID:51575  -0.7889652 -4.255997 2.081193e-05 0.0076822022"},{"path":"https://insightsengineering.github.io/hermes/reference/h_diff_expr_voom.html","id":null,"dir":"Reference","previous_headings":"","what":"limma/voom Differential Expression Analysis ‚Äî h_diff_expr_voom","title":"limma/voom Differential Expression Analysis ‚Äî h_diff_expr_voom","text":"helper functions performs differential expression analysis voom method limma package (via limma::voom(), limma::lmFit() limma::eBayes()) given counts AnyHermesData object corresponding design matrix.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/h_diff_expr_voom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"limma/voom Differential Expression Analysis ‚Äî h_diff_expr_voom","text":"","code":"h_diff_expr_voom(object, design, ...)"},{"path":"https://insightsengineering.github.io/hermes/reference/h_diff_expr_voom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"limma/voom Differential Expression Analysis ‚Äî h_diff_expr_voom","text":"object (AnyHermesData) input. design (matrix) design matrix. ... additional arguments internally passed limma::eBayes() (robust, trend, proportion, winsor.tail.p, stdev.coef.lim).","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/h_diff_expr_voom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"limma/voom Differential Expression Analysis ‚Äî h_diff_expr_voom","text":"data frame columns log2_fc (estimated log2 fold change), stat (moderated t-statistic), p_val (raw p-value), adj_p_pval (Benjamini-Hochberg adjusted p-value).","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/h_diff_expr_voom.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"limma/voom Differential Expression Analysis ‚Äî h_diff_expr_voom","text":"Ritchie , Phipson B, Wu D, Hu Y, Law CW, Shi W, Smyth GK (2015). ‚Äúlimma powers differential expression analyses RNA-sequencing microarray studies.‚Äù Nucleic Acids Research, 43(7), e47. doi:10.1093/nar/gkv007 . Law CW, Chen Y, Shi W, Smyth GK (2014). ‚Äúvoom: precision weights unlock linear model analysis tools RNA-seq read counts.‚Äù Genome Biology, 15(2), R29. doi:10.1186/gb-2014-15-2-r29 .","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/h_diff_expr_voom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"limma/voom Differential Expression Analysis ‚Äî h_diff_expr_voom","text":"","code":"object <- hermes_data  # Create the design matrix corresponding to the factor of interest. design <- model.matrix(~SEX, colData(object))  # Then perform the differential expression analysis. result <- h_diff_expr_voom(object, design) head(result) #>                  log2_fc      stat        p_val adj_p_val #> GeneID:8000   -2.3200712 -4.239244 0.0004209192 0.9118348 #> GeneID:51227  -1.0467295 -4.032550 0.0006788432 0.9118348 #> GeneID:344558  1.6896266  3.824046 0.0010993677 0.9118348 #> GeneID:51575  -0.7760844 -3.746293 0.0013155805 0.9118348 #> GeneID:151242 -3.4358998 -3.570103 0.0019741997 0.9118348 #> GeneID:8904   -0.6100354 -3.542864 0.0021017199 0.9118348  # Sometimes we might want to specify method details. result2 <- h_diff_expr_voom(object, design, trend = TRUE, robust = TRUE) head(result2) #>                  log2_fc      stat        p_val adj_p_val #> GeneID:8000   -2.3200712 -3.848050 0.0008857274 0.8995289 #> GeneID:51227  -1.0467295 -3.724654 0.0011933484 0.8995289 #> GeneID:344558  1.6896266  3.684191 0.0013155791 0.8995289 #> GeneID:51575  -0.7760844 -3.498308 0.0020551283 0.8995289 #> GeneID:151242 -3.4358998 -3.441687 0.0023525055 0.8995289 #> GeneID:123036  2.9002547  3.431263 0.0024329189 0.8995289"},{"path":"https://insightsengineering.github.io/hermes/reference/h_ensembl_to_entrez_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Translation of Ensembl to Entrez Gene IDs ‚Äî h_ensembl_to_entrez_ids","title":"Translation of Ensembl to Entrez Gene IDs ‚Äî h_ensembl_to_entrez_ids","text":"helper function queries BioMart translate Ensembl Entrez Gene IDs.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/h_ensembl_to_entrez_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Translation of Ensembl to Entrez Gene IDs ‚Äî h_ensembl_to_entrez_ids","text":"","code":"h_ensembl_to_entrez_ids(gene_ids, mart)"},{"path":"https://insightsengineering.github.io/hermes/reference/h_ensembl_to_entrez_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Translation of Ensembl to Entrez Gene IDs ‚Äî h_ensembl_to_entrez_ids","text":"gene_ids (character)Ensembl gene IDs. mart (Mart) given biomaRt::Mart object.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/h_ensembl_to_entrez_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Translation of Ensembl to Entrez Gene IDs ‚Äî h_ensembl_to_entrez_ids","text":"Character vector Entrez gene IDs.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/h_ensembl_to_entrez_ids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Translation of Ensembl to Entrez Gene IDs ‚Äî h_ensembl_to_entrez_ids","text":"","code":"if (interactive()) {   mart <- biomaRt::useMart(\"ensembl\", dataset = \"hsapiens_gene_ensembl\")   h_ensembl_to_entrez_ids(c(\"ENSG00000135407\", \"ENSG00000241644\"), mart) }"},{"path":"https://insightsengineering.github.io/hermes/reference/h_get_annotation_biomart.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Annotations from BioMart ‚Äî h_get_annotation_biomart","title":"Get Annotations from BioMart ‚Äî h_get_annotation_biomart","text":"Helper function query annotations biomaRt, cleaned gene IDs specific ID variable given biomaRt::Mart.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/h_get_annotation_biomart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Annotations from BioMart ‚Äî h_get_annotation_biomart","text":"","code":"h_get_annotation_biomart(gene_ids, id_var, mart)"},{"path":"https://insightsengineering.github.io/hermes/reference/h_get_annotation_biomart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Annotations from BioMart ‚Äî h_get_annotation_biomart","text":"gene_ids (character) gene IDs, e.g. 10329, .e. already without Entrez GeneID prefix, ENSG00000241644 Ensembl gene ID. id_var (string) corresponding gene ID variable name BioMart, .e. entrezgene_id ensembl_gene_id. mart (Mart) given biomaRt::Mart object.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/h_get_annotation_biomart.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Annotations from BioMart ‚Äî h_get_annotation_biomart","text":"data frame columns: id_var (depending used) hgnc_symbol entrezgene_description chromosome_name size refseq_mrna refseq_peptide","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/h_get_annotation_biomart.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Annotations from BioMart ‚Äî h_get_annotation_biomart","text":"","code":"if (interactive()) {   mart <- biomaRt::useMart(\"ensembl\", dataset = \"hsapiens_gene_ensembl\")   h_get_annotation_biomart(c(\"11185\", \"10677\"), id_var = \"entrezgene_id\", mart = mart) }"},{"path":"https://insightsengineering.github.io/hermes/reference/h_get_granges_by_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Conversion of BioMart Coordinates into GRanges ‚Äî h_get_granges_by_id","title":"Conversion of BioMart Coordinates into GRanges ‚Äî h_get_granges_by_id","text":"function extracts chromosome number, start position end position transcripts given data.frame coordinates returned biomaRt::getBM() converts GRanges object.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/h_get_granges_by_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conversion of BioMart Coordinates into GRanges ‚Äî h_get_granges_by_id","text":"","code":"h_get_granges_by_id(coords, id)"},{"path":"https://insightsengineering.github.io/hermes/reference/h_get_granges_by_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conversion of BioMart Coordinates into GRanges ‚Äî h_get_granges_by_id","text":"coords (data.frame) returned biomaRt::getBM(), containing columns ensembl_gene_id, chromosome_name, exon_chrom_start, exon_chrom_end. id (string) single Ensembl gene ID convert coordinates .","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/h_get_granges_by_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conversion of BioMart Coordinates into GRanges ‚Äî h_get_granges_by_id","text":"GRange objects respective single gene ID.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/h_get_granges_by_id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conversion of BioMart Coordinates into GRanges ‚Äî h_get_granges_by_id","text":"","code":"if (interactive()) {   mart <- biomaRt::useMart(\"ensembl\", dataset = \"hsapiens_gene_ensembl\")   attrs <- c(     \"ensembl_gene_id\",     \"ensembl_exon_id\",     \"chromosome_name\",     \"exon_chrom_start\",     \"exon_chrom_end\"   )   coords <- biomaRt::getBM(     filters = \"entrezgene_id\",     attributes = attrs,     values = c(\"11185\", \"10677\"),     mart = mart   )   h_get_granges_by_id(coords, \"ENSG00000135407\") }"},{"path":"https://insightsengineering.github.io/hermes/reference/h_get_size_biomart.html","id":null,"dir":"Reference","previous_headings":"","what":"Total Length of All Exons for Genes ‚Äî h_get_size_biomart","title":"Total Length of All Exons for Genes ‚Äî h_get_size_biomart","text":"helper function queries BioMart lengths genes adding exon lengths reducing overlaps.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/h_get_size_biomart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Total Length of All Exons for Genes ‚Äî h_get_size_biomart","text":"","code":"h_get_size_biomart(gene_ids, id_var, mart)"},{"path":"https://insightsengineering.github.io/hermes/reference/h_get_size_biomart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Total Length of All Exons for Genes ‚Äî h_get_size_biomart","text":"gene_ids (character) gene IDs, e.g. 10329, .e. already without Entrez GeneID prefix, ENSG00000241644 Ensembl gene ID. id_var (string) corresponding gene ID variable name BioMart, .e. entrezgene_id ensembl_gene_id. mart (Mart) given biomaRt::Mart object.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/h_get_size_biomart.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Total Length of All Exons for Genes ‚Äî h_get_size_biomart","text":"Named integer vector indicating gene lengths.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/h_get_size_biomart.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Total Length of All Exons for Genes ‚Äî h_get_size_biomart","text":"","code":"if (interactive()) {   mart <- biomaRt::useMart(\"ensembl\", dataset = \"hsapiens_gene_ensembl\")   h_get_size_biomart(\"11185\", \"entrezgene_id\", mart)   h_get_size_biomart(\"ENSG00000215417\", \"ensembl_gene_id\", mart)   h_get_size_biomart(c(\"11185\", \"10677\"), \"entrezgene_id\", mart)   h_get_size_biomart(c(\"ENSG00000135407\", \"ENSG00000215417\"), \"ensembl_gene_id\", mart) }"},{"path":"https://insightsengineering.github.io/hermes/reference/h_has_req_annotations.html","id":null,"dir":"Reference","previous_headings":"","what":"Predicate for Required Annotations ‚Äî h_has_req_annotations","title":"Predicate for Required Annotations ‚Äî h_has_req_annotations","text":"helper function determines gene object whether required annotation columns filled.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/h_has_req_annotations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predicate for Required Annotations ‚Äî h_has_req_annotations","text":"","code":"h_has_req_annotations(object, annotation_required)"},{"path":"https://insightsengineering.github.io/hermes/reference/h_has_req_annotations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predicate for Required Annotations ‚Äî h_has_req_annotations","text":"object (AnyHermesData) input object. annotation_required (character) names required annotation columns genes.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/h_has_req_annotations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predicate for Required Annotations ‚Äî h_has_req_annotations","text":"Named logical vector one value gene object, TRUE required annotation columns filled, otherwise FALSE.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/hermes/reference/h_has_req_annotations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predicate for Required Annotations ‚Äî h_has_req_annotations","text":"","code":"object <- hermes_data result <- h_has_req_annotations(object, \"size\") all(result) #> [1] TRUE rowData(object)$size[1] <- NA # nolint which(!h_has_req_annotations(object, \"size\")) #> GeneID:11185  #>            1"},{"path":"https://insightsengineering.github.io/hermes/reference/h_map_pos.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper Function For Matching Map Values to Names ‚Äî h_map_pos","title":"Helper Function For Matching Map Values to Names ‚Äî h_map_pos","text":"used rename method. wraps assertions matching used several times.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/h_map_pos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper Function For Matching Map Values to Names ‚Äî h_map_pos","text":"","code":"h_map_pos(names, map)"},{"path":"https://insightsengineering.github.io/hermes/reference/h_map_pos.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper Function For Matching Map Values to Names ‚Äî h_map_pos","text":"names (character) original names. map (named character) mapping vector old (value) new (name) names. values must included names.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/h_map_pos.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper Function For Matching Map Values to Names ‚Äî h_map_pos","text":"Integer vector positions map values names.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/h_map_pos.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper Function For Matching Map Values to Names ‚Äî h_map_pos","text":"","code":"h_map_pos(c(\"a\", \"b\"), c(d = \"b\")) #> [1] 2"},{"path":"https://insightsengineering.github.io/hermes/reference/h_parens.html","id":null,"dir":"Reference","previous_headings":"","what":"Parenthesize a Character Vector ‚Äî h_parens","title":"Parenthesize a Character Vector ‚Äî h_parens","text":"helper function adds parentheses around element character vector.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/h_parens.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parenthesize a Character Vector ‚Äî h_parens","text":"","code":"h_parens(x)"},{"path":"https://insightsengineering.github.io/hermes/reference/h_parens.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parenthesize a Character Vector ‚Äî h_parens","text":"x (character) inputs parenthesized.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/h_parens.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parenthesize a Character Vector ‚Äî h_parens","text":"Character vector parentheses, except x blank string case returned unaltered.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/h_parens.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parenthesize a Character Vector ‚Äî h_parens","text":"","code":"h_parens(\"bla\") #> [1] \"(bla)\" h_parens(\"\") #> [1] \"\" h_parens(c(\"bla\", \"bli\")) #> [1] \"(bla)\" \"(bli)\""},{"path":"https://insightsengineering.github.io/hermes/reference/h_pca_df_r2_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculation of R2 Matrix between Sample Variables and Principal Components ‚Äî h_pca_df_r2_matrix","title":"Calculation of R2 Matrix between Sample Variables and Principal Components ‚Äî h_pca_df_r2_matrix","text":"function processes sample variables AnyHermesData corresponding principal components matrix, generates matrix R2 values.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/h_pca_df_r2_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculation of R2 Matrix between Sample Variables and Principal Components ‚Äî h_pca_df_r2_matrix","text":"","code":"h_pca_df_r2_matrix(pca, df)"},{"path":"https://insightsengineering.github.io/hermes/reference/h_pca_df_r2_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculation of R2 Matrix between Sample Variables and Principal Components ‚Äî h_pca_df_r2_matrix","text":"pca (matrix) comprises principal components generated calc_pca(). df (data.frame) SummarizedExperiment::colData() AnyHermesData object.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/h_pca_df_r2_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculation of R2 Matrix between Sample Variables and Principal Components ‚Äî h_pca_df_r2_matrix","text":"matrix R2 values combinations sample variables principal components.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/h_pca_df_r2_matrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculation of R2 Matrix between Sample Variables and Principal Components ‚Äî h_pca_df_r2_matrix","text":"Note df columns numeric, character, factor logical included resulting matrix, variable types supported. addition, df columns constant, NA, character factor columns many levels also dropped analysis.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/hermes/reference/h_pca_df_r2_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculation of R2 Matrix between Sample Variables and Principal Components ‚Äî h_pca_df_r2_matrix","text":"","code":"object <- hermes_data %>%   add_quality_flags() %>%   filter() %>%   normalize()  # Obtain the principal components. pca <- calc_pca(object)$x  # Obtain the `colData` as a `data.frame`. df <- as.data.frame(colData(object))  # Correlate them. r2_all <- h_pca_df_r2_matrix(pca, df) str(r2_all) #>  num [1:18, 1:39] 0.102 0.183 0.147 0.391 0.662 ... #>  - attr(*, \"dimnames\")=List of 2 #>   ..$ : chr [1:18] \"PC1\" \"PC2\" \"PC3\" \"PC4\" ... #>   ..$ : chr [1:39] \"AGEGRP\" \"AGE18\" \"STDDRS\" \"STDDRSD\" ...  # We can see that only about half of the columns from `df` were # used for the correlations. ncol(r2_all) #> [1] 39 ncol(df) #> [1] 74"},{"path":"https://insightsengineering.github.io/hermes/reference/h_pca_var_rsquared.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculation of R2 between Sample Variable and Principal Components ‚Äî h_pca_var_rsquared","title":"Calculation of R2 between Sample Variable and Principal Components ‚Äî h_pca_var_rsquared","text":"helper function calculates R2 values one sample variable AnyHermesData Principal Components (PCs) separately (one linear model fit PC).","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/h_pca_var_rsquared.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculation of R2 between Sample Variable and Principal Components ‚Äî h_pca_var_rsquared","text":"","code":"h_pca_var_rsquared(pca, x)"},{"path":"https://insightsengineering.github.io/hermes/reference/h_pca_var_rsquared.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculation of R2 between Sample Variable and Principal Components ‚Äî h_pca_var_rsquared","text":"pca (matrix) principal components matrix generated calc_pca(). x (vector) values one sample variable AnyHermesData object.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/h_pca_var_rsquared.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculation of R2 between Sample Variable and Principal Components ‚Äî h_pca_var_rsquared","text":"vector R2 values principal component.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/h_pca_var_rsquared.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculation of R2 between Sample Variable and Principal Components ‚Äî h_pca_var_rsquared","text":"Note case estimation problems PCs, NA returned .","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/h_pca_var_rsquared.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculation of R2 between Sample Variable and Principal Components ‚Äî h_pca_var_rsquared","text":"","code":"object <- hermes_data %>%   add_quality_flags() %>%   filter() %>%   normalize()  # Obtain the principal components. pca <- calc_pca(object)$x  # Obtain the sample variable. x <- colData(object)$AGE18  # Correlate them. r2 <- h_pca_var_rsquared(pca, x)"},{"path":"https://insightsengineering.github.io/hermes/reference/h_short_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a Short List of a Character Vector ‚Äî h_short_list","title":"Make a Short List of a Character Vector ‚Äî h_short_list","text":"helper function makes short list string, e.g. \", b, ..., z\" character vector, e.g. letters.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/h_short_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a Short List of a Character Vector ‚Äî h_short_list","text":"","code":"h_short_list(x, sep = \", \", thresh = 3L)"},{"path":"https://insightsengineering.github.io/hermes/reference/h_short_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a Short List of a Character Vector ‚Äî h_short_list","text":"x (character) input listed. sep (string) separator use. thresh (count) threshold use, length x larger list shortened using ... ellipsis.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/h_short_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a Short List of a Character Vector ‚Äî h_short_list","text":"String short list.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/h_short_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a Short List of a Character Vector ‚Äî h_short_list","text":"","code":"h_short_list(letters) #> [1] \"a, b, ..., z\" h_short_list(letters[1:3]) #> [1] \"a, b, c\" h_short_list(LETTERS[1:5], sep = \";\", thresh = 5L) #> [1] \"A;B;C;D;E\""},{"path":"https://insightsengineering.github.io/hermes/reference/h_strip_prefix.html","id":null,"dir":"Reference","previous_headings":"","what":"Stripping Prefix from Gene IDs ‚Äî h_strip_prefix","title":"Stripping Prefix from Gene IDs ‚Äî h_strip_prefix","text":"helper function removes prefix possible delimiter vector gene IDs, digits returned.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/h_strip_prefix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stripping Prefix from Gene IDs ‚Äî h_strip_prefix","text":"","code":"h_strip_prefix(gene_ids, prefix)"},{"path":"https://insightsengineering.github.io/hermes/reference/h_strip_prefix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stripping Prefix from Gene IDs ‚Äî h_strip_prefix","text":"gene_ids (character) original gene IDs including prefix optional delimiter digits. prefix (string) common prefix stripped away gene_ids.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/h_strip_prefix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stripping Prefix from Gene IDs ‚Äî h_strip_prefix","text":"Character vector contains digits gene ID.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/h_strip_prefix.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Stripping Prefix from Gene IDs ‚Äî h_strip_prefix","text":"currently used strip away GeneID prefix Entrez gene IDs can queried BioMart","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/h_strip_prefix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stripping Prefix from Gene IDs ‚Äî h_strip_prefix","text":"","code":"h_strip_prefix(c(\"GeneID:11185\", \"GeneID:10677\"), prefix = \"GeneID\") #> [1] \"11185\" \"10677\""},{"path":"https://insightsengineering.github.io/hermes/reference/h_unique_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Creation of Unique Labels ‚Äî h_unique_labels","title":"Creation of Unique Labels ‚Äî h_unique_labels","text":"helper function generates set unique labels given unique IDs necessarily unique names.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/h_unique_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creation of Unique Labels ‚Äî h_unique_labels","text":"","code":"h_unique_labels(ids, nms = NULL)"},{"path":"https://insightsengineering.github.io/hermes/reference/h_unique_labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creation of Unique Labels ‚Äî h_unique_labels","text":"ids (character NULL) unique IDs. nms (character NULL) necessarily unique names provided.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/h_unique_labels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creation of Unique Labels ‚Äî h_unique_labels","text":"Character vector empty names replaced IDs non-unique names made unique appending IDs parentheses.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/h_unique_labels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creation of Unique Labels ‚Äî h_unique_labels","text":"","code":"h_unique_labels(c(\"1\", \"2\", \"3\"), c(\"A\", \"B\", \"A\")) #> [1] \"A (1)\" \"B\"     \"A (3)\" h_unique_labels(NULL) #> NULL h_unique_labels(c(\"1\", \"2\", \"3\")) #> [1] \"1\" \"2\" \"3\""},{"path":"https://insightsengineering.github.io/hermes/reference/hermes-package.html","id":null,"dir":"Reference","previous_headings":"","what":"hermes Package ‚Äî hermes-package","title":"hermes Package ‚Äî hermes-package","text":"hermes facilitates preprocessing, analyzing, reporting RNA-seq data.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/hermes/reference/hermes-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"hermes Package ‚Äî hermes-package","text":"Maintainer: Daniel Saban√©s Bov√© daniel.sabanes_bove@roche.com Authors: Namrata Bhatia Stefanie Bienert Benoit Falquet Haocheng Li Jeff Luong Lyndsee Midori Zhang zhang.lyndsee@gene.com Alex Richardson Simona Rossomanno Tim Treis Mark Yan Naomi Chang Chendi Liao chendi.liao@roche.com Carolyn Zhang Joseph N. Paulson paulson.joseph@gene.com contributors: F. Hoffmann-La Roche AG [copyright holder, funder]","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/hermes_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Example HermesData Data ‚Äî hermes_data","title":"Example HermesData Data ‚Äî hermes_data","text":"example HermesData created underlying SummarizedExperiment::SummarizedExperiment object renaming descriptors align standard specification. already contains required columns rowData colData.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/hermes_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example HermesData Data ‚Äî hermes_data","text":"","code":"hermes_data"},{"path":"https://insightsengineering.github.io/hermes/reference/hermes_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example HermesData Data ‚Äî hermes_data","text":"HermesData object 20 samples covering 5085 features (Entrez gene IDs).","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/hermes_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example HermesData Data ‚Äî hermes_data","text":"artificial dataset designed resemble real data.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/hermes/reference/inner_join_cdisc.html","id":null,"dir":"Reference","previous_headings":"","what":"Inner Joining a Genes with a CDISC Data Set ‚Äî inner_join_cdisc","title":"Inner Joining a Genes with a CDISC Data Set ‚Äî inner_join_cdisc","text":"useful function trying join genetic CDISC data sets.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/inner_join_cdisc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inner Joining a Genes with a CDISC Data Set ‚Äî inner_join_cdisc","text":"","code":"inner_join_cdisc(   gene_data,   cdisc_data,   patient_key = \"USUBJID\",   additional_keys = character() )"},{"path":"https://insightsengineering.github.io/hermes/reference/inner_join_cdisc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inner Joining a Genes with a CDISC Data Set ‚Äî inner_join_cdisc","text":"gene_data (data.frame DataFrame) genetic data. cdisc_data (data.frame) CDISC data (typically patient level data). patient_key (string) patient identifier. additional_keys (character) potential additional keys two data sets.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/inner_join_cdisc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inner Joining a Genes with a CDISC Data Set ‚Äî inner_join_cdisc","text":"data.frame contains columns data sets merged keys.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/inner_join_cdisc.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Inner Joining a Genes with a CDISC Data Set ‚Äî inner_join_cdisc","text":"Columns contained data sets specified keys taken gene_data cdisc_data.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/inner_join_cdisc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inner Joining a Genes with a CDISC Data Set ‚Äî inner_join_cdisc","text":"","code":"gene_data <- col_data_with_genes(hermes_data, \"counts\", gene_spec(\"GeneID:1820\")) cdisc_data <- data.frame(   USUBJID = head(gene_data$USUBJID, 10),   extra = 1:10 ) result <- inner_join_cdisc(gene_data, cdisc_data) #> Warning: Patients AB12345-CHN-7-id-28, AB12345-CHN-4-id-73, AB12345-RUS-1-id-52, AB12345-PAK-11-id-268, AB12345-CHN-13-id-102, AB12345-CHN-17-id-84, AB12345-BRA-11-id-9, AB12345-CHN-4-id-115, AB12345-CHN-15-id-245, AB12345-CHN-4-id-370 from gene data set were lost because they could not be joined to CDISC data set result #>                  USUBJID Filename       SampleID         AGEGRP AGE18 STDDRS #> 1   AB12345-CHN-1-id-307     eset 06520046C0018R 12 - <18 years  < 18  DEATH #> 2  AB12345-CHN-11-id-220     eset 06520105C0017R 12 - <18 years  < 18        #> 3  AB12345-CHN-15-id-201     eset 06520103C0017R    >= 18 years >= 18  DEATH #> 4  AB12345-CHN-15-id-262     eset 06520067C0018R   2 - <6 years  < 18        #> 5   AB12345-CHN-3-id-128     eset 06520011B0023R    >= 18 years >= 18  DEATH #> 6   AB12345-CHN-7-id-267     eset 06520092C0017R 12 - <18 years  < 18  DEATH #> 7  AB12345-NGA-11-id-173     eset 06520062C0017R  6 - <12 years  < 18  DEATH #> 8   AB12345-RUS-3-id-378     eset 06520063C0043R 12 - <18 years  < 18  DEATH #> 9   AB12345-USA-1-id-261     eset 06520022C0017R 12 - <18 years  < 18        #> 10   AB12345-USA-1-id-45     eset 06520001B0023R    >= 18 years >= 18  DEATH #>                                STDDRSD    STDSSDT              TRTDRS #> 1  DEATH DUE TO PROGRESSION OF DISEASE 07/24/2016 PROGRESSIVE DISEASE #> 2                                                 PROGRESSIVE DISEASE #> 3  DEATH DUE TO PROGRESSION OF DISEASE 08/12/2016 PROGRESSIVE DISEASE #> 4                                                 PROGRESSIVE DISEASE #> 5  DEATH DUE TO PROGRESSION OF DISEASE 05/31/2016       ADVERSE EVENT #> 6  DEATH DUE TO PROGRESSION OF DISEASE 02/16/2017 PROGRESSIVE DISEASE #> 7  DEATH DUE TO PROGRESSION OF DISEASE 09/11/2016 PROGRESSIVE DISEASE #> 8  DEATH DUE TO PROGRESSION OF DISEASE 08/05/2016 PROGRESSIVE DISEASE #> 9                                                 PROGRESSIVE DISEASE #> 10 DEATH DUE TO PROGRESSION OF DISEASE 01/08/2016 PROGRESSIVE DISEASE #>                   TRTDRSD BHDCIRC BHDCIRCU ADAFL BLANP BKPS BLKS BTANNER #> 1  PROGRESSION OF DISEASE      NA              Y    NA   80   80      NA #> 2  PROGRESSION OF DISEASE      NA              Y   100   NA  100      NA #> 3  PROGRESSION OF DISEASE      NA              Y    NA   90   90      NA #> 4  PROGRESSION OF DISEASE      NA              Y    NA  100  100      NA #> 5           ADVERSE EVENT      NA              Y   100   NA  100      NA #> 6  PROGRESSION OF DISEASE      NA              Y   100   NA  100      NA #> 7  PROGRESSION OF DISEASE      NA              Y    NA  100  100      NA #> 8  PROGRESSION OF DISEASE      NA              Y    90   NA   90      NA #> 9  PROGRESSION OF DISEASE      NA              Y    NA   90   90      NA #> 10 PROGRESSION OF DISEASE      NA              Y    NA   90   90      NA #>             FRPST     DURIDX    DURSAF    DURSUR LNTHRPY AENCIFL STUDYID #> 1  POST-MENARCHAL  61.667351 1.6755647  5.158111       5      NA AB12345 #> 2   PRE-MENARCHAL  14.981520 3.0882957  5.815195       4      NA AB12345 #> 3                  10.841889 0.9856263  3.055441       4      NA AB12345 #> 4                 131.088296 1.6755647 19.252567       3      NA AB12345 #> 5                  55.030801 0.9856263  5.026694       3      NA AB12345 #> 6                   7.687885 3.0225873 12.418891       1      NA AB12345 #> 7                  99.285421 3.5811088  6.340862       7      NA AB12345 #> 8                  93.568789 0.9856263  4.665298       3      NA AB12345 #> 9                  41.626283 1.6755647 18.858316       3      NA AB12345 #> 10                 45.733060 0.6570842  2.299795       2      NA AB12345 #>             RFSTDTC          RFENDTC         RFXSTDTC         RFXENDTC #> 1  2016-03-10T14:05 2016-03-31T15:49 2016-03-10T14:05 2016-03-31T15:49 #> 2  2017-04-11T12:35 2017-06-14T11:45 2017-04-11T12:35 2017-06-14T11:45 #> 3  2016-05-31T14:10 2016-05-31T14:10 2016-05-31T14:10 2016-05-31T14:10 #> 4  2016-01-11T14:30 2016-02-01T13:30 2016-01-11T14:30 2016-02-01T13:30 #> 5  2016-01-14T12:37 2016-01-14T12:37 2016-01-14T12:37 2016-01-14T12:37 #> 6  2016-02-12T11:05 2016-04-14T12:00 2016-02-12T11:05 2016-04-14T12:00 #> 7  2016-03-21T15:40 2016-06-08T18:00 2016-03-21T15:40 2016-06-08T18:00 #> 8  2016-03-24T14:25 2016-03-24T14:25 2016-03-24T14:25 2016-03-24T14:25 #> 9  2016-02-08T12:37 2016-02-29T14:15 2016-02-08T12:37 2016-02-29T14:15 #> 10 2015-11-05T11:00 2015-11-05T11:00 2015-11-05T11:00 2015-11-05T11:00 #>       RFICDTC   RFPENDTC     DTHDTC DTHFL SITEID  INVID AGE  AGEU SEX #> 1  2016-02-18 2016-07-24 2016-07-24     Y 283495 223804  12 YEARS   F #> 2  2017-04-03                             283694 456732  15 YEARS   M #> 3  2016-05-11 2016-08-12 2016-08-12     Y 282087 468105  27 YEARS   F #> 4  2016-01-07                             282087 468105   2 YEARS   F #> 5  2015-12-30 2016-05-31 2016-05-31     Y 283495 223804  19 YEARS   F #> 6  2016-02-04 2017-02-16 2017-02-16     Y 280959  20842  16 YEARS   M #> 7  2016-03-02 2016-09-11 2016-09-11     Y 283497 241874   7 YEARS   F #> 8  2016-03-16 2016-08-05 2016-08-05     Y 284024 457432  13 YEARS   M #> 9  2016-02-01                             281049 457179  16 YEARS   F #> 10 2015-10-30 2016-01-08 2016-01-08     Y 283971 235545  19 YEARS   F #>                         RACE                 ETHNIC ARMCD       ARM ACTARMCD #> 1                      WHITE NOT HISPANIC OR LATINO  COH3  COHORT 3     COH3 #> 2                      WHITE NOT HISPANIC OR LATINO COH12 COHORT 12    COH12 #> 3                    UNKNOWN           NOT REPORTED COH9E COHORT 9E    COH9E #> 4                    UNKNOWN           NOT REPORTED  COH1  COHORT 1     COH1 #> 5                   MULTIPLE NOT HISPANIC OR LATINO  COH1  COHORT 1     COH1 #> 6                      WHITE NOT HISPANIC OR LATINO COH9O COHORT 9O    COH9O #> 7  BLACK OR AFRICAN AMERICAN     HISPANIC OR LATINO  COH6  COHORT 6     COH6 #> 8                      WHITE NOT HISPANIC OR LATINO  COH8  COHORT 8     COH8 #> 9                      ASIAN NOT HISPANIC OR LATINO  COH1  COHORT 1     COH1 #> 10                   UNKNOWN     HISPANIC OR LATINO  COH6  COHORT 6     COH6 #>       ACTARM COUNTRY      DMDTC DMDY BAGE BAGEU    BWT BWTU   BHT BHTU     BBMI #> 1   COHORT 3     CHN 2016-02-18  -21   12 YEARS  50.00   kg 157.0   cm 20.28480 #> 2  COHORT 12     CHN 2017-04-04   -7   15 YEARS  26.15   kg 136.0   cm 14.13819 #> 3   COHORT 9     CHN 2016-05-25   -6   27 YEARS  61.60   kg 173.0   cm 20.58204 #> 4   COHORT 1     CHN 2016-01-07   -4    2 YEARS  64.60   kg 177.1   cm 20.59659 #> 5   COHORT 1     CHN 2015-12-30  -15   19 YEARS  40.60   kg 154.0   cm 17.11924 #> 6   COHORT 9     CHN 2016-02-04   -8   16 YEARS  45.20   kg 161.1   cm 17.41596 #> 7   COHORT 6     NGA 2016-03-02  -19    7 YEARS  53.90   kg 176.0   cm 17.40057 #> 8   COHORT 8     RUS 2016-03-22   -2   13 YEARS  25.40   kg 125.0   cm 16.25600 #> 9   COHORT 1     USA 2016-02-01   -7   16 YEARS 104.70   kg 172.0   cm 35.39075 #> 10  COHORT 6     USA 2015-10-30   -6   19 YEARS  57.00   kg 172.0   cm 19.26717 #>    ITTFL SAFFL    INFCODT     RANDDT          TRTSDTC             TRTSDTM #> 1      Y     Y 2016-02-18 2016-03-09 2016-03-10T14:05 2016-03-10 14:05:00 #> 2      Y     Y 2017-04-03 2017-04-11 2017-04-11T12:35 2017-04-11 12:35:00 #> 3      Y     Y 2016-05-11 2016-05-31 2016-05-31T14:10 2016-05-31 14:10:00 #> 4      Y     Y 2016-01-07 2016-01-11 2016-01-11T14:30 2016-01-11 14:30:00 #> 5      Y     Y 2015-12-30 2016-01-14 2016-01-14T12:37 2016-01-14 12:37:00 #> 6      Y     Y 2016-02-04 2016-02-09 2016-02-12T11:05 2016-02-12 11:05:00 #> 7      Y     Y 2016-03-02 2016-03-21 2016-03-21T15:40 2016-03-21 15:40:00 #> 8      Y     Y 2016-03-16 2016-03-24 2016-03-24T14:25 2016-03-24 14:25:00 #> 9      Y     Y 2016-02-01 2016-02-03 2016-02-08T12:37 2016-02-08 12:37:00 #> 10     Y     Y 2015-10-30 2015-11-05 2015-11-05T11:00 2015-11-05 11:00:00 #>    TRTSTMF             TRTEDTM TRTETMF TRTDUR DISCSTUD DISCDEAT DISCAE DISTRTFL #> 1        S 2016-03-31 16:55:59       S     22        Y        Y      N        Y #> 2        S 2017-06-14 12:15:59       S     65        N        N      N        Y #> 3        S 2016-05-31 15:10:59       S      1        Y        Y      N        Y #> 4        S 2016-02-01 14:30:59       S     22        N        N      N        Y #> 5        S 2016-01-14 13:37:59       S      1        Y        Y      N        Y #> 6        S 2016-04-14 12:30:59       S     63        Y        Y      N        Y #> 7        S 2016-06-08 18:30:59       S     80        Y        Y      N        Y #> 8        S 2016-03-24 15:30:59       S      1        Y        Y      N        Y #> 9        S 2016-02-29 14:48:59       S     22        N        N      N        Y #> 10       S 2015-11-05 12:00:59       S      1        Y        Y      N        Y #>    AEWITHFL     ALIVDT #> 1         N 2016-07-24 #> 2         N 2017-09-27 #> 3         N 2016-08-12 #> 4         N 2017-08-15 #> 5         Y 2016-05-31 #> 6         N 2017-02-16 #> 7         N 2016-09-11 #> 8         N 2016-08-05 #> 9         N 2017-08-28 #> 10        N 2016-01-08 #>                                                           COHORT #> 1                                       Cohort 3 (NEUROBLASTOMA) #> 2                    Cohort 12 (ATYPICAL TERATOID RHABOID TUMOR) #> 3  Cohort 9 (OTHER TUMOR TYPES WITH DOCUMENTED PD-L1 EXPRESSION) #> 4                                       Cohort 1 (EWING SARCOMA) #> 5                                       Cohort 1 (EWING SARCOMA) #> 6  Cohort 9 (OTHER TUMOR TYPES WITH DOCUMENTED PD-L1 EXPRESSION) #> 7                                        Cohort 6 (OSTEOSARCOMA) #> 8                                         Cohort 8 (WILMS TUMOR) #> 9                                       Cohort 1 (EWING SARCOMA) #> 10                                       Cohort 6 (OSTEOSARCOMA) #>                                                                                                                                        TTYPE #> 1                                                                                                                              NEUROBLASTOMA #> 2                                                                                                           ATYPICAL TERATOID RHABDOID TUMOR #> 3                                                 GERM CELL TUMOR - YOLK SAC TUMOR (ENDODERMAL SINUS TUMOR) WITH DOCUMENTED PD-L1 EXPRESSION #> 4                                                                                                                              EWING SARCOMA #> 5                                                                                                                              EWING SARCOMA #> 6  OTHER TUMOR TYPES WITH DOCUMENTED PD-L1 EXPRESSION ON EITHER TUMOR CELLS OR IMMUNE CELLS (TUMORS TYPE MUST NOT BE INCLUDED IN LIST ABOVE) #> 7                                                                                                                               OSTEOSARCOMA #> 8                                                                                                                                WILMS TUMOR #> 9                                                                                                                              EWING SARCOMA #> 10                                                                                                                              OSTEOSARCOMA #>    STDSSDY low_depth_flag tech_failure_flag GeneID.1820 extra #> 1      137          FALSE             FALSE          16    10 #> 2       NA          FALSE             FALSE          54     4 #> 3       74          FALSE             FALSE         567     6 #> 4       NA          FALSE             FALSE         153     2 #> 5      139          FALSE             FALSE          49     1 #> 6      371          FALSE             FALSE         111     5 #> 7      175           TRUE             FALSE         180     9 #> 8      135           TRUE             FALSE          94     3 #> 9       NA          FALSE             FALSE         171     8 #> 10      65          FALSE             FALSE         118     7"},{"path":"https://insightsengineering.github.io/hermes/reference/isEmpty.html","id":null,"dir":"Reference","previous_headings":"","what":"Checking for Empty SummarizedExperiment ‚Äî isEmpty,SummarizedExperiment-method","title":"Checking for Empty SummarizedExperiment ‚Äî isEmpty,SummarizedExperiment-method","text":"method checks whether SummarizedExperiment::SummarizedExperiment object empty.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/isEmpty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checking for Empty SummarizedExperiment ‚Äî isEmpty,SummarizedExperiment-method","text":"","code":"# S4 method for SummarizedExperiment isEmpty(x)"},{"path":"https://insightsengineering.github.io/hermes/reference/isEmpty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checking for Empty SummarizedExperiment ‚Äî isEmpty,SummarizedExperiment-method","text":"x (SummarizedExperiment) object check.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/isEmpty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checking for Empty SummarizedExperiment ‚Äî isEmpty,SummarizedExperiment-method","text":"Flag whether object empty.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/isEmpty.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checking for Empty SummarizedExperiment ‚Äî isEmpty,SummarizedExperiment-method","text":"","code":"isEmpty(summarized_experiment) #> [1] FALSE isEmpty(summarized_experiment[NULL, ]) #> [1] TRUE isEmpty(hermes_data) #> [1] FALSE"},{"path":"https://insightsengineering.github.io/hermes/reference/lapply.html","id":null,"dir":"Reference","previous_headings":"","what":"lapply method for MultiAssayExperiment ‚Äî lapply,MultiAssayExperiment-method","title":"lapply method for MultiAssayExperiment ‚Äî lapply,MultiAssayExperiment-method","text":"Apply function experiments MAE.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/lapply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"lapply method for MultiAssayExperiment ‚Äî lapply,MultiAssayExperiment-method","text":"","code":"# S4 method for MultiAssayExperiment lapply(X, FUN, safe = TRUE, ...)"},{"path":"https://insightsengineering.github.io/hermes/reference/lapply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"lapply method for MultiAssayExperiment ‚Äî lapply,MultiAssayExperiment-method","text":"X (MultiAssayExperiment) input. FUN (function) applied experiment X. safe (flag) whether method skip experiments function fails. ... additional arguments passed FUN.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/lapply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"lapply method for MultiAssayExperiment ‚Äî lapply,MultiAssayExperiment-method","text":"MultiAssayExperiment object specified function applied.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/lapply.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"lapply method for MultiAssayExperiment ‚Äî lapply,MultiAssayExperiment-method","text":"","code":"object <- multi_assay_experiment result <- lapply(object, normalize, safe = TRUE) #> -- note: fitType='parametric', but the dispersion trend was not well captured by the #>    function: y = a/x + b, and a local regression fit was automatically substituted. #>    specify fitType='local' or 'mean' to avoid this message next time. #> -- note: fitType='parametric', but the dispersion trend was not well captured by the #>    function: y = a/x + b, and a local regression fit was automatically substituted. #>    specify fitType='local' or 'mean' to avoid this message next time. #> -- note: fitType='parametric', but the dispersion trend was not well captured by the #>    function: y = a/x + b, and a local regression fit was automatically substituted. #>    specify fitType='local' or 'mean' to avoid this message next time. # Similarly, all experiments in an MAE can be converted to HermesData class: result <- lapply(object, HermesData, safe = TRUE)"},{"path":"https://insightsengineering.github.io/hermes/reference/metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Metadata Accessor and Setter ‚Äî metadata","title":"Metadata Accessor and Setter ‚Äî metadata","text":"methods access set metadata AnyHermesData object.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metadata Accessor and Setter ‚Äî metadata","text":"x (AnyHermesData) object access metadata . value (list) list replace current metadata .","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metadata Accessor and Setter ‚Äî metadata","text":"metadata list.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/metadata.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Metadata Accessor and Setter ‚Äî metadata","text":"Note just inherits S4Vectors::metadata,Annotated-method().","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/metadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metadata Accessor and Setter ‚Äî metadata","text":"","code":"a <- hermes_data metadata(a) #> list() metadata(a) <- list(new = \"my metadata\") metadata(a) #> $new #> [1] \"my metadata\" #>"},{"path":"https://insightsengineering.github.io/hermes/reference/multi_assay_experiment.html","id":null,"dir":"Reference","previous_headings":"","what":"Example MultiAssayExperiment Data ‚Äî multi_assay_experiment","title":"Example MultiAssayExperiment Data ‚Äî multi_assay_experiment","text":"example MultiAssayExperiment::MultiAssayExperiment can used test data.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/multi_assay_experiment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example MultiAssayExperiment Data ‚Äî multi_assay_experiment","text":"","code":"multi_assay_experiment"},{"path":"https://insightsengineering.github.io/hermes/reference/multi_assay_experiment.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example MultiAssayExperiment Data ‚Äî multi_assay_experiment","text":"MultiAssayExperiment::MultiAssayExperiment object 3 separate HermesData objects. first object contains 5 samples covers 1000 features (Entrez gene IDs). second object contains 9 samples 2500 features. third object contains 6 samples 1300 features.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/multi_assay_experiment.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example MultiAssayExperiment Data ‚Äî multi_assay_experiment","text":"artificial dataset designed resemble real data.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/normalize.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalization of AnyHermesData Objects ‚Äî normalize,AnyHermesData-method","title":"Normalization of AnyHermesData Objects ‚Äî normalize,AnyHermesData-method","text":"normalize() method normalizing input AnyHermesData according one specified normalization methods. results saved additional assays object. Possible normalization methods (implemented separate helper functions): cpm: Counts per Million (CPM). Separately sample, original counts genes divided library size sample, multiplied one million. appropriate normalization -sample comparisons. rpkm: Reads per Kilobase transcript per Million reads mapped (RPKM). gene count divided gene size (kilobases) divided library sizes sample (millions). allows within-sample comparisons, takes account gene sizes - longer genes always counts shorter genes. tpm: Transcripts per Million (TPM). addresses problem RPKM inconsistent across samples (can seen sum RPKM values vary sample sample). Therefore divide RPKM sum RPKM values sample, multiply one million. voom: VOOM normalization. essentially just slight variation CPM prior_count 0.5 combined lib_sizes increased 1 sample. Note required corresponding differential expression analysis, just provided complementary experimental normalization approach . vst: Variance stabilizing transformation. transform normalized count data genes approximately homoskedastic values (constant variance). rlog: transformation log2 scale values approximately homoskedastic values.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/normalize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalization of AnyHermesData Objects ‚Äî normalize,AnyHermesData-method","text":"","code":"# S4 method for AnyHermesData normalize(   object,   methods = c(\"cpm\", \"rpkm\", \"tpm\", \"voom\", \"vst\"),   control = control_normalize(),   ... )  h_cpm(object, control = control_normalize())  h_rpkm(object, control = control_normalize())  h_tpm(object, control = control_normalize())  h_voom(object, control = control_normalize())  h_vst(object, control = control_normalize())  h_rlog(object, control = control_normalize())"},{"path":"https://insightsengineering.github.io/hermes/reference/normalize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalization of AnyHermesData Objects ‚Äî normalize,AnyHermesData-method","text":"object (AnyHermesData) object normalize. methods (character) normalization methods use, see details. control (named list) settings produced control_normalize(). ... used.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/normalize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalization of AnyHermesData Objects ‚Äî normalize,AnyHermesData-method","text":"AnyHermesData object additional assays containing normalized counts. control saved metadata object future reference.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/normalize.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Normalization of AnyHermesData Objects ‚Äî normalize,AnyHermesData-method","text":"h_cpm(): calculates Counts per Million (CPM) normalized counts. h_rpkm(): calculates Reads per Kilobase per Million (RPKM) normalized counts. h_tpm(): calculates Transcripts per Million (TPM) normalized counts. h_voom(): calculates VOOM normalized counts. h_vst(): variance stabilizing transformation (vst) DESeq2 package. h_rlog(): regularized log transformation (rlog) DESeq2 package.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/hermes/reference/normalize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normalization of AnyHermesData Objects ‚Äî normalize,AnyHermesData-method","text":"","code":"a <- hermes_data  # By default, log values are used with a prior count of 1 added to original counts. result <- normalize(a) assayNames(result) #> [1] \"counts\" \"cpm\"    \"rpkm\"   \"tpm\"    \"voom\"   \"vst\"    tpm <- assay(result, \"tpm\") tpm[1:3, 1:3] #>                  06520011B0023R 06520067C0018R 06520063C0043R #> GeneID:11185          0.8626554       3.993877       3.591742 #> GeneID:10677          7.0670966       4.054655       3.289554 #> GeneID:101928428      0.0000000       0.000000       0.000000  # We can also work on original scale. result_orig <- normalize(a, control = control_normalize(log = FALSE)) tpm_orig <- assay(result_orig, \"tpm\") tpm_orig[1:3, 1:3] #>                  06520011B0023R 06520067C0018R 06520063C0043R #> GeneID:11185          0.8183821       14.93224       11.05653 #> GeneID:10677        133.0936048       15.61778        8.77810 #> GeneID:101928428      0.0000000        0.00000        0.00000  # Separate calculation of the CPM normalized counts. counts_cpm <- h_cpm(a) str(counts_cpm) #>  num [1:5085, 1:20] -0.453 8.252 -2.453 -2.453 -2.453 ... #>  - attr(*, \"dimnames\")=List of 2 #>   ..$ : chr [1:5085] \"GeneID:11185\" \"GeneID:10677\" \"GeneID:101928428\" \"GeneID:100422835\" ... #>   ..$ : chr [1:20] \"06520011B0023R\" \"06520067C0018R\" \"06520063C0043R\" \"06520105C0017R\" ...  # Separate calculation of the RPKM normalized counts. counts_rpkm <- h_rpkm(a) str(counts_rpkm) #>  num [1:5085, 1:20] -2.904 4.027 0.404 1.12 1.323 ... #>  - attr(*, \"dimnames\")=List of 2 #>   ..$ : chr [1:5085] \"GeneID:11185\" \"GeneID:10677\" \"GeneID:101928428\" \"GeneID:100422835\" ... #>   ..$ : chr [1:20] \"06520011B0023R\" \"06520067C0018R\" \"06520063C0043R\" \"06520105C0017R\" ...  # Separate calculation of the TPM normalized counts. counts_tpm <- h_tpm(a) str(counts_tpm) #>  num [1:5085, 1:20] 0.863 7.067 0 0 0 ... #>  - attr(*, \"dimnames\")=List of 2 #>   ..$ : chr [1:5085] \"GeneID:11185\" \"GeneID:10677\" \"GeneID:101928428\" \"GeneID:100422835\" ... #>   ..$ : chr [1:20] \"06520011B0023R\" \"06520067C0018R\" \"06520063C0043R\" \"06520105C0017R\" ...  # Separate calculation of the VOOM normalized counts. counts_voom <- h_voom(a) str(counts_voom) #>  num [1:5085, 1:20] -0.645 8.251 -3.453 -3.453 -3.453 ... #>  - attr(*, \"dimnames\")=List of 2 #>   ..$ : chr [1:5085] \"GeneID:11185\" \"GeneID:10677\" \"GeneID:101928428\" \"GeneID:100422835\" ... #>   ..$ : chr [1:20] \"06520011B0023R\" \"06520067C0018R\" \"06520063C0043R\" \"06520105C0017R\" ...  # Separate calculation of the vst transformation. counts_vst <- h_vst(a) str(counts_vst) #>  num [1:5085, 1:20] 3.03 10.6 1.78 1.78 1.78 ... #>  - attr(*, \"dimnames\")=List of 2 #>   ..$ : chr [1:5085] \"GeneID:11185\" \"GeneID:10677\" \"GeneID:101928428\" \"GeneID:100422835\" ... #>   ..$ : chr [1:20] \"06520011B0023R\" \"06520067C0018R\" \"06520063C0043R\" \"06520105C0017R\" ...  # Separate calculation of the rlog transformation. counts_rlog <- h_rlog(a) str(counts_rlog) #>  num [1:5085, 1:20] 2.97 10.13 0 0 0 ... #>  - attr(*, \"dimnames\")=List of 2 #>   ..$ : chr [1:5085] \"GeneID:11185\" \"GeneID:10677\" \"GeneID:101928428\" \"GeneID:100422835\" ... #>   ..$ : chr [1:20] \"06520011B0023R\" \"06520067C0018R\" \"06520063C0043R\" \"06520105C0017R\" ... #>  - attr(*, \"betaPriorVar\")= num 7.01 #>  - attr(*, \"intercept\")= num [1:5085, 1] 5.26 8.49 -Inf -Inf -Inf ..."},{"path":"https://insightsengineering.github.io/hermes/reference/pca_cor_samplevar.html","id":null,"dir":"Reference","previous_headings":"","what":"Correlation of Principal Components with Sample Variables ‚Äî correlate,HermesDataPca-method","title":"Correlation of Principal Components with Sample Variables ‚Äî correlate,HermesDataPca-method","text":"correlate() method analyses correlations (R2 values) sample variables AnyHermesData object principal components samples. corresponding autoplot() method can visualize results heatmap.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/pca_cor_samplevar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Correlation of Principal Components with Sample Variables ‚Äî correlate,HermesDataPca-method","text":"","code":"# S4 method for HermesDataPca correlate(object, data)  # S4 method for HermesDataPcaCor autoplot(   object,   cor_colors = circlize::colorRamp2(c(-1, 0, 1), c(\"blue\", \"white\", \"red\")),   ... )"},{"path":"https://insightsengineering.github.io/hermes/reference/pca_cor_samplevar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Correlation of Principal Components with Sample Variables ‚Äî correlate,HermesDataPca-method","text":"object (HermesDataPca) input. can generated using calc_pca() function AnyHermesData. data (AnyHermesData) input used originally PCA. cor_colors (function) color scale function correlation values heatmap, produced circlize::colorRamp2(). ... arguments passed ComplexHeatmap::Heatmap().","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/pca_cor_samplevar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Correlation of Principal Components with Sample Variables ‚Äî correlate,HermesDataPca-method","text":"HermesDataPcaCor object R2 values sample variables.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/pca_cor_samplevar.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Correlation of Principal Components with Sample Variables ‚Äî correlate,HermesDataPca-method","text":"autoplot(HermesDataPcaCor): plot method uses ComplexHeatmap::Heatmap() function visualize HermesDataPcaCor object.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/hermes/reference/pca_cor_samplevar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Correlation of Principal Components with Sample Variables ‚Äî correlate,HermesDataPca-method","text":"","code":"object <- hermes_data %>%   add_quality_flags() %>%   filter() %>%   normalize()  # Perform PCA and then correlate the prinicipal components with the sample variables. object_pca <- calc_pca(object) result <- correlate(object_pca, object)  # Visualize the correlations in a heatmap. autoplot(result)   # We can also choose to not reorder the columns. autoplot(result, cluster_columns = FALSE)   # We can also choose break-points for color customization. autoplot(   result,   cor_colors = circlize::colorRamp2(     c(-0.5, -0.25, 0, 0.25, 0.5, 0.75, 1),     c(\"blue\", \"green\", \"purple\", \"yellow\", \"orange\", \"red\", \"brown\")   ) )"},{"path":"https://insightsengineering.github.io/hermes/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator ‚Äî %>%","title":"Pipe operator ‚Äî %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator ‚Äî %>%","text":"","code":"lhs %>% rhs"},{"path":"https://insightsengineering.github.io/hermes/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator ‚Äî %>%","text":"result corresponding function call.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/pipe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pipe operator ‚Äî %>%","text":"","code":"hermes_data %>%   filter() %>%   normalize() %>%   summary() #> HermesData object with 18 samples of 2064 genes. #> - Library sizes across samples: mean 1997557, median 2007086, range 1595589 to 2374075 #> - Included assays (6): counts cpm ... voom vst #> - Additional gene information (3): GeneID SYMBOL chromosome_name #> - Additional sample information (72): Filename SampleID ... TTYPE #>   STDSSDY #> - Low expression genes (0): #> - Samples with too low depth or technical failures (0):"},{"path":"https://insightsengineering.github.io/hermes/reference/plot_all.html","id":null,"dir":"Reference","previous_headings":"","what":"All Standard Plots in Default Setting ‚Äî autoplot,AnyHermesData-method","title":"All Standard Plots in Default Setting ‚Äî autoplot,AnyHermesData-method","text":"generates standard plots - histogram q-q plot library sizes, density plot (log) counts distributions, boxplot number number non-zero expressed genes per sample, stacked barplot low expression genes chromosome default setting.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/plot_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"All Standard Plots in Default Setting ‚Äî autoplot,AnyHermesData-method","text":"","code":"# S4 method for AnyHermesData autoplot(object)"},{"path":"https://insightsengineering.github.io/hermes/reference/plot_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"All Standard Plots in Default Setting ‚Äî autoplot,AnyHermesData-method","text":"object (AnyHermesData) input.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/plot_all.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"All Standard Plots in Default Setting ‚Äî autoplot,AnyHermesData-method","text":"list ggplot objects draw_libsize_hist(), draw_libsize_qq(), draw_libsize_densities(), draw_nonzero_boxplot() draw_genes_barplot() functions default settings.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/plot_all.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"All Standard Plots in Default Setting ‚Äî autoplot,AnyHermesData-method","text":"","code":"result <- hermes_data autoplot(result)"},{"path":"https://insightsengineering.github.io/hermes/reference/prefix.html","id":null,"dir":"Reference","previous_headings":"","what":"Prefix Accessor ‚Äî prefix","title":"Prefix Accessor ‚Äî prefix","text":"Generic function access prefix object.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/prefix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prefix Accessor ‚Äî prefix","text":"","code":"prefix(object, ...)"},{"path":"https://insightsengineering.github.io/hermes/reference/prefix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prefix Accessor ‚Äî prefix","text":"object (AnyHermesData) input. ... additional arguments.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/prefix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prefix Accessor ‚Äî prefix","text":"prefix slot contents.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/prefix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prefix Accessor ‚Äî prefix","text":"","code":"a <- hermes_data prefix(a) #> [1] \"GeneID\""},{"path":"https://insightsengineering.github.io/hermes/reference/quality_flags.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Quality Flags ‚Äî add_quality_flags","title":"Add Quality Flags ‚Äî add_quality_flags","text":"function add_quality_flags() adds quality flag information AnyHermesData object: low_expression_flag: gene, counts many samples pass minimum expression Counts per Million (CPM) threshold. many, flags gene \"low expression\" gene. tech_failure_flag: first calculates Pearson correlation matrix sample wise CPM values, resulting matrix measuring correlation samples. compares average correlation per sample threshold - low, sample flagged \"technical failure\" sample. low_depth_flag: computes library size (total number counts) per sample. number low, sample flagged \"low depth\" sample. Separate helper functions internally used create flags, separate getter functions allow easy access quality control flags object.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/quality_flags.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Quality Flags ‚Äî add_quality_flags","text":"","code":"add_quality_flags(object, control = control_quality(), overwrite = FALSE)  h_low_expression_flag(object, control = control_quality())  h_low_depth_flag(object, control = control_quality())  h_tech_failure_flag(object, control = control_quality())  get_tech_failure(object)  get_low_depth(object)  get_low_expression(object)"},{"path":"https://insightsengineering.github.io/hermes/reference/quality_flags.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Quality Flags ‚Äî add_quality_flags","text":"object (AnyHermesData)  input. control (list)  list settings (thresholds etc.) used compute quality control flags, produced control_quality(). overwrite (flag) whether previously added flags may overwritten.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/quality_flags.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Quality Flags ‚Äî add_quality_flags","text":"input object added quality flags.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/quality_flags.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add Quality Flags ‚Äî add_quality_flags","text":"object already variables mentioned part rowData colData (enforced validation method AnyHermesData), usually still NA initial object creation.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/quality_flags.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Add Quality Flags ‚Äî add_quality_flags","text":"h_low_expression_flag(): creates low expression flag genes given control settings. h_low_depth_flag(): creates low depth (library size) flag samples given control settings. h_tech_failure_flag(): creates technical failure flag samples given control settings. get_tech_failure(): get technical failure flags samples. get_low_depth(): get low depth failure flags samples. get_low_expression(): get low expression failure flags genes.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/hermes/reference/quality_flags.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Quality Flags ‚Äî add_quality_flags","text":"","code":"# Adding default quality flags to `AnyHermesData` object. object <- hermes_data result <- add_quality_flags(object) which(get_tech_failure(result) != get_tech_failure(object)) #> 06520046C0018R  #>             10  head(get_low_expression(result)) #>     GeneID:11185     GeneID:10677 GeneID:101928428 GeneID:100422835  #>            FALSE            FALSE             TRUE             TRUE  #> GeneID:102466731     GeneID:64881  #>             TRUE             TRUE  head(get_tech_failure(result)) #> 06520011B0023R 06520067C0018R 06520063C0043R 06520105C0017R 06520092C0017R  #>          FALSE          FALSE          FALSE          FALSE          FALSE  #> 06520103C0017R  #>          FALSE  head(get_low_depth(result)) #> 06520011B0023R 06520067C0018R 06520063C0043R 06520105C0017R 06520092C0017R  #>          FALSE          FALSE          FALSE          FALSE          FALSE  #> 06520103C0017R  #>          FALSE   # It is possible to overwrite flags if needed, which will trigger a message. result2 <- add_quality_flags(result, control_quality(min_cpm = 1000), overwrite = TRUE) #> previously have added quality flags, but overwriting now  # Separate calculation of low expression flag. low_expr_flag <- h_low_expression_flag(   object,   control_quality(min_cpm = 500, min_cpm_prop = 0.9) ) length(low_expr_flag) == nrow(object) #> [1] TRUE head(low_expr_flag) #>     GeneID:11185     GeneID:10677 GeneID:101928428 GeneID:100422835  #>             TRUE             TRUE             TRUE             TRUE  #> GeneID:102466731     GeneID:64881  #>             TRUE             TRUE   # Separate calculation of low depth flag. low_depth_flag <- h_low_depth_flag(object, control_quality(min_depth = 5)) length(low_depth_flag) == ncol(object) #> [1] TRUE head(low_depth_flag) #> 06520011B0023R 06520067C0018R 06520063C0043R 06520105C0017R 06520092C0017R  #>          FALSE          FALSE          FALSE          FALSE          FALSE  #> 06520103C0017R  #>          FALSE   # Separate calculation of technical failure flag. tech_failure_flag <- h_tech_failure_flag(object, control_quality(min_corr = 0.35)) length(tech_failure_flag) == ncol(object) #> [1] TRUE head(tech_failure_flag) #> 06520011B0023R 06520067C0018R 06520063C0043R 06520105C0017R 06520092C0017R  #>          FALSE          FALSE          FALSE          FALSE          FALSE  #> 06520103C0017R  #>          FALSE  head(get_tech_failure(object)) #> 06520011B0023R 06520067C0018R 06520063C0043R 06520105C0017R 06520092C0017R  #>          FALSE          FALSE          FALSE          FALSE          FALSE  #> 06520103C0017R  #>          FALSE  head(get_low_depth(object)) #> 06520011B0023R 06520067C0018R 06520063C0043R 06520105C0017R 06520092C0017R  #>          FALSE          FALSE           TRUE          FALSE          FALSE  #> 06520103C0017R  #>          FALSE  head(get_low_expression(object)) #>     GeneID:11185     GeneID:10677 GeneID:101928428 GeneID:100422835  #>            FALSE             TRUE             TRUE             TRUE  #> GeneID:102466731     GeneID:64881  #>             TRUE             TRUE"},{"path":"https://insightsengineering.github.io/hermes/reference/query.html","id":null,"dir":"Reference","previous_headings":"","what":"Query Gene Annotations from a Connection ‚Äî query","title":"Query Gene Annotations from a Connection ‚Äî query","text":"generic function query() interface querying gene annotations data base connection.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/query.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query Gene Annotations from a Connection ‚Äî query","text":"","code":"query(genes, connection)  # S4 method for character,ConnectionBiomart query(genes, connection)"},{"path":"https://insightsengineering.github.io/hermes/reference/query.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query Gene Annotations from a Connection ‚Äî query","text":"genes (character) gene IDs. connection (connection class) data base connection object.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/query.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query Gene Annotations from a Connection ‚Äî query","text":"S4Vectors::DataFrame gene annotations. required : rownames identical input genes. colnames equal annotation columns .row_data_annotation_cols. Therefore, missing information needs properly included DataFrame NA entries.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/query.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Query Gene Annotations from a Connection ‚Äî query","text":"method provided ConnectionBiomart class. However, framework extensible: simple add new connections corresponding query methods data bases, e.g. company internal data bases. Please make sure follow required format returned value. BioMart queries might return information genes. can due different versions used gene IDs queried Ensembl data base.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/query.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query Gene Annotations from a Connection ‚Äî query","text":"","code":"if (interactive()) {   object <- hermes_data   connection <- connect_biomart(prefix(object))   result <- query(genes(object), connection)   head(result)   head(annotation(object)) }"},{"path":"https://insightsengineering.github.io/hermes/reference/rbind.html","id":null,"dir":"Reference","previous_headings":"","what":"Row Binding of AnyHermesData Objects ‚Äî rbind","title":"Row Binding of AnyHermesData Objects ‚Äî rbind","text":"method combines AnyHermesData objects samples different features interest (rows assays).","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/rbind.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Row Binding of AnyHermesData Objects ‚Äî rbind","text":"... (AnyHermesData) objects row bind.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/rbind.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Row Binding of AnyHermesData Objects ‚Äî rbind","text":"combined AnyHermesData object.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/rbind.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Row Binding of AnyHermesData Objects ‚Äî rbind","text":"Note just inherits SummarizedExperiment::rbind,SummarizedExperiment-method(). binding AnyHermesData object SummarizedExperiment::SummarizedExperiment object, result SummarizedExperiment::SummarizedExperiment object (general class). Note need unique gene IDs (row names) prefix across combined object.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/hermes/reference/rbind.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Row Binding of AnyHermesData Objects ‚Äî rbind","text":"","code":"a <- hermes_data[1:2542, ] b <- hermes_data[2543:5085, ] result <- rbind(a, b) class(result) #> [1] \"HermesData\" #> attr(,\"package\") #> [1] \"hermes\""},{"path":"https://insightsengineering.github.io/hermes/reference/rename.html","id":null,"dir":"Reference","previous_headings":"","what":"Renaming Contents of SummarizedExperiment Objects ‚Äî rename,SummarizedExperiment-method","title":"Renaming Contents of SummarizedExperiment Objects ‚Äî rename,SummarizedExperiment-method","text":"method renames columns rowData colData, well assays, SummarizedExperiment::SummarizedExperiment objects. increases flexibility since renaming can done conversion HermesData object.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/rename.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Renaming Contents of SummarizedExperiment Objects ‚Äî rename,SummarizedExperiment-method","text":"","code":"# S4 method for SummarizedExperiment rename(   x,   row_data = character(),   col_data = character(),   assays = character(),   ... )  # S4 method for data.frame rename(x, ...)"},{"path":"https://insightsengineering.github.io/hermes/reference/rename.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Renaming Contents of SummarizedExperiment Objects ‚Äî rename,SummarizedExperiment-method","text":"x (SummarizedExperiment) object rename contents . row_data (named character) mapping existing (right-hand side values) new (left-hand side names) column names rowData. col_data (named character) mapping existing (right-hand side values) new (left-hand side names) column names colData. assays (named character) mapping existing (right-hand side values) new (left-hand side names) assay names. ... additional arguments (used ).","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/rename.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Renaming Contents of SummarizedExperiment Objects ‚Äî rename,SummarizedExperiment-method","text":"SummarizedExperiment::SummarizedExperiment object renamed contents.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/rename.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Renaming Contents of SummarizedExperiment Objects ‚Äî rename,SummarizedExperiment-method","text":"","code":"x <- summarized_experiment # Use deliberately a non-standard assay name in this example. assayNames(x) <- \"count\"  # Rename `HGNC` to `symbol` in the `rowData`. x <- rename(x, row_data = c(symbol = \"HGNC\")) head(names(rowData(x))) #> [1] \"symbol\"       \"HGNCGeneName\" \"GeneID\"       \"Chromosome\"   \"StartBP\"      #> [6] \"EndBP\"         # Rename `LowDepthFlag` to `low_depth_flag` in `colData`. x <- rename(x, col_data = c(low_depth_flag = \"LowDepthFlag\")) tail(names(colData(x))) #> [1] \"ALIVDT\"               \"COHORT\"               \"TTYPE\"                #> [4] \"STDSSDY\"              \"low_depth_flag\"       \"TechnicalFailureFlag\"  # Rename assay `count` to `counts`. x <- rename(x, assays = c(counts = \"count\")) assayNames(x) #> [1] \"counts\""},{"path":"https://insightsengineering.github.io/hermes/reference/samples.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample IDs Accessor ‚Äî samples,AnyHermesData-method","title":"Sample IDs Accessor ‚Äî samples,AnyHermesData-method","text":"Access sample IDs, .e. col names, AnyHermesData object nicely named accessor method.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample IDs Accessor ‚Äî samples,AnyHermesData-method","text":"","code":"# S4 method for AnyHermesData samples(object)"},{"path":"https://insightsengineering.github.io/hermes/reference/samples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample IDs Accessor ‚Äî samples,AnyHermesData-method","text":"object (AnyHermesData) input.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/samples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample IDs Accessor ‚Äî samples,AnyHermesData-method","text":"character vector sample IDs.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/hermes/reference/samples.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample IDs Accessor ‚Äî samples,AnyHermesData-method","text":"","code":"a <- hermes_data samples(a) #>  [1] \"06520011B0023R\" \"06520067C0018R\" \"06520063C0043R\" \"06520105C0017R\" #>  [5] \"06520092C0017R\" \"06520103C0017R\" \"06520001B0023R\" \"06520022C0017R\" #>  [9] \"06520062C0017R\" \"06520046C0018R\" \"06520101B0017R\" \"06520047C0017R\" #> [13] \"06520024B0014R\" \"06520080B0023R\" \"06520093C0017R\" \"06520070C0018R\" #> [17] \"06520023C0018R\" \"06520099B0017R\" \"06520015C0016R\" \"06520019C0023R\""},{"path":"https://insightsengineering.github.io/hermes/reference/set_tech_failure.html","id":null,"dir":"Reference","previous_headings":"","what":"Set Technical Failure Flags ‚Äî set_tech_failure","title":"Set Technical Failure Flags ‚Äî set_tech_failure","text":"Setter function allows user define sample manually technical failure.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/set_tech_failure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set Technical Failure Flags ‚Äî set_tech_failure","text":"","code":"set_tech_failure(object, sample_ids)"},{"path":"https://insightsengineering.github.io/hermes/reference/set_tech_failure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set Technical Failure Flags ‚Äî set_tech_failure","text":"object (AnyHermesData) input. sample_ids (character)  sample IDs flagged technical failures.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/set_tech_failure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set Technical Failure Flags ‚Äî set_tech_failure","text":"AnyHermesData object modified technical failure flags.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/hermes/reference/set_tech_failure.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set Technical Failure Flags ‚Äî set_tech_failure","text":"","code":"# Manually flag technical failures in a `AnyHermesData` object. object <- hermes_data get_tech_failure(object)[\"06520101B0017R\"] #> 06520101B0017R  #>          FALSE  result <- set_tech_failure(object, c(\"06520101B0017R\", \"06520047C0017R\")) get_tech_failure(result)[\"06520101B0017R\"] #> 06520101B0017R  #>           TRUE"},{"path":"https://insightsengineering.github.io/hermes/reference/show.html","id":null,"dir":"Reference","previous_headings":"","what":"Show Method for AnyHermesData Objects ‚Äî show,HermesData-method","title":"Show Method for AnyHermesData Objects ‚Äî show,HermesData-method","text":"show method displays high-level information AnyHermesData objects.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/show.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show Method for AnyHermesData Objects ‚Äî show,HermesData-method","text":"","code":"# S4 method for HermesData show(object)  # S4 method for RangedHermesData show(object)"},{"path":"https://insightsengineering.github.io/hermes/reference/show.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show Method for AnyHermesData Objects ‚Äî show,HermesData-method","text":"object (AnyHermesData) input.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/show.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show Method for AnyHermesData Objects ‚Äî show,HermesData-method","text":"None (invisible NULL), used side effect printing console.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/show.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Show Method for AnyHermesData Objects ‚Äî show,HermesData-method","text":"method used HermesData RangedHermesData objects. need define separately method used instead one inherited SummarizedExperiment::SummarizedExperiment.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/show.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show Method for AnyHermesData Objects ‚Äî show,HermesData-method","text":"","code":"object <- hermes_data object #> class: HermesData #> assays(1): counts #> genes(5085): GeneID:11185 GeneID:10677 ... GeneID:9087 GeneID:9426 #> additional gene information(3): GeneID SYMBOL chromosome_name #> samples(20): 06520011B0023R 06520067C0018R ... 06520015C0016R #>   06520019C0023R #> additional sample information(72): Filename SampleID ... TTYPE STDSSDY"},{"path":"https://insightsengineering.github.io/hermes/reference/subset.html","id":null,"dir":"Reference","previous_headings":"","what":"Subsetting AnyHermesData Objects ‚Äî subset","title":"Subsetting AnyHermesData Objects ‚Äî subset","text":"method subsets AnyHermesData objects, based expressions involving rowData columns colData columns.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/subset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subsetting AnyHermesData Objects ‚Äî subset","text":"x (AnyHermesData) object subset . subset (expression) logical expression based rowData columns select genes. select (expression) logical expression based colData columns select samples.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/subset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subsetting AnyHermesData Objects ‚Äî subset","text":"subsetted AnyHermesData object.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/subset.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Subsetting AnyHermesData Objects ‚Äî subset","text":"Note just inherits SummarizedExperiment::subset,SummarizedExperiment-method().","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/subset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subsetting AnyHermesData Objects ‚Äî subset","text":"","code":"a <- hermes_data a #> class: HermesData #> assays(1): counts #> genes(5085): GeneID:11185 GeneID:10677 ... GeneID:9087 GeneID:9426 #> additional gene information(3): GeneID SYMBOL chromosome_name #> samples(20): 06520011B0023R 06520067C0018R ... 06520015C0016R #>   06520019C0023R #> additional sample information(72): Filename SampleID ... TTYPE STDSSDY  # Subset both genes and samples. subset(a, subset = low_expression_flag, select = DISCSTUD == \"N\") #> class: HermesData #> assays(1): counts #> genes(3021): GeneID:10677 GeneID:101928428 ... GeneID:9084 GeneID:9426 #> additional gene information(3): GeneID SYMBOL chromosome_name #> samples(6): 06520067C0018R 06520105C0017R ... 06520023C0018R #>   06520099B0017R #> additional sample information(72): Filename SampleID ... TTYPE STDSSDY  # Subset only genes. subset(a, subset = chromosome == \"2\") #> class: HermesData #> assays(1): counts #> genes(326): GeneID:101929282 GeneID:51455 ... GeneID:101927614 #>   GeneID:285172 #> additional gene information(3): GeneID SYMBOL chromosome_name #> samples(20): 06520011B0023R 06520067C0018R ... 06520015C0016R #>   06520019C0023R #> additional sample information(72): Filename SampleID ... TTYPE STDSSDY  # Subset only samples. subset(a, select = AGE > 18) #> class: HermesData #> assays(1): counts #> genes(5085): GeneID:11185 GeneID:10677 ... GeneID:9087 GeneID:9426 #> additional gene information(3): GeneID SYMBOL chromosome_name #> samples(4): 06520011B0023R 06520103C0017R 06520001B0023R 06520080B0023R #> additional sample information(72): Filename SampleID ... TTYPE STDSSDY"},{"path":"https://insightsengineering.github.io/hermes/reference/summarized_experiment.html","id":null,"dir":"Reference","previous_headings":"","what":"Example SummarizedExperiment Data ‚Äî summarized_experiment","title":"Example SummarizedExperiment Data ‚Äî summarized_experiment","text":"example SummarizedExperiment::SummarizedExperiment can used create HermesData object. already contains required columns rowData colData.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/summarized_experiment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example SummarizedExperiment Data ‚Äî summarized_experiment","text":"","code":"summarized_experiment"},{"path":"https://insightsengineering.github.io/hermes/reference/summarized_experiment.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example SummarizedExperiment Data ‚Äî summarized_experiment","text":"SummarizedExperiment::SummarizedExperiment object 20 samples covering 5085 features (Entrez gene IDs).","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/summarized_experiment.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example SummarizedExperiment Data ‚Äî summarized_experiment","text":"artificial dataset designed resemble real data.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/hermes/reference/summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary Method for AnyHermesData Objects ‚Äî summary","title":"Summary Method for AnyHermesData Objects ‚Äî summary","text":"Provides concise summary content AnyHermesData objects.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary Method for AnyHermesData Objects ‚Äî summary","text":"","code":"summary(object, ...)  # S4 method for AnyHermesData summary(object)  # S4 method for HermesDataSummary show(object)"},{"path":"https://insightsengineering.github.io/hermes/reference/summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary Method for AnyHermesData Objects ‚Äî summary","text":"object (HermesDataSummary)  result summary method applied AnyHermesData object. ... used.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary Method for AnyHermesData Objects ‚Äî summary","text":"object corresponding summary class, HermesDataSummary.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/summary.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Summary Method for AnyHermesData Objects ‚Äî summary","text":"summary(AnyHermesData): summary method AnyHermesData object creates HermesDataSummary object. show(HermesDataSummary): show method prints summary description HermesDataSummary object generated summary() method.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary Method for AnyHermesData Objects ‚Äî summary","text":"","code":"object <- hermes_data object_summary <- summary(object)  # We can access parts of this S4 object with the `slot` function. str(object_summary) #> Formal class 'HermesDataSummary' [package \"hermes\"] with 10 slots #>   ..@ class_name            : chr \"HermesData\" #>   ..@ n_genes               : int 5085 #>   ..@ n_samples             : int 20 #>   ..@ additional_gene_info  : chr [1:3] \"GeneID\" \"SYMBOL\" \"chromosome_name\" #>   ..@ additional_sample_info: chr [1:72] \"Filename\" \"SampleID\" \"AGEGRP\" \"AGE18\" ... #>   ..@ no_qc_flags_filled    : logi FALSE #>   ..@ genes_fail            : chr [1:3021] \"GeneID:10677\" \"GeneID:101928428\" \"GeneID:100422835\" \"GeneID:102466731\" ... #>   ..@ samples_fail          : chr [1:2] \"06520063C0043R\" \"06520062C0017R\" #>   ..@ lib_sizes             : Named num [1:20] 5474927 5154958 4632496 5533212 5026848 ... #>   .. ..- attr(*, \"names\")= chr [1:20] \"06520011B0023R\" \"06520067C0018R\" \"06520063C0043R\" \"06520105C0017R\" ... #>   ..@ assay_names           : chr \"counts\" slotNames(object_summary) #>  [1] \"class_name\"             \"n_genes\"                \"n_samples\"              #>  [4] \"additional_gene_info\"   \"additional_sample_info\" \"no_qc_flags_filled\"     #>  [7] \"genes_fail\"             \"samples_fail\"           \"lib_sizes\"              #> [10] \"assay_names\"            slot(object_summary, \"lib_sizes\") #> 06520011B0023R 06520067C0018R 06520063C0043R 06520105C0017R 06520092C0017R  #>        5474927        5154958        4632496        5533212        5026848  #> 06520103C0017R 06520001B0023R 06520022C0017R 06520062C0017R 06520046C0018R  #>        7262374        6408552        5286953        4778014        4990556  #> 06520101B0017R 06520047C0017R 06520024B0014R 06520080B0023R 06520093C0017R  #>        4923925        5417510        5560720        4642530        5016838  #> 06520070C0018R 06520023C0018R 06520099B0017R 06520015C0016R 06520019C0023R  #>        6464043        6080233        5314431        5426566        6139497   # Just calling the summary method like this will use the `show()` method. summary(object) #> HermesData object with 20 samples of 5085 genes. #> - Library sizes across samples: mean 5476759, median 5365970, range 4632496 to 7262374 #> - Included assays (1): counts #> - Additional gene information (3): GeneID SYMBOL chromosome_name #> - Additional sample information (72): Filename SampleID ... TTYPE #>   STDSSDY #> - Low expression genes (3021): GeneID:10677 GeneID:101928428 ... #>   GeneID:9084 GeneID:9426 #> - Samples with too low depth or technical failures (2): 06520063C0043R #>   06520062C0017R"},{"path":"https://insightsengineering.github.io/hermes/reference/top_genes.html","id":null,"dir":"Reference","previous_headings":"","what":"Derivation of Top Genes ‚Äî top_genes","title":"Derivation of Top Genes ‚Äî top_genes","text":"top_genes() creates HermesDataTopGenes object, extends data.frame. contains two columns: expression: containing statistic values calculated summary_fun across columns. name: gene names. corresponding autoplot() method visualizes result barplot.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/top_genes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Derivation of Top Genes ‚Äî top_genes","text":"","code":"top_genes(   object,   assay_name = \"counts\",   summary_fun = rowMeans,   n_top = if (is.null(min_threshold)) 10L else NULL,   min_threshold = NULL )  # S4 method for HermesDataTopGenes autoplot(   object,   x_lab = \"HGNC gene names\",   y_lab = paste0(object@summary_fun_name, \"(\", object@assay_name, \")\"),   title = \"Top most expressed genes\" )"},{"path":"https://insightsengineering.github.io/hermes/reference/top_genes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Derivation of Top Genes ‚Äî top_genes","text":"object (AnyHermedData) input. assay_name (string) name assay use sorting genes. summary_fun (function) summary statistics function apply across samples assay resulting numeric vector one value per gene. n_top (count NULL) selection criteria based number entries. min_threshold (number NULL ) selection criteria based minimum summary statistics threshold. x_lab (string) x-axis label. y_lab (string) y-axis label. title (string) plot title.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/top_genes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Derivation of Top Genes ‚Äî top_genes","text":"HermesDataTopGenes object.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/top_genes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Derivation of Top Genes ‚Äî top_genes","text":"data frame sorted descending order expression top entries according selection criteria included. Note exactly one arguments n_top min_threshold must provided.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/top_genes.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Derivation of Top Genes ‚Äî top_genes","text":"autoplot(HermesDataTopGenes): Creates bar plot HermesDataTopGenes object, y axis shows expression statistics top genes x-axis.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/top_genes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Derivation of Top Genes ‚Äî top_genes","text":"","code":"object <- hermes_data  # Default uses average of raw counts across samples to rank genes. top_genes(object) #>              expression         name #> GeneID:2335   390085.60  GeneID:2335 #> GeneID:79026  302684.20 GeneID:79026 #> GeneID:4627    60247.10  GeneID:4627 #> GeneID:667     59502.90   GeneID:667 #> GeneID:26986   58479.75 GeneID:26986 #> GeneID:6218    57782.15  GeneID:6218 #> GeneID:6205    50484.85  GeneID:6205 #> GeneID:811     42460.70   GeneID:811 #> GeneID:23215   41407.95 GeneID:23215 #> GeneID:4035    35884.20  GeneID:4035  # Instead of showing top 10 genes, can also set a minimum threshold on average counts. top_genes(object, n_top = NULL, min_threshold = 50000) #>              expression         name #> GeneID:2335   390085.60  GeneID:2335 #> GeneID:79026  302684.20 GeneID:79026 #> GeneID:4627    60247.10  GeneID:4627 #> GeneID:667     59502.90   GeneID:667 #> GeneID:26986   58479.75 GeneID:26986 #> GeneID:6218    57782.15  GeneID:6218 #> GeneID:6205    50484.85  GeneID:6205  # We can also use the maximum of raw counts across samples, by specifying a different # summary statistics function. result <- top_genes(object, summary_fun = rowMax)  # Finally we can produce barplots based on the results. autoplot(result, title = \"My top genes\")  autoplot(result, y_lab = \"Counts\", title = \"My top genes\")"},{"path":"https://insightsengineering.github.io/hermes/reference/validate.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal Helper Functions for Validation of AnyHermesData Objects ‚Äî validate","title":"Internal Helper Functions for Validation of AnyHermesData Objects ‚Äî validate","text":"functions used internally therefore exported. work SummarizedExperiment::SummarizedExperiment objects, AnyHermesData objects defined successfully passing validation checks.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/validate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal Helper Functions for Validation of AnyHermesData Objects ‚Äî validate","text":"","code":"validate_counts(object)  validate_cols(required, actual)  validate_row_data(object)  validate_col_data(object)  validate_names(object)  validate_prefix(object)"},{"path":"https://insightsengineering.github.io/hermes/reference/validate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal Helper Functions for Validation of AnyHermesData Objects ‚Äî validate","text":"object (SummarizedExperiment) object validate. required (character) required column names. actual (actual) actual column names.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/validate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal Helper Functions for Validation of AnyHermesData Objects ‚Äî validate","text":"character vector validation failure messages, NULL case validation passes.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/validate.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Internal Helper Functions for Validation of AnyHermesData Objects ‚Äî validate","text":"validate_counts(): validates first assay counts containing non-missing, integer, non-negative values. validate_cols(): validates required column names contained actual column names. validate_row_data(): validates object contains rowData required columns. validate_col_data(): validates object contains colData required columns. validate_names(): validates object contains row column names. validate_prefix(): validates object prefix string contains alphabetic characters.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/wrap_in_mae.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrap in MAE ‚Äî wrap_in_mae","title":"Wrap in MAE ‚Äî wrap_in_mae","text":"helper function wraps SummarizedExperiment objects MultiAssayExperiment (MAE) object.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/wrap_in_mae.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrap in MAE ‚Äî wrap_in_mae","text":"","code":"wrap_in_mae(x, name = deparse(substitute(x)))"},{"path":"https://insightsengineering.github.io/hermes/reference/wrap_in_mae.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrap in MAE ‚Äî wrap_in_mae","text":"x (SummarizedExperiment) input create MAE object . name (string) experiment name use MAE x.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/wrap_in_mae.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrap in MAE ‚Äî wrap_in_mae","text":"MAE object experiment x given name.","code":""},{"path":"https://insightsengineering.github.io/hermes/reference/wrap_in_mae.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wrap in MAE ‚Äî wrap_in_mae","text":"","code":"mae <- wrap_in_mae(summarized_experiment) mae[[\"summarized_experiment\"]] #> class: SummarizedExperiment  #> dim: 5085 20  #> metadata(0): #> assays(1): counts #> rownames(5085): GeneID:11185 GeneID:10677 ... GeneID:9087 GeneID:9426 #> rowData names(12): HGNC HGNCGeneName ... chromosome_name #>   LowExpressionFlag #> colnames(20): 06520011B0023R 06520067C0018R ... 06520015C0016R #>   06520019C0023R #> colData names(74): Filename SampleID ... LowDepthFlag #>   TechnicalFailureFlag"},{"path":[]},{"path":"https://insightsengineering.github.io/hermes/news/index.html","id":"enhancements-1-7-1","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"hermes 1.7.1","text":"New plotting function draw_heatmap produce heatmaps (normalized) counts.","code":""},{"path":"https://insightsengineering.github.io/hermes/news/index.html","id":"miscellaneous-1-7-1","dir":"Changelog","previous_headings":"","what":"Miscellaneous","title":"hermes 1.7.1","text":"utility function df_cols_to_factor now also converts existing factors explicit missing levels. Version bump forcats dependency. Removed ggplot2 deprecation warning ..count...","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/hermes/news/index.html","id":"enhancements-1-0-1","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"hermes 1.0.1","text":"Additional version argument connect_biomart specify Ensembl version.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/hermes/news/index.html","id":"meta-1-0-0","dir":"Changelog","previous_headings":"","what":"Meta","title":"hermes 1.0.0","text":"First public release hermes package. Submission BioConductor.","code":""},{"path":"https://insightsengineering.github.io/hermes/news/index.html","id":"enhancements-1-0-0","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"hermes 1.0.0","text":"Better legends genes barplot correlation heatmap. Improved vignette layout using BioConductor style.","code":""},{"path":"https://insightsengineering.github.io/hermes/news/index.html","id":"miscellaneous-1-0-0","dir":"Changelog","previous_headings":"","what":"Miscellaneous","title":"hermes 1.0.0","text":"New utility function cut_quantile cutting numeric vector quantiles. New utility function cat_with_newline concatenating printing newline. New check function check_proportion checks single proportion.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/hermes/news/index.html","id":"new-features-0-1-1","dir":"Changelog","previous_headings":"","what":"New Features","title":"hermes 0.1.1","text":"New function draw_scatterplot produce scatterplots two genes gene signatures. New function draw_boxplot boxplots gene expression values. New function draw_barplot barplots dichotomized gene expression counts two three percentile categories. New helper function wrap_in_mae wraps single SummarizedExperiment object MAE object. New method rename makes renaming columns rowData colData well assay names existing SummarizedExperiment objects much easier, step converting HermesData. New method lapply allows user apply function experiments MultiAssayExperiment. New method isEmpty checks whether SummarizedExperiment object empty. New gene filtering option n_top calc_pca function, allows filtering genes greatest variability across samples. New class GeneSpec specification genes gene signatures, see ?gene_spec simple construction. Inclusion gene signature functions colPrinComp1 colMeanZscores supplement standard column statistics functions. New helper function col_data_with_genes extracts sample variables saved colData together selected gene information combined data set. New helper function inner_join_cdisc joins genetic CDISC data sets.","code":""},{"path":"https://insightsengineering.github.io/hermes/news/index.html","id":"bug-fixes-0-1-1","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"hermes 0.1.1","text":"normalize() now also works hermes package loaded, .e.¬†can use hermes::normalize(). correlate() now also works factor variables sample variables HermesData object. add_quality_flags() longer return NA technical failure flags samples single gene contained input, instead vector FALSE ensure correct downstream functionality.","code":""},{"path":"https://insightsengineering.github.io/hermes/news/index.html","id":"miscellaneous-0-1-1","dir":"Changelog","previous_headings":"","what":"Miscellaneous","title":"hermes 0.1.1","text":"Updated LICENCE README new package references. multi_assay_experiment now contains HermesData experiments, different patient IDs, one experiment normalized assays, multiple samples per patient one experiment. main HermesData example now saved package hermes_data, previous summarized_experiment still available. Note patient IDs changed new version align multi_assay_experiment. Renaming required rowData colData columns consistent standards use lowercase snake-case names. Annotation querying setting now flexible also allows query annotations required ones. Instead gene starts ends, total length gene exons now used annotation column size. Corresponding queries BioMart used return gene size. df_char_to_factor deprecated (can still used warning) replaced df_cols_to_factor, also converts logical variables factor variables. providing SummarizedExperiment objects containing DelayedMatrix assays HermesData() constructor, silently converted matrix assays ensure downstream functionality.","code":""},{"path":"https://insightsengineering.github.io/hermes/news/index.html","id":"hermes-010","dir":"Changelog","previous_headings":"","what":"hermes 0.1.0","title":"hermes 0.1.0","text":"First internal release hermes package, contains classes, methods functions import, quality-check, filter, normalize, analyze RNAseq counts data differential expression. hermes successor rnaseqTools R package. core functionality built BioConductor ecosystem, especially SummarizedExperiment class. New users first begin reading ‚ÄúIntroduction hermes‚Äù vignette become familiar hermes concepts.","code":""},{"path":"https://insightsengineering.github.io/hermes/news/index.html","id":"new-features-0-1-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"hermes 0.1.0","text":"Import RNAseq count data hermes ready format. Annotate gene information Ensembl database via biomaRt. Add quality control (QC) flags genes samples. Filter subset data set. Normalize counts. Produce descriptive plots. Perform principal components analysis. Produce templated QC Rmd report. Perform differential expression analysis.","code":""}]
